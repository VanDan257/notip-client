{"version":3,"file":"src_app_admin_pages_home_home_module_ts.5e4684c5b7e705af.js","mappings":"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","names":["Portal","attach","host","this","_attachedHost","detach","isAttached","setAttachedHost","ComponentPortal","constructor","component","viewContainerRef","injector","componentFactoryResolver","projectableNodes","super","TemplatePortal","templateRef","context","origin","elementRef","undefined","DomPortal","element","ElementRef","nativeElement","BasePortalOutlet","_isDisposed","attachDomPortal","hasAttached","_attachedPortal","portal","attachComponentPortal","attachTemplatePortal","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","_document","anchorNode","createComment","parentNode","insertBefore","appendChild","replaceChild","componentFactory","resolveComponentFactory","componentRef","createComponent","length","destroy","create","Injector","NULL","attachView","hostView","viewCount","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","rootNodes","forEach","rootNode","detectChanges","index","indexOf","remove","nodeEventEmitterMethods","eventTargetMethods","jqueryMethods","fromEvent","target","eventName","options","resultSelector","isFunction","pipe","mapOneOrManyArgs","add","isEventTarget","addEventListener","removeEventListener","map","methodName","handler","isNodeStyleEventEmitter","addListener","removeListener","toCommonHandlerRegistry","isJQueryStyleEventEmitter","on","off","isArrayLike","mergeMap","subTarget","innerFrom","TypeError","Observable","subscriber","args","next","Action","Subscription","scheduler","work","schedule","state","delay","intervalProvider","setInterval","timeout","delegate","clearInterval","handle","dateTimestampProvider","now","Date","Scheduler","schedulerActionCtor","asyncScheduler","AsyncScheduler","SchedulerAction","actions","_active","flush","action","push","error","execute","shift","unsubscribe","AsyncAction","pending","_a","closed","id","recycleAsyncId","requestAsyncId","_id","bind","_scheduler","Error","_execute","_delay","errorValue","errored","e","arrRemove","none","selector","querySelector","empty","selectorAll","querySelectorAll","matcher","matches","childMatcher","node","find","Array","prototype","childFirst","firstElementChild","filter","children","from","sparse","update","EnterNode","parent","datum","ownerDocument","namespaceURI","_next","_parent","__data__","bindIndex","group","enter","exit","data","i","groupLength","dataLength","bindKey","key","keyValue","nodeByKeyValue","Map","keyValues","call","has","set","get","delete","arraylike","ascending","a","b","NaN","child","xhtml","namespaces","svg","xlink","xml","xmlns","namespace","name","prefix","slice","hasOwnProperty","space","local","attrRemove","removeAttribute","attrRemoveNS","fullname","removeAttributeNS","attrConstant","value","setAttribute","attrConstantNS","setAttributeNS","attrFunction","v","apply","arguments","attrFunctionNS","src_window","defaultView","document","styleRemove","style","removeProperty","styleConstant","priority","setProperty","styleFunction","styleValue","getPropertyValue","getComputedStyle","propertyRemove","propertyConstant","propertyFunction","classArray","string","trim","split","classList","ClassList","_node","_names","getAttribute","classedAdd","names","list","n","classedRemove","classedTrue","classedFalse","classedFunction","textRemove","textContent","textConstant","textFunction","htmlRemove","innerHTML","htmlConstant","htmlFunction","raise","nextSibling","lower","previousSibling","firstChild","creatorInherit","uri","documentElement","createElement","createElementNS","creatorFixed","creator","constantNull","removeChild","selection_cloneShallow","clone","cloneNode","selection_cloneDeep","onRemove","typename","__on","o","j","m","type","listener","onAdd","contextListener","event","dispatchEvent","params","window","CustomEvent","createEvent","initEvent","bubbles","cancelable","detail","dispatchConstant","dispatchFunction","join","splice","contains","root","Selection","groups","parents","_groups","_parents","selection","select","selection_select","subgroups","subnode","subgroup","selectAll","arrayAll","array","x","isArray","selectChild","match","childFind","selectChildren","childrenFilter","selection_filter","src_constant","constant","enterGroup","updateGroup","previous","i0","i1","_enter","_exit","onenter","onupdate","onexit","append","merge","order","groups0","groups1","m0","Math","min","merges","group0","group1","selection_selection","compareDocumentPosition","sort","compare","compareNode","sortgroups","sortgroup","callback","nodes","size","selection_empty","each","attr","getAttributeNS","selection_style","property","classed","text","selection_text","html","selection_raise","selection_lower","insert","before","selection_remove","deep","selection_datum","t","typenames","parseTypenames","dispatch","Symbol","iterator","src_selection","noop","_","test","Dispatch","c","concat","T","types","copy","that","src_dispatch","src_define","factory","extend","definition","Object","Color","brighter","reI","reN","reP","reHex","reRgbInteger","RegExp","reRgbPercent","reRgbaInteger","reRgbaPercent","reHslPercent","reHslaPercent","named","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","color_formatHex","rgb","formatHex","color_formatRgb","formatRgb","color","format","l","toLowerCase","exec","parseInt","rgbn","Rgb","rgba","hsla","r","g","opacity","rgbConvert","rgb_formatHex","hex","rgb_formatRgb","clampa","clampi","isNaN","max","round","toString","h","s","Hsl","hslConvert","clamph","clampt","hsl2rgb","m1","m2","basis","t1","v0","v1","v2","v3","t2","t3","define","channels","assign","displayable","formatHex8","color_formatHex8","formatHsl","color_formatHsl","k","pow","darker","clamp","rgb_formatHex8","hsl","d3_interpolate_src_constant","nogamma","d","linear","rgbGamma","y","gamma","exponential","start","end","colorRgb","rgbSpline","spline","colors","genericArray","nb","na","date","setTime","src_number","object","src_basis","values","floor","basisClosed","reA","reB","source","am","bm","bs","bi","lastIndex","q","number","one","zero","src_numberArray","isNumberArray","ArrayBuffer","isView","DataView","numberArray","valueOf","taskHead","taskTail","frame","interval","pokeDelay","clockLast","clockNow","clockSkew","clock","performance","setFrame","requestAnimationFrame","f","setTimeout","clearNow","Timer","_call","_time","timer","time","restart","wake","timerFlush","nap","t0","Infinity","sleep","poke","clearTimeout","src_timeout","elapsed","stop","emptyOn","emptyTween","CREATED","STARTED","timing","schedules","__transition","self","tween","tick","duration","ease","init","svgNode","degrees","PI","identity","translateX","translateY","rotate","skewX","scaleX","scaleY","decompose","sqrt","atan2","atan","interpolateTransform","parse","pxComma","pxParen","degParen","pop","translate","xa","ya","xb","yb","scale","interpolateTransformCss","parseCss","DOMMatrix","WebKitCSSMatrix","isIdentity","interpolateTransformSvg","parseSvg","transform","baseVal","consolidate","matrix","tweenRemove","tween0","tween1","tweenFunction","tweenValue","transition","transition_interpolate","interpolateNumber","interpolateRgb","interpolateString","interpolate","value1","string00","interpolate0","string1","string0","string10","attrTweenNS","attrInterpolateNS","_value","attrTween","attrInterpolate","delayFunction","delayConstant","durationFunction","durationConstant","Transition","_name","newId","selection_prototype","transition_select","transition_selectAll","inherit","transition_filter","transition_merge","transition_selection","transition_transition","id0","id1","transition_on","onFunction","on0","on1","sit","every","transition_attr","transition_attrTween","transition_style","styleTween","styleNull","styleMaybeRemove","listener0","transition_styleTween","styleInterpolate","transition_text","textTween","transition_textTween","textInterpolate","transition_remove","removeFunction","easeConstant","easeVarying","transition_easeVarying","Promise","resolve","reject","cancel","interrupt","defaultTiming","cubicInOut","selection_interrupt","active","selection_transition","descending","bisector","compare1","compare2","delta","left","lo","hi","mid","center","right","e10","e5","e2","tickSpec","count","step","power","log10","factor","i2","inc","tickIncrement","tickStep","reverse","durationSecond","durationMinute","durationHour","durationDay","durationWeek","durationMonth","durationYear","timeInterval","floori","offseti","field","ceil","d0","d1","offset","range","isFinite","millisecond","second","getMilliseconds","getUTCSeconds","timeMinute","getSeconds","getMinutes","utcMinute","setUTCSeconds","getUTCMinutes","timeHour","getHours","utcHour","setUTCMinutes","getUTCHours","timeDay","setHours","setDate","getDate","getTimezoneOffset","unixDay","setUTCHours","setUTCDate","getUTCDate","timeWeekday","getDay","timeSunday","utcWeekday","getUTCDay","utcSunday","timeMonth","setMonth","getMonth","getFullYear","utcMonth","setUTCMonth","getUTCMonth","getUTCFullYear","timeYear","setFullYear","utcYear","setUTCFullYear","ticker","year","month","week","day","hour","minute","tickIntervals","tickInterval","abs","ticks","utcTicks","utcTickInterval","timeTicks","timeTickInterval","newInterval","utcMonday","utcThursday","src_utcDay","weekday","sunday","monday","thursday","src_day","src_year","src_utcYear","localDate","H","M","S","L","utcDate","UTC","newDate","pads","numberRe","percentRe","requoteRe","pad","fill","width","sign","requote","replace","formatRe","formatLookup","parseWeekdayNumberSunday","w","parseWeekdayNumberMonday","u","parseWeekNumberSunday","U","parseWeekNumberISO","V","parseWeekNumberMonday","W","parseFullYear","parseYear","parseZone","Z","parseQuarter","parseMonthNumber","parseDayOfMonth","parseDayOfYear","parseHour24","parseMinutes","parseSeconds","parseMilliseconds","parseMicroseconds","parseLiteralPercent","parseUnixTimestamp","Q","parseUnixTimestampSeconds","formatDayOfMonth","p","formatHour24","formatHour12","formatDayOfYear","formatMilliseconds","formatMicroseconds","formatMonthNumber","formatMinutes","formatSeconds","formatWeekdayNumberMonday","formatWeekNumberSunday","dISO","timeThursday","formatWeekNumberISO","formatWeekdayNumberSunday","formatWeekNumberMonday","timeMonday","formatYear","formatYearISO","formatFullYear","formatFullYearISO","formatZone","z","formatUTCDayOfMonth","formatUTCHour24","formatUTCHour12","formatUTCDayOfYear","utcDay","formatUTCMilliseconds","getUTCMilliseconds","formatUTCMicroseconds","formatUTCMonthNumber","formatUTCMinutes","formatUTCSeconds","formatUTCWeekdayNumberMonday","dow","formatUTCWeekNumberSunday","UTCdISO","formatUTCWeekNumberISO","formatUTCWeekdayNumberSunday","formatUTCWeekNumberMonday","formatUTCYear","formatUTCYearISO","formatUTCFullYear","formatUTCFullYearISO","formatUTCZone","formatLiteralPercent","formatUnixTimestamp","formatUnixTimestampSeconds","defaultLocale","formatLocale","locale","locale_dateTime","dateTime","locale_date","locale_time","locale_periods","periods","locale_weekdays","days","locale_shortWeekdays","shortDays","locale_months","months","locale_shortMonths","shortMonths","periodRe","periodLookup","weekdayRe","weekdayLookup","shortWeekdayRe","shortWeekdayLookup","monthRe","monthLookup","shortMonthRe","shortMonthLookup","formats","formatShortWeekday","A","formatWeekday","formatShortMonth","B","formatMonth","G","I","formatPeriod","formatQuarter","X","Y","utcFormats","formatUTCShortWeekday","formatUTCWeekday","formatUTCShortMonth","formatUTCMonth","formatUTCPeriod","formatUTCQuarter","parses","parseShortWeekday","parseWeekday","parseShortMonth","parseMonth","parseLocaleDateTime","parseSpecifier","parsePeriod","parseLocaleDate","parseLocaleTime","newFormat","specifier","charCodeAt","charAt","newParse","utcFormat","utcParse","bisectRight","bisect","unit","normalize","constants","bimap","domain","r0","r1","polymap","continuous","transformer","untransform","unknown","piecewise","output","input","interpolateValue","rescale","clamper","invert","rangeRound","interpolateRound","initRange","prefixExponent","re","formatSpecifier","FormatSpecifier","align","symbol","comma","precision","formatDecimalParts","toExponential","coefficient","exponent","formatRounded","formatTypes","%","toFixed","formatDecimal","toLocaleString","toPrecision","formatPrefixAuto","toUpperCase","src_identity","formatPrefix","prefixes","linearish","tickFormat","precisionPrefix","precisionRound","precisionFixed","nice","prestep","maxIter","src_locale","grouping","thousands","formatGroup","substring","Number","currencyPrefix","currency","currencySuffix","decimal","numerals","formatNumerals","String","percent","minus","nan","suffix","formatType","maybeSuffix","valuePrefix","valueSuffix","valueNegative","formatTrim","out","padding","InternMap","entries","keyof","defineProperties","_intern","_key","intern_get","intern_set","intern_delete","implicit","ordinal","band","bandwidth","ordinalRange","paddingInner","paddingOuter","sequence","quantileSorted","valueof","value0","quantile","thresholds","threshold","invertExtent","quantiles","_c0","TooltipContentComponent_span_4_ng_template_1_Template","rf","ctx","_c1","a0","model","TooltipContentComponent_span_4_Template","ctx_r1","template","TooltipContentComponent_span_5_Template","ctx_r2","title","LegendComponent_header_1_Template","ctx_r0","LegendComponent_li_4_Template","_r4","$event","ctx_r3","labelClick","emit","ctx_r5","activate","ctx_r6","deactivate","entry_r2","$implicit","label","formattedLabel","isActive","ChartComponent_ngx_charts_scale_legend_3_Template","legendOptions","position","LegendPosition","Below","view","legendWidth","ChartComponent_ngx_charts_legend_4_Template","_r3","legendLabelClick","ctx_r4","legendLabelActivate","legendLabelDeactivate","activeEntries","_c2","_c3","_c4","_c5","XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template","XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_tspan_1_Template","tickLine_r14","XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template","tickLines_r12","ngIf","XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template","tick_r3","ctx_r8","tickChunks","XAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template","tickFormatted_r5","ctx_r10","tickTrim","XAxisTicksComponent__svg_g_2__svg_ng_container_1_Template","_r7","_r9","textAnchor","textTransform","isWrapTicksSupported","XAxisTicksComponent__svg_g_2_Template","tickTransform","XAxisTicksComponent__svg_g_3__svg_g_1_Template","ctx_r19","gridLineTransform","gridLineHeight","XAxisTicksComponent__svg_g_3_Template","tick_r18","showGridLines","_c6","XAxisComponent__svg_g_1_Template","emitTicksHeight","trimTicks","rotateTicks","maxTickLength","tickFormatting","tickArguments","tickStroke","xScale","xOrient","dims","height","wrapTicks","XAxisComponent__svg_g_2_Template","labelText","labelOffset","orientation","Bottom","_c7","YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_container_4_Template","YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1__svg_tspan_1_Template","tickLine_r17","i_r18","ctx_r16","tickSpacing","YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0__svg_ng_container_1_Template","tickLines_r14","YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5__svg_ng_container_0_Template","_r11","YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_5_Template","tick_r5","YAxisTicksComponent__svg_g_2__svg_ng_container_1__svg_ng_template_7_Template","tickFormatted_r7","ctx_r12","YAxisTicksComponent__svg_g_2__svg_ng_container_1_Template","dy","x1","y1","YAxisTicksComponent__svg_g_2_Template","YAxisTicksComponent__svg_path_3_Template","referenceAreaPath","YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_1_Template","ctx_r24","gridLineWidth","YAxisTicksComponent__svg_g_4__svg_g_1__svg_line_2_Template","ctx_r25","YAxisTicksComponent__svg_g_4__svg_g_1_Template","ctx_r23","orient","Orientation","Left","Right","YAxisTicksComponent__svg_g_4_Template","tick_r22","YAxisTicksComponent__svg_g_5__svg_g_1__svg_g_2_Template","refLine_r26","ctx_r28","YAxisTicksComponent__svg_g_5__svg_g_1_Template","ctx_r27","showRefLabels","YAxisTicksComponent__svg_g_5_Template","showRefLines","_c8","YAxisComponent__svg_g_1_Template","emitTicksWidth","yScale","yOrient","referenceLines","YAxisComponent__svg_g_2_Template","_c9","SvgLinearGradientComponent__svg_stop_1_Template","stop_r1","_c22","_c24","a1","_c26","BarComponent__svg_defs_0_Template","gradientId","gradientStops","_c27","_c29","SeriesVerticalComponent__svg_g_0__svg_g_1_Template","_r6","onClick","ctx_r7","bar_r4","animations","barOrientation","Vertical","roundEdges","gradient","ariaLabel","tooltipDisabled","tooltipPlacement","tooltipType","tooltipTemplate","tooltipText","noBarWhenZero","SeriesVerticalComponent__svg_g_0_Template","bars","trackBy","SeriesVerticalComponent__svg_g_1__svg_g_1_Template","_r12","ctx_r11","ctx_r13","ctx_r14","bar_r10","ctx_r9","SeriesVerticalComponent__svg_g_1_Template","SeriesVerticalComponent__svg_g_2__svg_g_1_Template","_r19","i_r17","ctx_r18","dataLabelHeightChanged","b_r16","ctx_r15","total","dataLabelFormatting","SeriesVerticalComponent__svg_g_2_Template","barsForDataLabels","trackDataLabelBy","BarVerticalComponent__svg_g_2_Template","updateXAxisHeight","showXAxisLabel","xAxisLabel","trimXAxisTicks","rotateXAxisTicks","maxXAxisTickLength","xAxisTickFormatting","xAxisTicks","dataLabelMaxHeight","negative","BarVerticalComponent__svg_g_3_Template","_r5","updateYAxisWidth","showYAxisLabel","yAxisLabel","trimYAxisTicks","maxYAxisTickLength","yAxisTickFormatting","yAxisTicks","throttle","func","wait","result","later","leading","remaining","trailing","throttleable","descriptor","configurable","enumerable","defineProperty","PlacementTypes","Top","Center","verticalPosition","elDimensions","popoverDimensions","alignment","top","horizontalPosition","PositionHelper","calculateVerticalAlignment","innerHeight","calculateVerticalCaret","caretDimensions","popoverPosition","calculateHorizontalAlignment","innerWidth","calculateHorizontalCaret","shouldFlip","placement","spacing","flip","positionCaret","elmDim","hostDim","positionContent","determinePlacement","TooltipContentComponent","renderer","platformId","cssClasses","clz","cssClass","ngAfterViewInit","isPlatformBrowser","nativeElm","getBoundingClientRect","checkFlip","showCaret","addClass","setStyle","caretElm","onWindowResize","ɵfac","PLATFORM_ID","ɵcmp","selectors","viewQuery","_t","first","hostVars","hostBindings","inputs","decls","vars","consts","dependencies","styles","encapsulation","__decorate","InjectionRegisteryService","injectionService","defaults","components","getByType","bindings","createByType","assignDefaults","injectComponent","register","instance","compsByType","componentType","idx","destroyAll","destroyByType","comps","appendComponent","outputs","InjectionService","applicationRef","setGlobalRootViewContainer","container","globalRootViewContainer","getRootViewContainer","_container","setRootViewContainer","getComponentRootNode","isViewContainerRef","location","getRootViewContainerNode","projectComponentBindings","bindingKeys","getOwnPropertyNames","bindingName","eventKeys","componentClass","appendLocation","portalHost","ɵprov","token","TooltipService","LegendType","ScaleLegend","Legend","ScaleType","Time","Linear","Ordinal","Quantile","ScaleLegendComponent","horizontal","ngOnChanges","changes","gradientValues","gradientString","splits","pairs","valueRange","features","changeDetection","formatLabel","toLocaleDateString","LegendEntryComponent","EventEmitter","toggle","trimmedLabel","onMouseEnter","onMouseLeave","LegendComponent","cd","labelActivate","labelDeactivate","legendEntries","markForCheck","getLegendEntries","items","findIndex","getColor","entry","item","ChartComponent","showLegend","legendColumns","legendType","getLegendType","chartWidth","scaleType","ngContentSelectors","VisibilityObserver","zone","visible","isVisible","runCheck","onVisibilityChange","run","check","offsetHeight","offsetWidth","runOutsideAngular","ɵdir","isDate","BaseChartComponent","chartElement","scheme","schemeType","ngOnInit","isPlatformServer","bindWindowResizeEvent","visibilityObserver","subscribe","ngOnDestroy","unbindEvents","results","cloneData","getContainerDims","hostElem","formatDates","series","resizeSubscription","subscription","debounceTime","dueTime","operate","activeTask","lastValue","lastTime","emitWhenIdle","targetTime","createOperatorSubscriber","complete","seriesItem","seriesItemCopy","extra","JSON","stringify","customColors","AxisLabelComponent","textHeight","margin","strokeWidth","attrs","trimLabel","reduceTicks","maxTicks","reduced","modulus","getTickLines","maxLength","maxLines","labelString","totalLines","reduce","lines","line","last","startIndex","TextAnchor","Start","Middle","End","XAxisTicksComponent","dimensionsChanged","verticalSpacing","rotateLabels","innerTickSize","outerTickSize","tickPadding","maxTicksLength","maxAllowedLength","approxHeight","maxPossibleLengthForTickIfWrapped","updateDims","ticksElement","getTicks","angle","getRotationAngle","adjustedScale","tickLength","wordWidth","baseWidth","maxBaseWidth","cos","labelHeight","longestTick","earlier","current","getMaxPossibleLengthForTick","requiredHeight","sin","getMaxTicks","maxScaleTicks","tickValues","tickWidth","longestLabel","maxCharacters","averageCharacterWidth","truncatedText","maxAllowedLines","possibleStringLength","XAxisComponent","xAxisOffset","xAxisClassName","stroke","xAxisTickCount","newLabelOffset","ticksComponent","showLabel","roundedRect","tl","tr","bl","br","retval","YAxisTicksComponent","referenceLineLength","getApproximateAxisWidth","positionMiddle","chunksLength","availableFreeSpace","setReferencelines","y2","x2","refMin","refMax","tickHeight","preferredWidth","YAxisComponent","yAxisOffset","yAxisClassName","yAxisTickCount","AxesModule","ɵmod","ɵinj","imports","CommonModule","StyleTypes","popover","tooltip","ShowTypes","all","focus","mouseover","TooltipDirective","tooltipService","tooltipCssClass","tooltipAppendToBody","tooltipSpacing","tooltipShowCaret","tooltipAlignment","tooltipCloseOnClickOutside","tooltipCloseOnMouseLeave","tooltipHideTimeout","tooltipShowTimeout","tooltipShowEvent","tooltipImmediateExit","show","hide","listensForFocus","listensForHover","hideTooltip","onFocus","showTooltip","onBlur","onMouseClick","immediate","navigator","userAgent","createBoundOptions","addHideListeners","mouseEnterContentEvent","listen","mouseLeaveContentEvent","documentClickEvent","destroyFn","tooltipTitle","tooltipContext","TooltipModule","providers","cache","random","BarOrientation","Horizontal","SvgLinearGradientComponent","stops","global","ChartCommonModule","colorSets","selectable","ColorHelper","cs","colorDomain","generateColorScheme","colorScale","scaleQuantile","scaleOrdinal","points","scaleLinear","valueScale","formattedValue","found","mapping","getLinearGradientStops","colorValueScale","scaleBand","endColor","startVal","startColor","endVal","currentVal","originalOffset","AreaChartModule","BarComponent","hasGradient","hideBar","loadAnimation","gradientFill","getGradient","updatePathEl","checkToHideBar","path","getStartingPath","src_select","getPath","getStartOpacity","radius","getRadius","edges","BarChartType","Standard","Normalized","Stacked","D0Types","positive","BarLabelComponent","horizontalPadding","verticalPadding","getSize","formatedValue","valueFormatting","barX","barWidth","barY","barHeight","SeriesVerticalComponent","showDataLabel","isSSR","updateTooltipSettings","yScaleMin","d0Type","sum","getLabel","bar","offset0","offset1","tooltipLabel","seriesName","escapeLabel","updateDataLabels","section","totalPositive","totalNegative","dataItem","barLabel","animation","trigger","animate","BarVerticalComponent","legend","legendTitle","legendPosition","barPadding","roundDomains","xAxisHeight","yAxisWidth","calculateViewDimensions","margins","showXAxis","showYAxis","showXLabel","showYLabel","columns","xOffset","chartHeight","xAxis","yAxis","getXScale","getYScale","setColors","getLegendOptions","xDomain","getXDomain","yDomain","getYDomain","some","yScaleMax","opts","onDataLabelMaxHeightChanged","onActivate","fromLegend","onDeactivate","ɵBarVerticalComponent_BaseFactory","contentQueries","dirIndex","BarChartModule","rfdc","BoxChartModule","BubbleChartModule","HeatMapModule","LineChartModule","PieChartModule","PolarChartModule","NumberCardModule","TreeMapModule","GaugeModule","SankeyModule","NgxChartsModule","ngxChartsPolyfills","SVGElement","HTMLDivElement","ChatroomService","http","getAllChatAdmin","AdminRoutingApi","GetAllChatAdmin","getDetailChatAdmin","chatId","GetDetailChatAdmin","getAllMessagesAdmin","GetAllMessagesAdmin","removeMemberInGroup","userId","post","RemoveUserInGroup","static","core","Yz7","providedIn","DashboardComponent_tr_49_ng_container_15_Template","DashboardComponent_tr_49_ng_container_16_Template","client_r1","avatar","phone","email","lastLogin","messageCount","status","createdAt","DashboardComponent","chatRoomService","userService","toastr","chats","clients","messages","messageCharts","userUse","getAllChatRoomAdmin","getTopClientsChat","onSelect","console","log","getAllClients","response","clientMap","client","message","senderId","acc","monthYear","realDate","dataBySender","currentDate","messagesWithinLast7Days","messageDate","daysDifference","getTime","numberOfMessages","err","timeOut","i3","Xpm","DashboardComponent_tr_49_Template","ChatRoomManagementComponent_tbody_25_tr_1_ng_container_8_Template","ChatRoomManagementComponent_tbody_25_tr_1_ng_container_9_Template","chat_r4","photo","chatName","typeChatId","numberOfMessage","numberOfMember","updatedAt","ChatRoomManagementComponent_tbody_25_tr_1_Template","pageSize","pageNumber","ChatRoomManagementComponent","chatService","getAllChatRoom","ChatRoomManagementComponent_tbody_25_Template","ChatRoomManagementComponent_ng_container_29_Template","ChatRoomManagementComponent_ng_container_30_Template","InfoDetailChatRoomComponent_tbody_29_tr_1_ng_container_15_Template","InfoDetailChatRoomComponent_tbody_29_tr_1_ng_container_16_Template","user_r8","onDeleteMember","gender","InfoDetailChatRoomComponent_tbody_29_tr_1_Template","infoChat","users","pageSizeMembers","pageNumberMembers","message_r14","content","senderName","InfoDetailChatRoomComponent_tbody_56_tr_1_Template","pageSizeMessages","pageNumberMessages","_r16","deleteMember","memberDelete","InfoDetailChatRoomComponent","router","arrayUrl","url","idChatRoom","getInfoChatRoom","$","modal","success","InfoDetailChatRoomComponent_tbody_29_Template","InfoDetailChatRoomComponent_ng_container_33_Template","InfoDetailChatRoomComponent_ng_container_34_Template","InfoDetailChatRoomComponent_tbody_56_Template","InfoDetailChatRoomComponent_ng_container_60_Template","InfoDetailChatRoomComponent_ng_container_61_Template","InfoDetailChatRoomComponent_div_67_Template","chat","ClientManagementComponent_tbody_27_tr_1_ng_container_15_Template","ClientManagementComponent_tbody_27_tr_1_ng_container_16_Template","user_r4","ClientManagementComponent_tbody_27_tr_1_Template","ClientManagementComponent","ClientManagementComponent_tbody_27_Template","ClientManagementComponent_ng_container_31_Template","ClientManagementComponent_ng_container_32_Template","DetailInforClientComponent","StaffManagementComponent_tbody_27_tr_1_ng_container_15_Template","StaffManagementComponent_tbody_27_tr_1_ng_container_16_Template","user_r12","onDeleteStaff","StaffManagementComponent_tbody_27_tr_1_Template","_r18","ctx_r17","deleteStaff","staffDelete","routes","StaffManagementComponent","fb","spinner","createStaffForm","FormGroup","maxDate","user","FormData","initializeForm","getAllAdmin","Validators","required","dob","role","address","password","minLength","createStaff","createAccountAdmin","finalize","deleteAdmin","onCreateStaff","uploadFile","files","filesToUpload","i4","StaffManagementComponent_tbody_27_Template","StaffManagementComponent_ng_container_31_Template","StaffManagementComponent_ng_container_32_Template","StaffManagementComponent_div_50_Template","StaffManagementComponent_div_55_Template","StaffManagementComponent_div_56_Template","StaffManagementComponent_div_61_Template","StaffManagementComponent_div_66_Template","StaffManagementComponent_div_67_Template","StaffManagementComponent_div_68_Template","StaffManagementComponent_div_103_Template","controls","errors","checkEmail","valid","DetailInfoStaffComponent","HomeRoutingModule","oAB","cJS","RouterModule","forChild","HomeModule","PipeModule","ToastrModule","FormsModule","NgxPaginationModule","NgxSpinnerModule","ReactiveFormsModule","copyBuffer","cur","Buffer","buffer","byteOffset","module","exports","circles","rfdcCircles","refs","refsNew","proto","cloneProto","cloneArray","Set","o2","keys","a2"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/portal.mjs","./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js","./node_modules/rxjs/dist/esm/internal/scheduler/Action.js","./node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js","./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js","./node_modules/rxjs/dist/esm/internal/Scheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/async.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js","./node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js","./node_modules/d3-selection/src/selector.js","./node_modules/d3-selection/src/selectorAll.js","./node_modules/d3-selection/src/matcher.js","./node_modules/d3-selection/src/selection/selectChild.js","./node_modules/d3-selection/src/selection/selectChildren.js","./node_modules/d3-selection/src/selection/sparse.js","./node_modules/d3-selection/src/selection/enter.js","./node_modules/d3-selection/src/selection/data.js","./node_modules/d3-selection/src/selection/sort.js","./node_modules/d3-selection/src/namespaces.js","./node_modules/d3-selection/src/namespace.js","./node_modules/d3-selection/src/selection/attr.js","./node_modules/d3-selection/src/window.js","./node_modules/d3-selection/src/selection/style.js","./node_modules/d3-selection/src/selection/property.js","./node_modules/d3-selection/src/selection/classed.js","./node_modules/d3-selection/src/selection/text.js","./node_modules/d3-selection/src/selection/html.js","./node_modules/d3-selection/src/selection/raise.js","./node_modules/d3-selection/src/selection/lower.js","./node_modules/d3-selection/src/creator.js","./node_modules/d3-selection/src/selection/insert.js","./node_modules/d3-selection/src/selection/remove.js","./node_modules/d3-selection/src/selection/clone.js","./node_modules/d3-selection/src/selection/on.js","./node_modules/d3-selection/src/selection/dispatch.js","./node_modules/d3-selection/src/selection/index.js","./node_modules/d3-selection/src/selection/select.js","./node_modules/d3-selection/src/selection/selectAll.js","./node_modules/d3-selection/src/array.js","./node_modules/d3-selection/src/selection/filter.js","./node_modules/d3-selection/src/constant.js","./node_modules/d3-selection/src/selection/exit.js","./node_modules/d3-selection/src/selection/join.js","./node_modules/d3-selection/src/selection/merge.js","./node_modules/d3-selection/src/selection/order.js","./node_modules/d3-selection/src/selection/call.js","./node_modules/d3-selection/src/selection/nodes.js","./node_modules/d3-selection/src/selection/node.js","./node_modules/d3-selection/src/selection/size.js","./node_modules/d3-selection/src/selection/empty.js","./node_modules/d3-selection/src/selection/each.js","./node_modules/d3-selection/src/selection/append.js","./node_modules/d3-selection/src/selection/datum.js","./node_modules/d3-selection/src/selection/iterator.js","./node_modules/d3-dispatch/src/dispatch.js","./node_modules/d3-color/src/define.js","./node_modules/d3-color/src/color.js","./node_modules/d3-interpolate/src/basis.js","./node_modules/d3-interpolate/src/constant.js","./node_modules/d3-interpolate/src/color.js","./node_modules/d3-interpolate/src/rgb.js","./node_modules/d3-interpolate/src/array.js","./node_modules/d3-interpolate/src/date.js","./node_modules/d3-interpolate/src/number.js","./node_modules/d3-interpolate/src/object.js","./node_modules/d3-interpolate/src/basisClosed.js","./node_modules/d3-interpolate/src/string.js","./node_modules/d3-interpolate/src/numberArray.js","./node_modules/d3-interpolate/src/value.js","./node_modules/d3-timer/src/timer.js","./node_modules/d3-timer/src/timeout.js","./node_modules/d3-transition/src/transition/schedule.js","./node_modules/d3-interpolate/src/transform/decompose.js","./node_modules/d3-interpolate/src/transform/parse.js","./node_modules/d3-interpolate/src/transform/index.js","./node_modules/d3-transition/src/transition/tween.js","./node_modules/d3-transition/src/transition/interpolate.js","./node_modules/d3-transition/src/transition/attr.js","./node_modules/d3-transition/src/transition/attrTween.js","./node_modules/d3-transition/src/transition/delay.js","./node_modules/d3-transition/src/transition/duration.js","./node_modules/d3-transition/src/transition/selection.js","./node_modules/d3-transition/src/transition/style.js","./node_modules/d3-transition/src/transition/index.js","./node_modules/d3-transition/src/transition/select.js","./node_modules/d3-transition/src/transition/selectAll.js","./node_modules/d3-transition/src/transition/filter.js","./node_modules/d3-transition/src/transition/merge.js","./node_modules/d3-transition/src/transition/transition.js","./node_modules/d3-transition/src/transition/on.js","./node_modules/d3-transition/src/transition/styleTween.js","./node_modules/d3-transition/src/transition/text.js","./node_modules/d3-transition/src/transition/textTween.js","./node_modules/d3-transition/src/transition/remove.js","./node_modules/d3-transition/src/transition/ease.js","./node_modules/d3-transition/src/transition/easeVarying.js","./node_modules/d3-transition/src/transition/end.js","./node_modules/d3-transition/src/selection/transition.js","./node_modules/d3-ease/src/cubic.js","./node_modules/d3-transition/src/selection/index.js","./node_modules/d3-transition/src/selection/interrupt.js","./node_modules/d3-transition/src/interrupt.js","./node_modules/d3-brush/src/brush.js","./node_modules/d3-array/src/ascending.js","./node_modules/d3-array/src/descending.js","./node_modules/d3-array/src/bisector.js","./node_modules/d3-array/src/ticks.js","./node_modules/d3-time/src/duration.js","./node_modules/d3-time/src/interval.js","./node_modules/d3-time/src/millisecond.js","./node_modules/d3-time/src/second.js","./node_modules/d3-time/src/minute.js","./node_modules/d3-time/src/hour.js","./node_modules/d3-time/src/day.js","./node_modules/d3-time/src/week.js","./node_modules/d3-time/src/month.js","./node_modules/d3-time/src/year.js","./node_modules/d3-time/src/ticks.js","./node_modules/d3-time-format/node_modules/d3-time/src/interval.js","./node_modules/d3-time-format/node_modules/d3-time/src/duration.js","./node_modules/d3-time-format/node_modules/d3-time/src/utcWeek.js","./node_modules/d3-time-format/node_modules/d3-time/src/utcDay.js","./node_modules/d3-time-format/node_modules/d3-time/src/week.js","./node_modules/d3-time-format/node_modules/d3-time/src/day.js","./node_modules/d3-time-format/node_modules/d3-time/src/year.js","./node_modules/d3-time-format/node_modules/d3-time/src/utcYear.js","./node_modules/d3-time-format/src/locale.js","./node_modules/d3-array/src/number.js","./node_modules/d3-time-format/src/defaultLocale.js","./node_modules/d3-array/src/bisect.js","./node_modules/d3-interpolate/src/round.js","./node_modules/d3-scale/src/number.js","./node_modules/d3-scale/src/continuous.js","./node_modules/d3-scale/src/constant.js","./node_modules/d3-scale/src/init.js","./node_modules/d3-format/src/formatSpecifier.js","./node_modules/d3-format/src/formatPrefixAuto.js","./node_modules/d3-format/src/formatDecimal.js","./node_modules/d3-format/src/exponent.js","./node_modules/d3-format/src/formatRounded.js","./node_modules/d3-format/src/formatTypes.js","./node_modules/d3-format/src/identity.js","./node_modules/d3-format/src/locale.js","./node_modules/d3-format/src/defaultLocale.js","./node_modules/d3-scale/src/linear.js","./node_modules/d3-scale/src/tickFormat.js","./node_modules/d3-format/src/precisionPrefix.js","./node_modules/d3-format/src/precisionRound.js","./node_modules/d3-format/src/precisionFixed.js","./node_modules/d3-array/src/range.js","./node_modules/d3-format/src/formatGroup.js","./node_modules/d3-format/src/formatNumerals.js","./node_modules/d3-format/src/formatTrim.js","./node_modules/internmap/src/index.js","./node_modules/d3-scale/src/ordinal.js","./node_modules/d3-scale/src/band.js","./node_modules/d3-array/src/quantile.js","./node_modules/d3-scale/src/quantile.js","./node_modules/@swimlane/ngx-charts/fesm2020/swimlane-ngx-charts.mjs","./node_modules/rxjs/dist/esm/internal/operators/debounceTime.js","./node_modules/d3-selection/src/select.js","./src/app/admin/services/chatroom.service.ts","./src/app/admin/pages/home/dashboard/dashboard.component.html","./src/app/admin/pages/home/dashboard/dashboard.component.ts","./src/app/admin/pages/home/chat-room/chat-room-management/chat-room-management.component.html","./src/app/admin/pages/home/chat-room/chat-room-management/chat-room-management.component.ts","./src/app/admin/pages/home/chat-room/info-detail-chat-room/info-detail-chat-room.component.html","./src/app/admin/pages/home/chat-room/info-detail-chat-room/info-detail-chat-room.component.ts","./src/app/admin/pages/home/client/client-management/client-management.component.html","./src/app/admin/pages/home/client/client-management/client-management.component.ts","./src/app/admin/pages/home/client/detail-infor-client/detail-infor-client.component.ts","./src/app/admin/pages/home/client/detail-infor-client/detail-infor-client.component.html","./src/app/admin/pages/home/staff/staff-management/staff-management.component.html","./src/app/admin/pages/home/home-routing.module.ts","./src/app/admin/pages/home/staff/staff-management/staff-management.component.ts","./src/app/admin/pages/home/staff/detail-info-staff/detail-info-staff.component.ts","./src/app/admin/pages/home/staff/detail-info-staff/detail-info-staff.component.html","./src/app/admin/pages/home/home.module.ts","./node_modules/rfdc/index.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { ElementRef, Injector, Directive, EventEmitter, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nclass Portal {\n    /** Attach this portal to a host. */\n    attach(host) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (host == null) {\n                throwNullPortalOutletError();\n            }\n            if (host.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        let host = this._attachedHost;\n        if (host != null) {\n            this._attachedHost = null;\n            host.detach();\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwNoPortalAttachedError();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal extends Portal {\n    constructor(component, viewContainerRef, injector, componentFactoryResolver, projectableNodes) {\n        super();\n        this.component = component;\n        this.viewContainerRef = viewContainerRef;\n        this.injector = injector;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.projectableNodes = projectableNodes;\n    }\n}\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nclass TemplatePortal extends Portal {\n    constructor(\n    /** The embedded template that will be used to instantiate an embedded View in the host. */\n    templateRef, \n    /** Reference to the ViewContainer into which the template will be stamped out. */\n    viewContainerRef, \n    /** Contextual data to be passed in to the embedded view. */\n    context, \n    /** The injector to use for the embedded view. */\n    injector) {\n        super();\n        this.templateRef = templateRef;\n        this.viewContainerRef = viewContainerRef;\n        this.context = context;\n        this.injector = injector;\n    }\n    get origin() {\n        return this.templateRef.elementRef;\n    }\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    attach(host, context = this.context) {\n        this.context = context;\n        return super.attach(host);\n    }\n    detach() {\n        this.context = undefined;\n        return super.detach();\n    }\n}\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nclass DomPortal extends Portal {\n    constructor(element) {\n        super();\n        this.element = element instanceof ElementRef ? element.nativeElement : element;\n    }\n}\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nclass BasePortalOutlet {\n    constructor() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    hasAttached() {\n        return !!this._attachedPortal;\n    }\n    /** Attaches a portal. */\n    attach(portal) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!portal) {\n                throwNullPortalError();\n            }\n            if (this.hasAttached()) {\n                throwPortalAlreadyAttachedError();\n            }\n            if (this._isDisposed) {\n                throwPortalOutletAlreadyDisposedError();\n            }\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throwUnknownPortalTypeError();\n        }\n    }\n    /** Detaches a previously attached portal. */\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    }\n    /** Permanently dispose of this portal host. */\n    dispose() {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    }\n    /** @docs-private */\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n    _invokeDisposeFn() {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    }\n}\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass BasePortalHost extends BasePortalOutlet {\n}\n\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nclass DomPortalOutlet extends BasePortalOutlet {\n    /**\n     * @param outletElement Element into which the content is projected.\n     * @param _componentFactoryResolver Used to resolve the component factory.\n     *   Only required when attaching component portals.\n     * @param _appRef Reference to the application. Only used in component portals when there\n     *   is no `ViewContainerRef` available.\n     * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't\n     *   have one. Only used for component portals.\n     * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually\n     *   become a required parameter.\n     */\n    constructor(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        super();\n        this.outletElement = outletElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            this.outletElement.appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        const resolver = (portal.componentFactoryResolver || this._componentFactoryResolver);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !resolver) {\n            throw Error('Cannot attach component portal to outlet without a ComponentFactoryResolver.');\n        }\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector, portal.projectableNodes || undefined);\n            this.setDisposeFn(() => componentRef.destroy());\n        }\n        else {\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._appRef) {\n                throw Error('Cannot attach component portal to outlet without an ApplicationRef.');\n            }\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(() => {\n                // Verify that the ApplicationRef has registered views before trying to detach a host view.\n                // This check also protects the `detachView` from being called on a destroyed ApplicationRef.\n                if (this._appRef.viewCount > 0) {\n                    this._appRef.detachView(componentRef.hostView);\n                }\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        this._attachedPortal = portal;\n        return componentRef;\n    }\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        let viewContainer = portal.viewContainerRef;\n        let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(rootNode => this.outletElement.appendChild(rootNode));\n        // Note that we want to detect changes after the nodes have been moved so that\n        // any directives inside the portal that are looking at the DOM inside a lifecycle\n        // hook won't be invoked too early.\n        viewRef.detectChanges();\n        this.setDisposeFn(() => {\n            let index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        });\n        this._attachedPortal = portal;\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    }\n    /**\n     * Clears out a portal from the DOM.\n     */\n    dispose() {\n        super.dispose();\n        this.outletElement.remove();\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass DomPortalHost extends DomPortalOutlet {\n}\n\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nclass CdkPortal extends TemplatePortal {\n    constructor(templateRef, viewContainerRef) {\n        super(templateRef, viewContainerRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: CdkPortal, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: CdkPortal, selector: \"[cdkPortal]\", exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: CdkPortal, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortal]',\n                    exportAs: 'cdkPortal',\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }] });\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nclass TemplatePortalDirective extends CdkPortal {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: TemplatePortalDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: TemplatePortalDirective, selector: \"[cdk-portal], [portal]\", providers: [\n            {\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective,\n            },\n        ], exportAs: [\"cdkPortal\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: TemplatePortalDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdk-portal], [portal]',\n                    exportAs: 'cdkPortal',\n                    providers: [\n                        {\n                            provide: CdkPortal,\n                            useExisting: TemplatePortalDirective,\n                        },\n                    ],\n                }]\n        }] });\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nclass CdkPortalOutlet extends BasePortalOutlet {\n    constructor(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        super();\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!this._document && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            const element = portal.element;\n            if (!element.parentNode && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            const anchorNode = this._document.createComment('dom-portal');\n            portal.setAttachedHost(this);\n            element.parentNode.insertBefore(anchorNode, element);\n            this._getRootNode().appendChild(element);\n            this._attachedPortal = portal;\n            super.setDisposeFn(() => {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        this._document = _document;\n    }\n    /** Portal associated with the Portal outlet. */\n    get portal() {\n        return this._attachedPortal;\n    }\n    set portal(portal) {\n        // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n        // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n        // and attach a portal programmatically in the parent component. When Angular does the first CD\n        // round, it will fire the setter with empty string, causing the user's content to be cleared.\n        if (this.hasAttached() && !portal && !this._isInitialized) {\n            return;\n        }\n        if (this.hasAttached()) {\n            super.detach();\n        }\n        if (portal) {\n            super.attach(portal);\n        }\n        this._attachedPortal = portal || null;\n    }\n    /** Component or view reference that is attached to the portal. */\n    get attachedRef() {\n        return this._attachedRef;\n    }\n    ngOnInit() {\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        super.dispose();\n        this._attachedRef = this._attachedPortal = null;\n    }\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    attachComponentPortal(portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;\n        const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        const componentFactory = resolver.resolveComponentFactory(portal.component);\n        const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector, portal.projectableNodes || undefined);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        super.setDisposeFn(() => ref.destroy());\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    }\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    attachTemplatePortal(portal) {\n        portal.setAttachedHost(this);\n        const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {\n            injector: portal.injector,\n        });\n        super.setDisposeFn(() => this._viewContainerRef.clear());\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    }\n    /** Gets the root node of the portal outlet. */\n    _getRootNode() {\n        const nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE\n            ? nativeElement\n            : nativeElement.parentNode);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: CdkPortalOutlet, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: CdkPortalOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalOutlet]',\n                    exportAs: 'cdkPortalOutlet',\n                    inputs: ['portal: cdkPortalOutlet'],\n                }]\n        }], ctorParameters: () => [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { attached: [{\n                type: Output\n            }] } });\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nclass PortalHostDirective extends CdkPortalOutlet {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: PortalHostDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.0.4\", type: PortalHostDirective, selector: \"[cdkPortalHost], [portalHost]\", inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, providers: [\n            {\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective,\n            },\n        ], exportAs: [\"cdkPortalHost\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: PortalHostDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkPortalHost], [portalHost]',\n                    exportAs: 'cdkPortalHost',\n                    inputs: ['portal: cdkPortalHost'],\n                    providers: [\n                        {\n                            provide: CdkPortalOutlet,\n                            useExisting: PortalHostDirective,\n                        },\n                    ],\n                }]\n        }] });\nclass PortalModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: PortalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: PortalModule, declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective], exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: PortalModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: PortalModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                }]\n        }] });\n\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n * @deprecated Use `Injector.create` instead.\n * @breaking-change 11.0.0\n */\nclass PortalInjector {\n    constructor(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    get(token, notFoundValue) {\n        const value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n","import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'];\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'];\nconst jqueryMethods = ['on', 'off'];\nexport function fromEvent(target, eventName, options, resultSelector) {\n    if (isFunction(options)) {\n        resultSelector = options;\n        options = undefined;\n    }\n    if (resultSelector) {\n        return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n    }\n    const [add, remove] = isEventTarget(target)\n        ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options))\n        :\n            isNodeStyleEventEmitter(target)\n                ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n                : isJQueryStyleEventEmitter(target)\n                    ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n                    : [];\n    if (!add) {\n        if (isArrayLike(target)) {\n            return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));\n        }\n    }\n    if (!add) {\n        throw new TypeError('Invalid event target');\n    }\n    return new Observable((subscriber) => {\n        const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);\n        add(handler);\n        return () => remove(handler);\n    });\n}\nfunction toCommonHandlerRegistry(target, eventName) {\n    return (methodName) => (handler) => target[methodName](eventName, handler);\n}\nfunction isNodeStyleEventEmitter(target) {\n    return isFunction(target.addListener) && isFunction(target.removeListener);\n}\nfunction isJQueryStyleEventEmitter(target) {\n    return isFunction(target.on) && isFunction(target.off);\n}\nfunction isEventTarget(target) {\n    return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { Subscription } from '../Subscription';\nexport class Action extends Subscription {\n    constructor(scheduler, work) {\n        super();\n    }\n    schedule(state, delay = 0) {\n        return this;\n    }\n}\n","export const intervalProvider = {\n    setInterval(handler, timeout, ...args) {\n        const { delegate } = intervalProvider;\n        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {\n            return delegate.setInterval(handler, timeout, ...args);\n        }\n        return setInterval(handler, timeout, ...args);\n    },\n    clearInterval(handle) {\n        const { delegate } = intervalProvider;\n        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);\n    },\n    delegate: undefined,\n};\n","export const dateTimestampProvider = {\n    now() {\n        return (dateTimestampProvider.delegate || Date).now();\n    },\n    delegate: undefined,\n};\n","import { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class Scheduler {\n    constructor(schedulerActionCtor, now = Scheduler.now) {\n        this.schedulerActionCtor = schedulerActionCtor;\n        this.now = now;\n    }\n    schedule(work, delay = 0, state) {\n        return new this.schedulerActionCtor(this, work).schedule(state, delay);\n    }\n}\nScheduler.now = dateTimestampProvider.now;\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\nexport const async = asyncScheduler;\n","import { Scheduler } from '../Scheduler';\nexport class AsyncScheduler extends Scheduler {\n    constructor(SchedulerAction, now = Scheduler.now) {\n        super(SchedulerAction, now);\n        this.actions = [];\n        this._active = false;\n    }\n    flush(action) {\n        const { actions } = this;\n        if (this._active) {\n            actions.push(action);\n            return;\n        }\n        let error;\n        this._active = true;\n        do {\n            if ((error = action.execute(action.state, action.delay))) {\n                break;\n            }\n        } while ((action = actions.shift()));\n        this._active = false;\n        if (error) {\n            while ((action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    }\n}\n","import { Action } from './Action';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nexport class AsyncAction extends Action {\n    constructor(scheduler, work) {\n        super(scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    schedule(state, delay = 0) {\n        var _a;\n        if (this.closed) {\n            return this;\n        }\n        this.state = state;\n        const id = this.id;\n        const scheduler = this.scheduler;\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.pending = true;\n        this.delay = delay;\n        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    }\n    requestAsyncId(scheduler, _id, delay = 0) {\n        return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n    recycleAsyncId(_scheduler, id, delay = 0) {\n        if (delay != null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        if (id != null) {\n            intervalProvider.clearInterval(id);\n        }\n        return undefined;\n    }\n    execute(state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        const error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    }\n    _execute(state, _delay) {\n        let errored = false;\n        let errorValue;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = e ? e : new Error('Scheduled action threw falsy error');\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            const { id, scheduler } = this;\n            const { actions } = scheduler;\n            this.work = this.state = this.scheduler = null;\n            this.pending = false;\n            arrRemove(actions, this);\n            if (id != null) {\n                this.id = this.recycleAsyncId(scheduler, id, null);\n            }\n            this.delay = null;\n            super.unsubscribe();\n        }\n    }\n}\n","function none() {}\n\nexport default function(selector) {\n  return selector == null ? none : function() {\n    return this.querySelector(selector);\n  };\n}\n","function empty() {\n  return [];\n}\n\nexport default function(selector) {\n  return selector == null ? empty : function() {\n    return this.querySelectorAll(selector);\n  };\n}\n","export default function(selector) {\n  return function() {\n    return this.matches(selector);\n  };\n}\n\nexport function childMatcher(selector) {\n  return function(node) {\n    return node.matches(selector);\n  };\n}\n\n","import {childMatcher} from \"../matcher.js\";\n\nvar find = Array.prototype.find;\n\nfunction childFind(match) {\n  return function() {\n    return find.call(this.children, match);\n  };\n}\n\nfunction childFirst() {\n  return this.firstElementChild;\n}\n\nexport default function(match) {\n  return this.select(match == null ? childFirst\n      : childFind(typeof match === \"function\" ? match : childMatcher(match)));\n}\n","import {childMatcher} from \"../matcher.js\";\n\nvar filter = Array.prototype.filter;\n\nfunction children() {\n  return Array.from(this.children);\n}\n\nfunction childrenFilter(match) {\n  return function() {\n    return filter.call(this.children, match);\n  };\n}\n\nexport default function(match) {\n  return this.selectAll(match == null ? children\n      : childrenFilter(typeof match === \"function\" ? match : childMatcher(match)));\n}\n","export default function(update) {\n  return new Array(update.length);\n}\n","import sparse from \"./sparse.js\";\nimport {Selection} from \"./index.js\";\n\nexport default function() {\n  return new Selection(this._enter || this._groups.map(sparse), this._parents);\n}\n\nexport function EnterNode(parent, datum) {\n  this.ownerDocument = parent.ownerDocument;\n  this.namespaceURI = parent.namespaceURI;\n  this._next = null;\n  this._parent = parent;\n  this.__data__ = datum;\n}\n\nEnterNode.prototype = {\n  constructor: EnterNode,\n  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },\n  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },\n  querySelector: function(selector) { return this._parent.querySelector(selector); },\n  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }\n};\n","import {Selection} from \"./index.js\";\nimport {EnterNode} from \"./enter.js\";\nimport constant from \"../constant.js\";\n\nfunction bindIndex(parent, group, enter, update, exit, data) {\n  var i = 0,\n      node,\n      groupLength = group.length,\n      dataLength = data.length;\n\n  // Put any non-null nodes that fit into update.\n  // Put any null nodes into enter.\n  // Put any remaining data into enter.\n  for (; i < dataLength; ++i) {\n    if (node = group[i]) {\n      node.__data__ = data[i];\n      update[i] = node;\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Put any non-null nodes that don’t fit into exit.\n  for (; i < groupLength; ++i) {\n    if (node = group[i]) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction bindKey(parent, group, enter, update, exit, data, key) {\n  var i,\n      node,\n      nodeByKeyValue = new Map,\n      groupLength = group.length,\n      dataLength = data.length,\n      keyValues = new Array(groupLength),\n      keyValue;\n\n  // Compute the key for each node.\n  // If multiple nodes have the same key, the duplicates are added to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if (node = group[i]) {\n      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + \"\";\n      if (nodeByKeyValue.has(keyValue)) {\n        exit[i] = node;\n      } else {\n        nodeByKeyValue.set(keyValue, node);\n      }\n    }\n  }\n\n  // Compute the key for each datum.\n  // If there a node associated with this key, join and add it to update.\n  // If there is not (or the key is a duplicate), add it to enter.\n  for (i = 0; i < dataLength; ++i) {\n    keyValue = key.call(parent, data[i], i, data) + \"\";\n    if (node = nodeByKeyValue.get(keyValue)) {\n      update[i] = node;\n      node.__data__ = data[i];\n      nodeByKeyValue.delete(keyValue);\n    } else {\n      enter[i] = new EnterNode(parent, data[i]);\n    }\n  }\n\n  // Add any remaining nodes that were not bound to data to exit.\n  for (i = 0; i < groupLength; ++i) {\n    if ((node = group[i]) && (nodeByKeyValue.get(keyValues[i]) === node)) {\n      exit[i] = node;\n    }\n  }\n}\n\nfunction datum(node) {\n  return node.__data__;\n}\n\nexport default function(value, key) {\n  if (!arguments.length) return Array.from(this, datum);\n\n  var bind = key ? bindKey : bindIndex,\n      parents = this._parents,\n      groups = this._groups;\n\n  if (typeof value !== \"function\") value = constant(value);\n\n  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {\n    var parent = parents[j],\n        group = groups[j],\n        groupLength = group.length,\n        data = arraylike(value.call(parent, parent && parent.__data__, j, parents)),\n        dataLength = data.length,\n        enterGroup = enter[j] = new Array(dataLength),\n        updateGroup = update[j] = new Array(dataLength),\n        exitGroup = exit[j] = new Array(groupLength);\n\n    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);\n\n    // Now connect the enter nodes to their following update node, such that\n    // appendChild can insert the materialized enter node before this node,\n    // rather than at the end of the parent node.\n    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {\n      if (previous = enterGroup[i0]) {\n        if (i0 >= i1) i1 = i0 + 1;\n        while (!(next = updateGroup[i1]) && ++i1 < dataLength);\n        previous._next = next || null;\n      }\n    }\n  }\n\n  update = new Selection(update, parents);\n  update._enter = enter;\n  update._exit = exit;\n  return update;\n}\n\n// Given some data, this returns an array-like view of it: an object that\n// exposes a length property and allows numeric indexing. Note that unlike\n// selectAll, this isn’t worried about “live” collections because the resulting\n// array will only be used briefly while data is being bound. (It is possible to\n// cause the data to change while iterating by using a key function, but please\n// don’t; we’d rather avoid a gratuitous copy.)\nfunction arraylike(data) {\n  return typeof data === \"object\" && \"length\" in data\n    ? data // Array, TypedArray, NodeList, array-like\n    : Array.from(data); // Map, Set, iterable, string, or anything else\n}\n","import {Selection} from \"./index.js\";\n\nexport default function(compare) {\n  if (!compare) compare = ascending;\n\n  function compareNode(a, b) {\n    return a && b ? compare(a.__data__, b.__data__) : !a - !b;\n  }\n\n  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        sortgroup[i] = node;\n      }\n    }\n    sortgroup.sort(compareNode);\n  }\n\n  return new Selection(sortgroups, this._parents).order();\n}\n\nfunction ascending(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export var xhtml = \"http://www.w3.org/1999/xhtml\";\n\nexport default {\n  svg: \"http://www.w3.org/2000/svg\",\n  xhtml: xhtml,\n  xlink: \"http://www.w3.org/1999/xlink\",\n  xml: \"http://www.w3.org/XML/1998/namespace\",\n  xmlns: \"http://www.w3.org/2000/xmlns/\"\n};\n","import namespaces from \"./namespaces.js\";\n\nexport default function(name) {\n  var prefix = name += \"\", i = prefix.indexOf(\":\");\n  if (i >= 0 && (prefix = name.slice(0, i)) !== \"xmlns\") name = name.slice(i + 1);\n  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name; // eslint-disable-line no-prototype-builtins\n}\n","import namespace from \"../namespace.js\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, value) {\n  return function() {\n    this.setAttribute(name, value);\n  };\n}\n\nfunction attrConstantNS(fullname, value) {\n  return function() {\n    this.setAttributeNS(fullname.space, fullname.local, value);\n  };\n}\n\nfunction attrFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttribute(name);\n    else this.setAttribute(name, v);\n  };\n}\n\nfunction attrFunctionNS(fullname, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);\n    else this.setAttributeNS(fullname.space, fullname.local, v);\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name);\n\n  if (arguments.length < 2) {\n    var node = this.node();\n    return fullname.local\n        ? node.getAttributeNS(fullname.space, fullname.local)\n        : node.getAttribute(fullname);\n  }\n\n  return this.each((value == null\n      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)\n      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));\n}\n","export default function(node) {\n  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node\n      || (node.document && node) // node is a Window\n      || node.defaultView; // node is a Document\n}\n","import defaultView from \"../window.js\";\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, value, priority) {\n  return function() {\n    this.style.setProperty(name, value, priority);\n  };\n}\n\nfunction styleFunction(name, value, priority) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) this.style.removeProperty(name);\n    else this.style.setProperty(name, v, priority);\n  };\n}\n\nexport default function(name, value, priority) {\n  return arguments.length > 1\n      ? this.each((value == null\n            ? styleRemove : typeof value === \"function\"\n            ? styleFunction\n            : styleConstant)(name, value, priority == null ? \"\" : priority))\n      : styleValue(this.node(), name);\n}\n\nexport function styleValue(node, name) {\n  return node.style.getPropertyValue(name)\n      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);\n}\n","function propertyRemove(name) {\n  return function() {\n    delete this[name];\n  };\n}\n\nfunction propertyConstant(name, value) {\n  return function() {\n    this[name] = value;\n  };\n}\n\nfunction propertyFunction(name, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (v == null) delete this[name];\n    else this[name] = v;\n  };\n}\n\nexport default function(name, value) {\n  return arguments.length > 1\n      ? this.each((value == null\n          ? propertyRemove : typeof value === \"function\"\n          ? propertyFunction\n          : propertyConstant)(name, value))\n      : this.node()[name];\n}\n","function classArray(string) {\n  return string.trim().split(/^|\\s+/);\n}\n\nfunction classList(node) {\n  return node.classList || new ClassList(node);\n}\n\nfunction ClassList(node) {\n  this._node = node;\n  this._names = classArray(node.getAttribute(\"class\") || \"\");\n}\n\nClassList.prototype = {\n  add: function(name) {\n    var i = this._names.indexOf(name);\n    if (i < 0) {\n      this._names.push(name);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  remove: function(name) {\n    var i = this._names.indexOf(name);\n    if (i >= 0) {\n      this._names.splice(i, 1);\n      this._node.setAttribute(\"class\", this._names.join(\" \"));\n    }\n  },\n  contains: function(name) {\n    return this._names.indexOf(name) >= 0;\n  }\n};\n\nfunction classedAdd(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.add(names[i]);\n}\n\nfunction classedRemove(node, names) {\n  var list = classList(node), i = -1, n = names.length;\n  while (++i < n) list.remove(names[i]);\n}\n\nfunction classedTrue(names) {\n  return function() {\n    classedAdd(this, names);\n  };\n}\n\nfunction classedFalse(names) {\n  return function() {\n    classedRemove(this, names);\n  };\n}\n\nfunction classedFunction(names, value) {\n  return function() {\n    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);\n  };\n}\n\nexport default function(name, value) {\n  var names = classArray(name + \"\");\n\n  if (arguments.length < 2) {\n    var list = classList(this.node()), i = -1, n = names.length;\n    while (++i < n) if (!list.contains(names[i])) return false;\n    return true;\n  }\n\n  return this.each((typeof value === \"function\"\n      ? classedFunction : value\n      ? classedTrue\n      : classedFalse)(names, value));\n}\n","function textRemove() {\n  this.textContent = \"\";\n}\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.textContent = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? textRemove : (typeof value === \"function\"\n          ? textFunction\n          : textConstant)(value))\n      : this.node().textContent;\n}\n","function htmlRemove() {\n  this.innerHTML = \"\";\n}\n\nfunction htmlConstant(value) {\n  return function() {\n    this.innerHTML = value;\n  };\n}\n\nfunction htmlFunction(value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    this.innerHTML = v == null ? \"\" : v;\n  };\n}\n\nexport default function(value) {\n  return arguments.length\n      ? this.each(value == null\n          ? htmlRemove : (typeof value === \"function\"\n          ? htmlFunction\n          : htmlConstant)(value))\n      : this.node().innerHTML;\n}\n","function raise() {\n  if (this.nextSibling) this.parentNode.appendChild(this);\n}\n\nexport default function() {\n  return this.each(raise);\n}\n","function lower() {\n  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\n\nexport default function() {\n  return this.each(lower);\n}\n","import namespace from \"./namespace.js\";\nimport {xhtml} from \"./namespaces.js\";\n\nfunction creatorInherit(name) {\n  return function() {\n    var document = this.ownerDocument,\n        uri = this.namespaceURI;\n    return uri === xhtml && document.documentElement.namespaceURI === xhtml\n        ? document.createElement(name)\n        : document.createElementNS(uri, name);\n  };\n}\n\nfunction creatorFixed(fullname) {\n  return function() {\n    return this.ownerDocument.createElementNS(fullname.space, fullname.local);\n  };\n}\n\nexport default function(name) {\n  var fullname = namespace(name);\n  return (fullname.local\n      ? creatorFixed\n      : creatorInherit)(fullname);\n}\n","import creator from \"../creator.js\";\nimport selector from \"../selector.js\";\n\nfunction constantNull() {\n  return null;\n}\n\nexport default function(name, before) {\n  var create = typeof name === \"function\" ? name : creator(name),\n      select = before == null ? constantNull : typeof before === \"function\" ? before : selector(before);\n  return this.select(function() {\n    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);\n  });\n}\n","function remove() {\n  var parent = this.parentNode;\n  if (parent) parent.removeChild(this);\n}\n\nexport default function() {\n  return this.each(remove);\n}\n","function selection_cloneShallow() {\n  var clone = this.cloneNode(false), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nfunction selection_cloneDeep() {\n  var clone = this.cloneNode(true), parent = this.parentNode;\n  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;\n}\n\nexport default function(deep) {\n  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);\n}\n","function contextListener(listener) {\n  return function(event) {\n    listener.call(this, event, this.__data__);\n  };\n}\n\nfunction parseTypenames(typenames) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    return {type: t, name: name};\n  });\n}\n\nfunction onRemove(typename) {\n  return function() {\n    var on = this.__on;\n    if (!on) return;\n    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {\n      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n      } else {\n        on[++i] = o;\n      }\n    }\n    if (++i) on.length = i;\n    else delete this.__on;\n  };\n}\n\nfunction onAdd(typename, value, options) {\n  return function() {\n    var on = this.__on, o, listener = contextListener(value);\n    if (on) for (var j = 0, m = on.length; j < m; ++j) {\n      if ((o = on[j]).type === typename.type && o.name === typename.name) {\n        this.removeEventListener(o.type, o.listener, o.options);\n        this.addEventListener(o.type, o.listener = listener, o.options = options);\n        o.value = value;\n        return;\n      }\n    }\n    this.addEventListener(typename.type, listener, options);\n    o = {type: typename.type, name: typename.name, value: value, listener: listener, options: options};\n    if (!on) this.__on = [o];\n    else on.push(o);\n  };\n}\n\nexport default function(typename, value, options) {\n  var typenames = parseTypenames(typename + \"\"), i, n = typenames.length, t;\n\n  if (arguments.length < 2) {\n    var on = this.node().__on;\n    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {\n      for (i = 0, o = on[j]; i < n; ++i) {\n        if ((t = typenames[i]).type === o.type && t.name === o.name) {\n          return o.value;\n        }\n      }\n    }\n    return;\n  }\n\n  on = value ? onAdd : onRemove;\n  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options));\n  return this;\n}\n","import defaultView from \"../window.js\";\n\nfunction dispatchEvent(node, type, params) {\n  var window = defaultView(node),\n      event = window.CustomEvent;\n\n  if (typeof event === \"function\") {\n    event = new event(type, params);\n  } else {\n    event = window.document.createEvent(\"Event\");\n    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;\n    else event.initEvent(type, false, false);\n  }\n\n  node.dispatchEvent(event);\n}\n\nfunction dispatchConstant(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params);\n  };\n}\n\nfunction dispatchFunction(type, params) {\n  return function() {\n    return dispatchEvent(this, type, params.apply(this, arguments));\n  };\n}\n\nexport default function(type, params) {\n  return this.each((typeof params === \"function\"\n      ? dispatchFunction\n      : dispatchConstant)(type, params));\n}\n","import selection_select from \"./select.js\";\nimport selection_selectAll from \"./selectAll.js\";\nimport selection_selectChild from \"./selectChild.js\";\nimport selection_selectChildren from \"./selectChildren.js\";\nimport selection_filter from \"./filter.js\";\nimport selection_data from \"./data.js\";\nimport selection_enter from \"./enter.js\";\nimport selection_exit from \"./exit.js\";\nimport selection_join from \"./join.js\";\nimport selection_merge from \"./merge.js\";\nimport selection_order from \"./order.js\";\nimport selection_sort from \"./sort.js\";\nimport selection_call from \"./call.js\";\nimport selection_nodes from \"./nodes.js\";\nimport selection_node from \"./node.js\";\nimport selection_size from \"./size.js\";\nimport selection_empty from \"./empty.js\";\nimport selection_each from \"./each.js\";\nimport selection_attr from \"./attr.js\";\nimport selection_style from \"./style.js\";\nimport selection_property from \"./property.js\";\nimport selection_classed from \"./classed.js\";\nimport selection_text from \"./text.js\";\nimport selection_html from \"./html.js\";\nimport selection_raise from \"./raise.js\";\nimport selection_lower from \"./lower.js\";\nimport selection_append from \"./append.js\";\nimport selection_insert from \"./insert.js\";\nimport selection_remove from \"./remove.js\";\nimport selection_clone from \"./clone.js\";\nimport selection_datum from \"./datum.js\";\nimport selection_on from \"./on.js\";\nimport selection_dispatch from \"./dispatch.js\";\nimport selection_iterator from \"./iterator.js\";\n\nexport var root = [null];\n\nexport function Selection(groups, parents) {\n  this._groups = groups;\n  this._parents = parents;\n}\n\nfunction selection() {\n  return new Selection([[document.documentElement]], root);\n}\n\nfunction selection_selection() {\n  return this;\n}\n\nSelection.prototype = selection.prototype = {\n  constructor: Selection,\n  select: selection_select,\n  selectAll: selection_selectAll,\n  selectChild: selection_selectChild,\n  selectChildren: selection_selectChildren,\n  filter: selection_filter,\n  data: selection_data,\n  enter: selection_enter,\n  exit: selection_exit,\n  join: selection_join,\n  merge: selection_merge,\n  selection: selection_selection,\n  order: selection_order,\n  sort: selection_sort,\n  call: selection_call,\n  nodes: selection_nodes,\n  node: selection_node,\n  size: selection_size,\n  empty: selection_empty,\n  each: selection_each,\n  attr: selection_attr,\n  style: selection_style,\n  property: selection_property,\n  classed: selection_classed,\n  text: selection_text,\n  html: selection_html,\n  raise: selection_raise,\n  lower: selection_lower,\n  append: selection_append,\n  insert: selection_insert,\n  remove: selection_remove,\n  clone: selection_clone,\n  datum: selection_datum,\n  on: selection_on,\n  dispatch: selection_dispatch,\n  [Symbol.iterator]: selection_iterator\n};\n\nexport default selection;\n","import {Selection} from \"./index.js\";\nimport selector from \"../selector.js\";\n\nexport default function(select) {\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","import {Selection} from \"./index.js\";\nimport array from \"../array.js\";\nimport selectorAll from \"../selectorAll.js\";\n\nfunction arrayAll(select) {\n  return function() {\n    return array(select.apply(this, arguments));\n  };\n}\n\nexport default function(select) {\n  if (typeof select === \"function\") select = arrayAll(select);\n  else select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        subgroups.push(select.call(node, node.__data__, i, group));\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, parents);\n}\n","// Given something array like (or null), returns something that is strictly an\n// array. This is used to ensure that array-like objects passed to d3.selectAll\n// or selection.selectAll are converted into proper arrays when creating a\n// selection; we don’t ever want to create a selection backed by a live\n// HTMLCollection or NodeList. However, note that selection.selectAll will use a\n// static NodeList as a group, since it safely derived from querySelectorAll.\nexport default function array(x) {\n  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);\n}\n","import {Selection} from \"./index.js\";\nimport matcher from \"../matcher.js\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Selection(subgroups, this._parents);\n}\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","import sparse from \"./sparse.js\";\nimport {Selection} from \"./index.js\";\n\nexport default function() {\n  return new Selection(this._exit || this._groups.map(sparse), this._parents);\n}\n","export default function(onenter, onupdate, onexit) {\n  var enter = this.enter(), update = this, exit = this.exit();\n  if (typeof onenter === \"function\") {\n    enter = onenter(enter);\n    if (enter) enter = enter.selection();\n  } else {\n    enter = enter.append(onenter + \"\");\n  }\n  if (onupdate != null) {\n    update = onupdate(update);\n    if (update) update = update.selection();\n  }\n  if (onexit == null) exit.remove(); else onexit(exit);\n  return enter && update ? enter.merge(update).order() : update;\n}\n","import {Selection} from \"./index.js\";\n\nexport default function(context) {\n  var selection = context.selection ? context.selection() : context;\n\n  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Selection(merges, this._parents);\n}\n","export default function() {\n\n  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {\n    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {\n      if (node = group[i]) {\n        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);\n        next = node;\n      }\n    }\n  }\n\n  return this;\n}\n","export default function() {\n  var callback = arguments[0];\n  arguments[0] = this;\n  callback.apply(null, arguments);\n  return this;\n}\n","export default function() {\n  return Array.from(this);\n}\n","export default function() {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {\n      var node = group[i];\n      if (node) return node;\n    }\n  }\n\n  return null;\n}\n","export default function() {\n  let size = 0;\n  for (const node of this) ++size; // eslint-disable-line no-unused-vars\n  return size;\n}\n","export default function() {\n  return !this.node();\n}\n","export default function(callback) {\n\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) callback.call(node, node.__data__, i, group);\n    }\n  }\n\n  return this;\n}\n","import creator from \"../creator.js\";\n\nexport default function(name) {\n  var create = typeof name === \"function\" ? name : creator(name);\n  return this.select(function() {\n    return this.appendChild(create.apply(this, arguments));\n  });\n}\n","export default function(value) {\n  return arguments.length\n      ? this.property(\"__data__\", value)\n      : this.node().__data__;\n}\n","export default function*() {\n  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {\n    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {\n      if (node = group[i]) yield node;\n    }\n  }\n}\n","var noop = {value: () => {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n","export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n","import define, {extend} from \"./define.js\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(`^rgb\\\\(${reI},${reI},${reI}\\\\)$`),\n    reRgbPercent = new RegExp(`^rgb\\\\(${reP},${reP},${reP}\\\\)$`),\n    reRgbaInteger = new RegExp(`^rgba\\\\(${reI},${reI},${reI},${reN}\\\\)$`),\n    reRgbaPercent = new RegExp(`^rgba\\\\(${reP},${reP},${reP},${reN}\\\\)$`),\n    reHslPercent = new RegExp(`^hsl\\\\(${reN},${reP},${reP}\\\\)$`),\n    reHslaPercent = new RegExp(`^hsla\\\\(${reN},${reP},${reP},${reN}\\\\)$`);\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  copy(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHex8: color_formatHex8,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHex8() {\n  return this.rgb().formatHex8();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nexport default function color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb() {\n    return this;\n  },\n  clamp() {\n    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));\n  },\n  displayable() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatHex8: rgb_formatHex8,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;\n}\n\nfunction rgb_formatHex8() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;\n}\n\nfunction rgb_formatRgb() {\n  const a = clampa(this.opacity);\n  return `${a === 1 ? \"rgb(\" : \"rgba(\"}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? \")\" : `, ${a})`}`;\n}\n\nfunction clampa(opacity) {\n  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));\n}\n\nfunction clampi(value) {\n  return Math.max(0, Math.min(255, Math.round(value) || 0));\n}\n\nfunction hex(value) {\n  value = clampi(value);\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  clamp() {\n    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));\n  },\n  displayable() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl() {\n    const a = clampa(this.opacity);\n    return `${a === 1 ? \"hsl(\" : \"hsla(\"}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? \")\" : `, ${a})`}`;\n  }\n}));\n\nfunction clamph(value) {\n  value = (value || 0) % 360;\n  return value < 0 ? value + 360 : value;\n}\n\nfunction clampt(value) {\n  return Math.max(0, Math.min(1, value || 0));\n}\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","export default x => () => x;\n","import constant from \"./constant.js\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n","import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis.js\";\nimport basisClosed from \"./basisClosed.js\";\nimport nogamma, {gamma} from \"./color.js\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n","import value from \"./value.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n}\n\nexport function genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n","export default function(a, b) {\n  var d = new Date;\n  return a = +a, b = +b, function(t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n}\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n","import value from \"./value.js\";\n\nexport default function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n","import {basis} from \"./basis.js\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import number from \"./number.js\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n","export default function(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function(t) {\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n    return c;\n  };\n}\n\nexport function isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n","import {color} from \"d3-color\";\nimport rgb from \"./rgb.js\";\nimport {genericArray} from \"./array.js\";\nimport date from \"./date.js\";\nimport number from \"./number.js\";\nimport object from \"./object.js\";\nimport string from \"./string.js\";\nimport constant from \"./constant.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? constant(b)\n      : (t === \"number\" ? number\n      : t === \"string\" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : isNumberArray(b) ? numberArray\n      : Array.isArray(b) ? genericArray\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\n      : number)(a, b);\n}\n","var frame = 0, // is an animation frame pending?\n    timeout = 0, // is a timeout pending?\n    interval = 0, // are any timers active?\n    pokeDelay = 1000, // how frequently we check for clock skew\n    taskHead,\n    taskTail,\n    clockLast = 0,\n    clockNow = 0,\n    clockSkew = 0,\n    clock = typeof performance === \"object\" && performance.now ? performance : Date,\n    setFrame = typeof window === \"object\" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };\n\nexport function now() {\n  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);\n}\n\nfunction clearNow() {\n  clockNow = 0;\n}\n\nexport function Timer() {\n  this._call =\n  this._time =\n  this._next = null;\n}\n\nTimer.prototype = timer.prototype = {\n  constructor: Timer,\n  restart: function(callback, delay, time) {\n    if (typeof callback !== \"function\") throw new TypeError(\"callback is not a function\");\n    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);\n    if (!this._next && taskTail !== this) {\n      if (taskTail) taskTail._next = this;\n      else taskHead = this;\n      taskTail = this;\n    }\n    this._call = callback;\n    this._time = time;\n    sleep();\n  },\n  stop: function() {\n    if (this._call) {\n      this._call = null;\n      this._time = Infinity;\n      sleep();\n    }\n  }\n};\n\nexport function timer(callback, delay, time) {\n  var t = new Timer;\n  t.restart(callback, delay, time);\n  return t;\n}\n\nexport function timerFlush() {\n  now(); // Get the current time, if not already set.\n  ++frame; // Pretend we’ve set an alarm, if we haven’t already.\n  var t = taskHead, e;\n  while (t) {\n    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);\n    t = t._next;\n  }\n  --frame;\n}\n\nfunction wake() {\n  clockNow = (clockLast = clock.now()) + clockSkew;\n  frame = timeout = 0;\n  try {\n    timerFlush();\n  } finally {\n    frame = 0;\n    nap();\n    clockNow = 0;\n  }\n}\n\nfunction poke() {\n  var now = clock.now(), delay = now - clockLast;\n  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;\n}\n\nfunction nap() {\n  var t0, t1 = taskHead, t2, time = Infinity;\n  while (t1) {\n    if (t1._call) {\n      if (time > t1._time) time = t1._time;\n      t0 = t1, t1 = t1._next;\n    } else {\n      t2 = t1._next, t1._next = null;\n      t1 = t0 ? t0._next = t2 : taskHead = t2;\n    }\n  }\n  taskTail = t0;\n  sleep(time);\n}\n\nfunction sleep(time) {\n  if (frame) return; // Soonest alarm already set, or will be.\n  if (timeout) timeout = clearTimeout(timeout);\n  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.\n  if (delay > 24) {\n    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);\n    if (interval) interval = clearInterval(interval);\n  } else {\n    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);\n    frame = 1, setFrame(wake);\n  }\n}\n","import {Timer} from \"./timer.js\";\n\nexport default function(callback, delay, time) {\n  var t = new Timer;\n  delay = delay == null ? 0 : +delay;\n  t.restart(elapsed => {\n    t.stop();\n    callback(elapsed + delay);\n  }, delay, time);\n  return t;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {timer, timeout} from \"d3-timer\";\n\nvar emptyOn = dispatch(\"start\", \"end\", \"cancel\", \"interrupt\");\nvar emptyTween = [];\n\nexport var CREATED = 0;\nexport var SCHEDULED = 1;\nexport var STARTING = 2;\nexport var STARTED = 3;\nexport var RUNNING = 4;\nexport var ENDING = 5;\nexport var ENDED = 6;\n\nexport default function(node, name, id, index, group, timing) {\n  var schedules = node.__transition;\n  if (!schedules) node.__transition = {};\n  else if (id in schedules) return;\n  create(node, id, {\n    name: name,\n    index: index, // For context during callback.\n    group: group, // For context during callback.\n    on: emptyOn,\n    tween: emptyTween,\n    time: timing.time,\n    delay: timing.delay,\n    duration: timing.duration,\n    ease: timing.ease,\n    timer: null,\n    state: CREATED\n  });\n}\n\nexport function init(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > CREATED) throw new Error(\"too late; already scheduled\");\n  return schedule;\n}\n\nexport function set(node, id) {\n  var schedule = get(node, id);\n  if (schedule.state > STARTED) throw new Error(\"too late; already running\");\n  return schedule;\n}\n\nexport function get(node, id) {\n  var schedule = node.__transition;\n  if (!schedule || !(schedule = schedule[id])) throw new Error(\"transition not found\");\n  return schedule;\n}\n\nfunction create(node, id, self) {\n  var schedules = node.__transition,\n      tween;\n\n  // Initialize the self timer when the transition is created.\n  // Note the actual delay is not known until the first callback!\n  schedules[id] = self;\n  self.timer = timer(schedule, 0, self.time);\n\n  function schedule(elapsed) {\n    self.state = SCHEDULED;\n    self.timer.restart(start, self.delay, self.time);\n\n    // If the elapsed delay is less than our first sleep, start immediately.\n    if (self.delay <= elapsed) start(elapsed - self.delay);\n  }\n\n  function start(elapsed) {\n    var i, j, n, o;\n\n    // If the state is not SCHEDULED, then we previously errored on start.\n    if (self.state !== SCHEDULED) return stop();\n\n    for (i in schedules) {\n      o = schedules[i];\n      if (o.name !== self.name) continue;\n\n      // While this element already has a starting transition during this frame,\n      // defer starting an interrupting transition until that transition has a\n      // chance to tick (and possibly end); see d3/d3-transition#54!\n      if (o.state === STARTED) return timeout(start);\n\n      // Interrupt the active transition, if any.\n      if (o.state === RUNNING) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"interrupt\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n\n      // Cancel any pre-empted transitions.\n      else if (+i < id) {\n        o.state = ENDED;\n        o.timer.stop();\n        o.on.call(\"cancel\", node, node.__data__, o.index, o.group);\n        delete schedules[i];\n      }\n    }\n\n    // Defer the first tick to end of the current frame; see d3/d3#1576.\n    // Note the transition may be canceled after start and before the first tick!\n    // Note this must be scheduled before the start event; see d3/d3-transition#16!\n    // Assuming this is successful, subsequent callbacks go straight to tick.\n    timeout(function() {\n      if (self.state === STARTED) {\n        self.state = RUNNING;\n        self.timer.restart(tick, self.delay, self.time);\n        tick(elapsed);\n      }\n    });\n\n    // Dispatch the start event.\n    // Note this must be done before the tween are initialized.\n    self.state = STARTING;\n    self.on.call(\"start\", node, node.__data__, self.index, self.group);\n    if (self.state !== STARTING) return; // interrupted\n    self.state = STARTED;\n\n    // Initialize the tween, deleting null tween.\n    tween = new Array(n = self.tween.length);\n    for (i = 0, j = -1; i < n; ++i) {\n      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {\n        tween[++j] = o;\n      }\n    }\n    tween.length = j + 1;\n  }\n\n  function tick(elapsed) {\n    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),\n        i = -1,\n        n = tween.length;\n\n    while (++i < n) {\n      tween[i].call(node, t);\n    }\n\n    // Dispatch the end event.\n    if (self.state === ENDING) {\n      self.on.call(\"end\", node, node.__data__, self.index, self.group);\n      stop();\n    }\n  }\n\n  function stop() {\n    self.state = ENDED;\n    self.timer.stop();\n    delete schedules[id];\n    for (var i in schedules) return; // eslint-disable-line no-unused-vars\n    delete node.__transition;\n  }\n}\n","var degrees = 180 / Math.PI;\n\nexport var identity = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\n\nexport default function(a, b, c, d, e, f) {\n  var scaleX, scaleY, skewX;\n  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;\n  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;\n  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;\n  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;\n  return {\n    translateX: e,\n    translateY: f,\n    rotate: Math.atan2(b, a) * degrees,\n    skewX: Math.atan(skewX) * degrees,\n    scaleX: scaleX,\n    scaleY: scaleY\n  };\n}\n","import decompose, {identity} from \"./decompose.js\";\n\nvar svgNode;\n\n/* eslint-disable no-undef */\nexport function parseCss(value) {\n  const m = new (typeof DOMMatrix === \"function\" ? DOMMatrix : WebKitCSSMatrix)(value + \"\");\n  return m.isIdentity ? identity : decompose(m.a, m.b, m.c, m.d, m.e, m.f);\n}\n\nexport function parseSvg(value) {\n  if (value == null) return identity;\n  if (!svgNode) svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n  svgNode.setAttribute(\"transform\", value);\n  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;\n  value = value.matrix;\n  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);\n}\n","import number from \"../number.js\";\nimport {parseCss, parseSvg} from \"./parse.js\";\n\nfunction interpolateTransform(parse, pxComma, pxParen, degParen) {\n\n  function pop(s) {\n    return s.length ? s.pop() + \" \" : \"\";\n  }\n\n  function translate(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(\"translate(\", null, pxComma, null, pxParen);\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb || yb) {\n      s.push(\"translate(\" + xb + pxComma + yb + pxParen);\n    }\n  }\n\n  function rotate(a, b, s, q) {\n    if (a !== b) {\n      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path\n      q.push({i: s.push(pop(s) + \"rotate(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"rotate(\" + b + degParen);\n    }\n  }\n\n  function skewX(a, b, s, q) {\n    if (a !== b) {\n      q.push({i: s.push(pop(s) + \"skewX(\", null, degParen) - 2, x: number(a, b)});\n    } else if (b) {\n      s.push(pop(s) + \"skewX(\" + b + degParen);\n    }\n  }\n\n  function scale(xa, ya, xb, yb, s, q) {\n    if (xa !== xb || ya !== yb) {\n      var i = s.push(pop(s) + \"scale(\", null, \",\", null, \")\");\n      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});\n    } else if (xb !== 1 || yb !== 1) {\n      s.push(pop(s) + \"scale(\" + xb + \",\" + yb + \")\");\n    }\n  }\n\n  return function(a, b) {\n    var s = [], // string constants and placeholders\n        q = []; // number interpolators\n    a = parse(a), b = parse(b);\n    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);\n    rotate(a.rotate, b.rotate, s, q);\n    skewX(a.skewX, b.skewX, s, q);\n    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);\n    a = b = null; // gc\n    return function(t) {\n      var i = -1, n = q.length, o;\n      while (++i < n) s[(o = q[i]).i] = o.x(t);\n      return s.join(\"\");\n    };\n  };\n}\n\nexport var interpolateTransformCss = interpolateTransform(parseCss, \"px, \", \"px)\", \"deg)\");\nexport var interpolateTransformSvg = interpolateTransform(parseSvg, \", \", \")\", \")\");\n","import {get, set} from \"./schedule.js\";\n\nfunction tweenRemove(id, name) {\n  var tween0, tween1;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = tween0 = tween;\n      for (var i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1 = tween1.slice();\n          tween1.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nfunction tweenFunction(id, name, value) {\n  var tween0, tween1;\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    var schedule = set(this, id),\n        tween = schedule.tween;\n\n    // If this node shared tween with the previous node,\n    // just assign the updated shared tween and we’re done!\n    // Otherwise, copy-on-write.\n    if (tween !== tween0) {\n      tween1 = (tween0 = tween).slice();\n      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {\n        if (tween1[i].name === name) {\n          tween1[i] = t;\n          break;\n        }\n      }\n      if (i === n) tween1.push(t);\n    }\n\n    schedule.tween = tween1;\n  };\n}\n\nexport default function(name, value) {\n  var id = this._id;\n\n  name += \"\";\n\n  if (arguments.length < 2) {\n    var tween = get(this.node(), id).tween;\n    for (var i = 0, n = tween.length, t; i < n; ++i) {\n      if ((t = tween[i]).name === name) {\n        return t.value;\n      }\n    }\n    return null;\n  }\n\n  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));\n}\n\nexport function tweenValue(transition, name, value) {\n  var id = transition._id;\n\n  transition.each(function() {\n    var schedule = set(this, id);\n    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);\n  });\n\n  return function(node) {\n    return get(node, id).value[name];\n  };\n}\n","import {color} from \"d3-color\";\nimport {interpolateNumber, interpolateRgb, interpolateString} from \"d3-interpolate\";\n\nexport default function(a, b) {\n  var c;\n  return (typeof b === \"number\" ? interpolateNumber\n      : b instanceof color ? interpolateRgb\n      : (c = color(b)) ? (b = c, interpolateRgb)\n      : interpolateString)(a, b);\n}\n","import {interpolateTransformSvg as interpolateTransform} from \"d3-interpolate\";\nimport {namespace} from \"d3-selection\";\nimport {tweenValue} from \"./tween.js\";\nimport interpolate from \"./interpolate.js\";\n\nfunction attrRemove(name) {\n  return function() {\n    this.removeAttribute(name);\n  };\n}\n\nfunction attrRemoveNS(fullname) {\n  return function() {\n    this.removeAttributeNS(fullname.space, fullname.local);\n  };\n}\n\nfunction attrConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttribute(name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrConstantNS(fullname, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = this.getAttributeNS(fullname.space, fullname.local);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction attrFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttribute(name);\n    string0 = this.getAttribute(name);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction attrFunctionNS(fullname, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0, value1 = value(this), string1;\n    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);\n    string0 = this.getAttributeNS(fullname.space, fullname.local);\n    string1 = value1 + \"\";\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nexport default function(name, value) {\n  var fullname = namespace(name), i = fullname === \"transform\" ? interpolateTransform : interpolate;\n  return this.attrTween(name, typeof value === \"function\"\n      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, \"attr.\" + name, value))\n      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)\n      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));\n}\n","import {namespace} from \"d3-selection\";\n\nfunction attrInterpolate(name, i) {\n  return function(t) {\n    this.setAttribute(name, i.call(this, t));\n  };\n}\n\nfunction attrInterpolateNS(fullname, i) {\n  return function(t) {\n    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));\n  };\n}\n\nfunction attrTweenNS(fullname, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nfunction attrTween(name, value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value) {\n  var key = \"attr.\" + name;\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  var fullname = namespace(name);\n  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));\n}\n","import {get, init} from \"./schedule.js\";\n\nfunction delayFunction(id, value) {\n  return function() {\n    init(this, id).delay = +value.apply(this, arguments);\n  };\n}\n\nfunction delayConstant(id, value) {\n  return value = +value, function() {\n    init(this, id).delay = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? delayFunction\n          : delayConstant)(id, value))\n      : get(this.node(), id).delay;\n}\n","import {get, set} from \"./schedule.js\";\n\nfunction durationFunction(id, value) {\n  return function() {\n    set(this, id).duration = +value.apply(this, arguments);\n  };\n}\n\nfunction durationConstant(id, value) {\n  return value = +value, function() {\n    set(this, id).duration = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each((typeof value === \"function\"\n          ? durationFunction\n          : durationConstant)(id, value))\n      : get(this.node(), id).duration;\n}\n","import {selection} from \"d3-selection\";\n\nvar Selection = selection.prototype.constructor;\n\nexport default function() {\n  return new Selection(this._groups, this._parents);\n}\n","import {interpolateTransformCss as interpolateTransform} from \"d3-interpolate\";\nimport {style} from \"d3-selection\";\nimport {set} from \"./schedule.js\";\nimport {tweenValue} from \"./tween.js\";\nimport interpolate from \"./interpolate.js\";\n\nfunction styleNull(name, interpolate) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        string1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, string10 = string1);\n  };\n}\n\nfunction styleRemove(name) {\n  return function() {\n    this.style.removeProperty(name);\n  };\n}\n\nfunction styleConstant(name, interpolate, value1) {\n  var string00,\n      string1 = value1 + \"\",\n      interpolate0;\n  return function() {\n    var string0 = style(this, name);\n    return string0 === string1 ? null\n        : string0 === string00 ? interpolate0\n        : interpolate0 = interpolate(string00 = string0, value1);\n  };\n}\n\nfunction styleFunction(name, interpolate, value) {\n  var string00,\n      string10,\n      interpolate0;\n  return function() {\n    var string0 = style(this, name),\n        value1 = value(this),\n        string1 = value1 + \"\";\n    if (value1 == null) string1 = value1 = (this.style.removeProperty(name), style(this, name));\n    return string0 === string1 ? null\n        : string0 === string00 && string1 === string10 ? interpolate0\n        : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));\n  };\n}\n\nfunction styleMaybeRemove(id, name) {\n  var on0, on1, listener0, key = \"style.\" + name, event = \"end.\" + key, remove;\n  return function() {\n    var schedule = set(this, id),\n        on = schedule.on,\n        listener = schedule.value[key] == null ? remove || (remove = styleRemove(name)) : undefined;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, value, priority) {\n  var i = (name += \"\") === \"transform\" ? interpolateTransform : interpolate;\n  return value == null ? this\n      .styleTween(name, styleNull(name, i))\n      .on(\"end.style.\" + name, styleRemove(name))\n    : typeof value === \"function\" ? this\n      .styleTween(name, styleFunction(name, i, tweenValue(this, \"style.\" + name, value)))\n      .each(styleMaybeRemove(this._id, name))\n    : this\n      .styleTween(name, styleConstant(name, i, value), priority)\n      .on(\"end.style.\" + name, null);\n}\n","import {selection} from \"d3-selection\";\nimport transition_attr from \"./attr.js\";\nimport transition_attrTween from \"./attrTween.js\";\nimport transition_delay from \"./delay.js\";\nimport transition_duration from \"./duration.js\";\nimport transition_ease from \"./ease.js\";\nimport transition_easeVarying from \"./easeVarying.js\";\nimport transition_filter from \"./filter.js\";\nimport transition_merge from \"./merge.js\";\nimport transition_on from \"./on.js\";\nimport transition_remove from \"./remove.js\";\nimport transition_select from \"./select.js\";\nimport transition_selectAll from \"./selectAll.js\";\nimport transition_selection from \"./selection.js\";\nimport transition_style from \"./style.js\";\nimport transition_styleTween from \"./styleTween.js\";\nimport transition_text from \"./text.js\";\nimport transition_textTween from \"./textTween.js\";\nimport transition_transition from \"./transition.js\";\nimport transition_tween from \"./tween.js\";\nimport transition_end from \"./end.js\";\n\nvar id = 0;\n\nexport function Transition(groups, parents, name, id) {\n  this._groups = groups;\n  this._parents = parents;\n  this._name = name;\n  this._id = id;\n}\n\nexport default function transition(name) {\n  return selection().transition(name);\n}\n\nexport function newId() {\n  return ++id;\n}\n\nvar selection_prototype = selection.prototype;\n\nTransition.prototype = transition.prototype = {\n  constructor: Transition,\n  select: transition_select,\n  selectAll: transition_selectAll,\n  selectChild: selection_prototype.selectChild,\n  selectChildren: selection_prototype.selectChildren,\n  filter: transition_filter,\n  merge: transition_merge,\n  selection: transition_selection,\n  transition: transition_transition,\n  call: selection_prototype.call,\n  nodes: selection_prototype.nodes,\n  node: selection_prototype.node,\n  size: selection_prototype.size,\n  empty: selection_prototype.empty,\n  each: selection_prototype.each,\n  on: transition_on,\n  attr: transition_attr,\n  attrTween: transition_attrTween,\n  style: transition_style,\n  styleTween: transition_styleTween,\n  text: transition_text,\n  textTween: transition_textTween,\n  remove: transition_remove,\n  tween: transition_tween,\n  delay: transition_delay,\n  duration: transition_duration,\n  ease: transition_ease,\n  easeVarying: transition_easeVarying,\n  end: transition_end,\n  [Symbol.iterator]: selection_prototype[Symbol.iterator]\n};\n","import {selector} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selector(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {\n      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {\n        if (\"__data__\" in node) subnode.__data__ = node.__data__;\n        subgroup[i] = subnode;\n        schedule(subgroup[i], name, id, i, subgroup, get(node, id));\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, name, id);\n}\n","import {selectorAll} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function(select) {\n  var name = this._name,\n      id = this._id;\n\n  if (typeof select !== \"function\") select = selectorAll(select);\n\n  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {\n          if (child = children[k]) {\n            schedule(child, name, id, k, children, inherit);\n          }\n        }\n        subgroups.push(children);\n        parents.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, parents, name, id);\n}\n","import {matcher} from \"d3-selection\";\nimport {Transition} from \"./index.js\";\n\nexport default function(match) {\n  if (typeof match !== \"function\") match = matcher(match);\n\n  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {\n      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {\n        subgroup.push(node);\n      }\n    }\n  }\n\n  return new Transition(subgroups, this._parents, this._name, this._id);\n}\n","import {Transition} from \"./index.js\";\n\nexport default function(transition) {\n  if (transition._id !== this._id) throw new Error;\n\n  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {\n    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {\n      if (node = group0[i] || group1[i]) {\n        merge[i] = node;\n      }\n    }\n  }\n\n  for (; j < m0; ++j) {\n    merges[j] = groups0[j];\n  }\n\n  return new Transition(merges, this._parents, this._name, this._id);\n}\n","import {Transition, newId} from \"./index.js\";\nimport schedule, {get} from \"./schedule.js\";\n\nexport default function() {\n  var name = this._name,\n      id0 = this._id,\n      id1 = newId();\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        var inherit = get(node, id0);\n        schedule(node, name, id1, i, group, {\n          time: inherit.time + inherit.delay + inherit.duration,\n          delay: 0,\n          duration: inherit.duration,\n          ease: inherit.ease\n        });\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id1);\n}\n","import {get, set, init} from \"./schedule.js\";\n\nfunction start(name) {\n  return (name + \"\").trim().split(/^|\\s+/).every(function(t) {\n    var i = t.indexOf(\".\");\n    if (i >= 0) t = t.slice(0, i);\n    return !t || t === \"start\";\n  });\n}\n\nfunction onFunction(id, name, listener) {\n  var on0, on1, sit = start(name) ? init : set;\n  return function() {\n    var schedule = sit(this, id),\n        on = schedule.on;\n\n    // If this node shared a dispatch with the previous node,\n    // just assign the updated shared dispatch and we’re done!\n    // Otherwise, copy-on-write.\n    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);\n\n    schedule.on = on1;\n  };\n}\n\nexport default function(name, listener) {\n  var id = this._id;\n\n  return arguments.length < 2\n      ? get(this.node(), id).on.on(name)\n      : this.each(onFunction(id, name, listener));\n}\n","function styleInterpolate(name, i, priority) {\n  return function(t) {\n    this.style.setProperty(name, i.call(this, t), priority);\n  };\n}\n\nfunction styleTween(name, value, priority) {\n  var t, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);\n    return t;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(name, value, priority) {\n  var key = \"style.\" + (name += \"\");\n  if (arguments.length < 2) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, styleTween(name, value, priority == null ? \"\" : priority));\n}\n","import {tweenValue} from \"./tween.js\";\n\nfunction textConstant(value) {\n  return function() {\n    this.textContent = value;\n  };\n}\n\nfunction textFunction(value) {\n  return function() {\n    var value1 = value(this);\n    this.textContent = value1 == null ? \"\" : value1;\n  };\n}\n\nexport default function(value) {\n  return this.tween(\"text\", typeof value === \"function\"\n      ? textFunction(tweenValue(this, \"text\", value))\n      : textConstant(value == null ? \"\" : value + \"\"));\n}\n","function textInterpolate(i) {\n  return function(t) {\n    this.textContent = i.call(this, t);\n  };\n}\n\nfunction textTween(value) {\n  var t0, i0;\n  function tween() {\n    var i = value.apply(this, arguments);\n    if (i !== i0) t0 = (i0 = i) && textInterpolate(i);\n    return t0;\n  }\n  tween._value = value;\n  return tween;\n}\n\nexport default function(value) {\n  var key = \"text\";\n  if (arguments.length < 1) return (key = this.tween(key)) && key._value;\n  if (value == null) return this.tween(key, null);\n  if (typeof value !== \"function\") throw new Error;\n  return this.tween(key, textTween(value));\n}\n","function removeFunction(id) {\n  return function() {\n    var parent = this.parentNode;\n    for (var i in this.__transition) if (+i !== id) return;\n    if (parent) parent.removeChild(this);\n  };\n}\n\nexport default function() {\n  return this.on(\"end.remove\", removeFunction(this._id));\n}\n","import {get, set} from \"./schedule.js\";\n\nfunction easeConstant(id, value) {\n  if (typeof value !== \"function\") throw new Error;\n  return function() {\n    set(this, id).ease = value;\n  };\n}\n\nexport default function(value) {\n  var id = this._id;\n\n  return arguments.length\n      ? this.each(easeConstant(id, value))\n      : get(this.node(), id).ease;\n}\n","import {set} from \"./schedule.js\";\n\nfunction easeVarying(id, value) {\n  return function() {\n    var v = value.apply(this, arguments);\n    if (typeof v !== \"function\") throw new Error;\n    set(this, id).ease = v;\n  };\n}\n\nexport default function(value) {\n  if (typeof value !== \"function\") throw new Error;\n  return this.each(easeVarying(this._id, value));\n}\n","import {set} from \"./schedule.js\";\n\nexport default function() {\n  var on0, on1, that = this, id = that._id, size = that.size();\n  return new Promise(function(resolve, reject) {\n    var cancel = {value: reject},\n        end = {value: function() { if (--size === 0) resolve(); }};\n\n    that.each(function() {\n      var schedule = set(this, id),\n          on = schedule.on;\n\n      // If this node shared a dispatch with the previous node,\n      // just assign the updated shared dispatch and we’re done!\n      // Otherwise, copy-on-write.\n      if (on !== on0) {\n        on1 = (on0 = on).copy();\n        on1._.cancel.push(cancel);\n        on1._.interrupt.push(cancel);\n        on1._.end.push(end);\n      }\n\n      schedule.on = on1;\n    });\n\n    // The selection was empty, resolve end immediately\n    if (size === 0) resolve();\n  });\n}\n","import {Transition, newId} from \"../transition/index.js\";\nimport schedule from \"../transition/schedule.js\";\nimport {easeCubicInOut} from \"d3-ease\";\nimport {now} from \"d3-timer\";\n\nvar defaultTiming = {\n  time: null, // Set on use.\n  delay: 0,\n  duration: 250,\n  ease: easeCubicInOut\n};\n\nfunction inherit(node, id) {\n  var timing;\n  while (!(timing = node.__transition) || !(timing = timing[id])) {\n    if (!(node = node.parentNode)) {\n      throw new Error(`transition ${id} not found`);\n    }\n  }\n  return timing;\n}\n\nexport default function(name) {\n  var id,\n      timing;\n\n  if (name instanceof Transition) {\n    id = name._id, name = name._name;\n  } else {\n    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + \"\";\n  }\n\n  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {\n    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {\n      if (node = group[i]) {\n        schedule(node, name, id, i, group, timing || inherit(node, id));\n      }\n    }\n  }\n\n  return new Transition(groups, this._parents, name, id);\n}\n","export function cubicIn(t) {\n  return t * t * t;\n}\n\nexport function cubicOut(t) {\n  return --t * t * t + 1;\n}\n\nexport function cubicInOut(t) {\n  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;\n}\n","import {selection} from \"d3-selection\";\nimport selection_interrupt from \"./interrupt.js\";\nimport selection_transition from \"./transition.js\";\n\nselection.prototype.interrupt = selection_interrupt;\nselection.prototype.transition = selection_transition;\n","import interrupt from \"../interrupt.js\";\n\nexport default function(name) {\n  return this.each(function() {\n    interrupt(this, name);\n  });\n}\n","import {STARTING, ENDING, ENDED} from \"./transition/schedule.js\";\n\nexport default function(node, name) {\n  var schedules = node.__transition,\n      schedule,\n      active,\n      empty = true,\n      i;\n\n  if (!schedules) return;\n\n  name = name == null ? null : name + \"\";\n\n  for (i in schedules) {\n    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }\n    active = schedule.state > STARTING && schedule.state < ENDING;\n    schedule.state = ENDED;\n    schedule.timer.stop();\n    schedule.on.call(active ? \"interrupt\" : \"cancel\", node, node.__data__, schedule.index, schedule.group);\n    delete schedules[i];\n  }\n\n  if (empty) delete node.__transition;\n}\n","import {dispatch} from \"d3-dispatch\";\nimport {dragDisable, dragEnable} from \"d3-drag\";\nimport {interpolate} from \"d3-interpolate\";\nimport {pointer, select} from \"d3-selection\";\nimport {interrupt} from \"d3-transition\";\nimport constant from \"./constant.js\";\nimport BrushEvent from \"./event.js\";\nimport noevent, {nopropagation} from \"./noevent.js\";\n\nvar MODE_DRAG = {name: \"drag\"},\n    MODE_SPACE = {name: \"space\"},\n    MODE_HANDLE = {name: \"handle\"},\n    MODE_CENTER = {name: \"center\"};\n\nconst {abs, max, min} = Math;\n\nfunction number1(e) {\n  return [+e[0], +e[1]];\n}\n\nfunction number2(e) {\n  return [number1(e[0]), number1(e[1])];\n}\n\nvar X = {\n  name: \"x\",\n  handles: [\"w\", \"e\"].map(type),\n  input: function(x, e) { return x == null ? null : [[+x[0], e[0][1]], [+x[1], e[1][1]]]; },\n  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }\n};\n\nvar Y = {\n  name: \"y\",\n  handles: [\"n\", \"s\"].map(type),\n  input: function(y, e) { return y == null ? null : [[e[0][0], +y[0]], [e[1][0], +y[1]]]; },\n  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }\n};\n\nvar XY = {\n  name: \"xy\",\n  handles: [\"n\", \"w\", \"e\", \"s\", \"nw\", \"ne\", \"sw\", \"se\"].map(type),\n  input: function(xy) { return xy == null ? null : number2(xy); },\n  output: function(xy) { return xy; }\n};\n\nvar cursors = {\n  overlay: \"crosshair\",\n  selection: \"move\",\n  n: \"ns-resize\",\n  e: \"ew-resize\",\n  s: \"ns-resize\",\n  w: \"ew-resize\",\n  nw: \"nwse-resize\",\n  ne: \"nesw-resize\",\n  se: \"nwse-resize\",\n  sw: \"nesw-resize\"\n};\n\nvar flipX = {\n  e: \"w\",\n  w: \"e\",\n  nw: \"ne\",\n  ne: \"nw\",\n  se: \"sw\",\n  sw: \"se\"\n};\n\nvar flipY = {\n  n: \"s\",\n  s: \"n\",\n  nw: \"sw\",\n  ne: \"se\",\n  se: \"ne\",\n  sw: \"nw\"\n};\n\nvar signsX = {\n  overlay: +1,\n  selection: +1,\n  n: null,\n  e: +1,\n  s: null,\n  w: -1,\n  nw: -1,\n  ne: +1,\n  se: +1,\n  sw: -1\n};\n\nvar signsY = {\n  overlay: +1,\n  selection: +1,\n  n: -1,\n  e: null,\n  s: +1,\n  w: null,\n  nw: -1,\n  ne: -1,\n  se: +1,\n  sw: +1\n};\n\nfunction type(t) {\n  return {type: t};\n}\n\n// Ignore right-click, since that should open the context menu.\nfunction defaultFilter(event) {\n  return !event.ctrlKey && !event.button;\n}\n\nfunction defaultExtent() {\n  var svg = this.ownerSVGElement || this;\n  if (svg.hasAttribute(\"viewBox\")) {\n    svg = svg.viewBox.baseVal;\n    return [[svg.x, svg.y], [svg.x + svg.width, svg.y + svg.height]];\n  }\n  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];\n}\n\nfunction defaultTouchable() {\n  return navigator.maxTouchPoints || (\"ontouchstart\" in this);\n}\n\n// Like d3.local, but with the name “__brush” rather than auto-generated.\nfunction local(node) {\n  while (!node.__brush) if (!(node = node.parentNode)) return;\n  return node.__brush;\n}\n\nfunction empty(extent) {\n  return extent[0][0] === extent[1][0]\n      || extent[0][1] === extent[1][1];\n}\n\nexport function brushSelection(node) {\n  var state = node.__brush;\n  return state ? state.dim.output(state.selection) : null;\n}\n\nexport function brushX() {\n  return brush(X);\n}\n\nexport function brushY() {\n  return brush(Y);\n}\n\nexport default function() {\n  return brush(XY);\n}\n\nfunction brush(dim) {\n  var extent = defaultExtent,\n      filter = defaultFilter,\n      touchable = defaultTouchable,\n      keys = true,\n      listeners = dispatch(\"start\", \"brush\", \"end\"),\n      handleSize = 6,\n      touchending;\n\n  function brush(group) {\n    var overlay = group\n        .property(\"__brush\", initialize)\n      .selectAll(\".overlay\")\n      .data([type(\"overlay\")]);\n\n    overlay.enter().append(\"rect\")\n        .attr(\"class\", \"overlay\")\n        .attr(\"pointer-events\", \"all\")\n        .attr(\"cursor\", cursors.overlay)\n      .merge(overlay)\n        .each(function() {\n          var extent = local(this).extent;\n          select(this)\n              .attr(\"x\", extent[0][0])\n              .attr(\"y\", extent[0][1])\n              .attr(\"width\", extent[1][0] - extent[0][0])\n              .attr(\"height\", extent[1][1] - extent[0][1]);\n        });\n\n    group.selectAll(\".selection\")\n      .data([type(\"selection\")])\n      .enter().append(\"rect\")\n        .attr(\"class\", \"selection\")\n        .attr(\"cursor\", cursors.selection)\n        .attr(\"fill\", \"#777\")\n        .attr(\"fill-opacity\", 0.3)\n        .attr(\"stroke\", \"#fff\")\n        .attr(\"shape-rendering\", \"crispEdges\");\n\n    var handle = group.selectAll(\".handle\")\n      .data(dim.handles, function(d) { return d.type; });\n\n    handle.exit().remove();\n\n    handle.enter().append(\"rect\")\n        .attr(\"class\", function(d) { return \"handle handle--\" + d.type; })\n        .attr(\"cursor\", function(d) { return cursors[d.type]; });\n\n    group\n        .each(redraw)\n        .attr(\"fill\", \"none\")\n        .attr(\"pointer-events\", \"all\")\n        .on(\"mousedown.brush\", started)\n      .filter(touchable)\n        .on(\"touchstart.brush\", started)\n        .on(\"touchmove.brush\", touchmoved)\n        .on(\"touchend.brush touchcancel.brush\", touchended)\n        .style(\"touch-action\", \"none\")\n        .style(\"-webkit-tap-highlight-color\", \"rgba(0,0,0,0)\");\n  }\n\n  brush.move = function(group, selection, event) {\n    if (group.tween) {\n      group\n          .on(\"start.brush\", function(event) { emitter(this, arguments).beforestart().start(event); })\n          .on(\"interrupt.brush end.brush\", function(event) { emitter(this, arguments).end(event); })\n          .tween(\"brush\", function() {\n            var that = this,\n                state = that.__brush,\n                emit = emitter(that, arguments),\n                selection0 = state.selection,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(this, arguments) : selection, state.extent),\n                i = interpolate(selection0, selection1);\n\n            function tween(t) {\n              state.selection = t === 1 && selection1 === null ? null : i(t);\n              redraw.call(that);\n              emit.brush();\n            }\n\n            return selection0 !== null && selection1 !== null ? tween : tween(1);\n          });\n    } else {\n      group\n          .each(function() {\n            var that = this,\n                args = arguments,\n                state = that.__brush,\n                selection1 = dim.input(typeof selection === \"function\" ? selection.apply(that, args) : selection, state.extent),\n                emit = emitter(that, args).beforestart();\n\n            interrupt(that);\n            state.selection = selection1 === null ? null : selection1;\n            redraw.call(that);\n            emit.start(event).brush(event).end(event);\n          });\n    }\n  };\n\n  brush.clear = function(group, event) {\n    brush.move(group, null, event);\n  };\n\n  function redraw() {\n    var group = select(this),\n        selection = local(this).selection;\n\n    if (selection) {\n      group.selectAll(\".selection\")\n          .style(\"display\", null)\n          .attr(\"x\", selection[0][0])\n          .attr(\"y\", selection[0][1])\n          .attr(\"width\", selection[1][0] - selection[0][0])\n          .attr(\"height\", selection[1][1] - selection[0][1]);\n\n      group.selectAll(\".handle\")\n          .style(\"display\", null)\n          .attr(\"x\", function(d) { return d.type[d.type.length - 1] === \"e\" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })\n          .attr(\"y\", function(d) { return d.type[0] === \"s\" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })\n          .attr(\"width\", function(d) { return d.type === \"n\" || d.type === \"s\" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })\n          .attr(\"height\", function(d) { return d.type === \"e\" || d.type === \"w\" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });\n    }\n\n    else {\n      group.selectAll(\".selection,.handle\")\n          .style(\"display\", \"none\")\n          .attr(\"x\", null)\n          .attr(\"y\", null)\n          .attr(\"width\", null)\n          .attr(\"height\", null);\n    }\n  }\n\n  function emitter(that, args, clean) {\n    var emit = that.__brush.emitter;\n    return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean);\n  }\n\n  function Emitter(that, args, clean) {\n    this.that = that;\n    this.args = args;\n    this.state = that.__brush;\n    this.active = 0;\n    this.clean = clean;\n  }\n\n  Emitter.prototype = {\n    beforestart: function() {\n      if (++this.active === 1) this.state.emitter = this, this.starting = true;\n      return this;\n    },\n    start: function(event, mode) {\n      if (this.starting) this.starting = false, this.emit(\"start\", event, mode);\n      else this.emit(\"brush\", event);\n      return this;\n    },\n    brush: function(event, mode) {\n      this.emit(\"brush\", event, mode);\n      return this;\n    },\n    end: function(event, mode) {\n      if (--this.active === 0) delete this.state.emitter, this.emit(\"end\", event, mode);\n      return this;\n    },\n    emit: function(type, event, mode) {\n      var d = select(this.that).datum();\n      listeners.call(\n        type,\n        this.that,\n        new BrushEvent(type, {\n          sourceEvent: event,\n          target: brush,\n          selection: dim.output(this.state.selection),\n          mode,\n          dispatch: listeners\n        }),\n        d\n      );\n    }\n  };\n\n  function started(event) {\n    if (touchending && !event.touches) return;\n    if (!filter.apply(this, arguments)) return;\n\n    var that = this,\n        type = event.target.__data__.type,\n        mode = (keys && event.metaKey ? type = \"overlay\" : type) === \"selection\" ? MODE_DRAG : (keys && event.altKey ? MODE_CENTER : MODE_HANDLE),\n        signX = dim === Y ? null : signsX[type],\n        signY = dim === X ? null : signsY[type],\n        state = local(that),\n        extent = state.extent,\n        selection = state.selection,\n        W = extent[0][0], w0, w1,\n        N = extent[0][1], n0, n1,\n        E = extent[1][0], e0, e1,\n        S = extent[1][1], s0, s1,\n        dx = 0,\n        dy = 0,\n        moving,\n        shifting = signX && signY && keys && event.shiftKey,\n        lockX,\n        lockY,\n        points = Array.from(event.touches || [event], t => {\n          const i = t.identifier;\n          t = pointer(t, that);\n          t.point0 = t.slice();\n          t.identifier = i;\n          return t;\n        });\n\n    interrupt(that);\n    var emit = emitter(that, arguments, true).beforestart();\n\n    if (type === \"overlay\") {\n      if (selection) moving = true;\n      const pts = [points[0], points[1] || points[0]];\n      state.selection = selection = [[\n          w0 = dim === Y ? W : min(pts[0][0], pts[1][0]),\n          n0 = dim === X ? N : min(pts[0][1], pts[1][1])\n        ], [\n          e0 = dim === Y ? E : max(pts[0][0], pts[1][0]),\n          s0 = dim === X ? S : max(pts[0][1], pts[1][1])\n        ]];\n      if (points.length > 1) move(event);\n    } else {\n      w0 = selection[0][0];\n      n0 = selection[0][1];\n      e0 = selection[1][0];\n      s0 = selection[1][1];\n    }\n\n    w1 = w0;\n    n1 = n0;\n    e1 = e0;\n    s1 = s0;\n\n    var group = select(that)\n        .attr(\"pointer-events\", \"none\");\n\n    var overlay = group.selectAll(\".overlay\")\n        .attr(\"cursor\", cursors[type]);\n\n    if (event.touches) {\n      emit.moved = moved;\n      emit.ended = ended;\n    } else {\n      var view = select(event.view)\n          .on(\"mousemove.brush\", moved, true)\n          .on(\"mouseup.brush\", ended, true);\n      if (keys) view\n          .on(\"keydown.brush\", keydowned, true)\n          .on(\"keyup.brush\", keyupped, true)\n\n      dragDisable(event.view);\n    }\n\n    redraw.call(that);\n    emit.start(event, mode.name);\n\n    function moved(event) {\n      for (const p of event.changedTouches || [event]) {\n        for (const d of points)\n          if (d.identifier === p.identifier) d.cur = pointer(p, that);\n      }\n      if (shifting && !lockX && !lockY && points.length === 1) {\n        const point = points[0];\n        if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1]))\n          lockY = true;\n        else\n          lockX = true;\n      }\n      for (const point of points)\n        if (point.cur) point[0] = point.cur[0], point[1] = point.cur[1];\n      moving = true;\n      noevent(event);\n      move(event);\n    }\n\n    function move(event) {\n      const point = points[0], point0 = point.point0;\n      var t;\n\n      dx = point[0] - point0[0];\n      dy = point[1] - point0[1];\n\n      switch (mode) {\n        case MODE_SPACE:\n        case MODE_DRAG: {\n          if (signX) dx = max(W - w0, min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;\n          if (signY) dy = max(N - n0, min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;\n          break;\n        }\n        case MODE_HANDLE: {\n          if (points[1]) {\n            if (signX) w1 = max(W, min(E, points[0][0])), e1 = max(W, min(E, points[1][0])), signX = 1;\n            if (signY) n1 = max(N, min(S, points[0][1])), s1 = max(N, min(S, points[1][1])), signY = 1;\n          } else {\n            if (signX < 0) dx = max(W - w0, min(E - w0, dx)), w1 = w0 + dx, e1 = e0;\n            else if (signX > 0) dx = max(W - e0, min(E - e0, dx)), w1 = w0, e1 = e0 + dx;\n            if (signY < 0) dy = max(N - n0, min(S - n0, dy)), n1 = n0 + dy, s1 = s0;\n            else if (signY > 0) dy = max(N - s0, min(S - s0, dy)), n1 = n0, s1 = s0 + dy;\n          }\n          break;\n        }\n        case MODE_CENTER: {\n          if (signX) w1 = max(W, min(E, w0 - dx * signX)), e1 = max(W, min(E, e0 + dx * signX));\n          if (signY) n1 = max(N, min(S, n0 - dy * signY)), s1 = max(N, min(S, s0 + dy * signY));\n          break;\n        }\n      }\n\n      if (e1 < w1) {\n        signX *= -1;\n        t = w0, w0 = e0, e0 = t;\n        t = w1, w1 = e1, e1 = t;\n        if (type in flipX) overlay.attr(\"cursor\", cursors[type = flipX[type]]);\n      }\n\n      if (s1 < n1) {\n        signY *= -1;\n        t = n0, n0 = s0, s0 = t;\n        t = n1, n1 = s1, s1 = t;\n        if (type in flipY) overlay.attr(\"cursor\", cursors[type = flipY[type]]);\n      }\n\n      if (state.selection) selection = state.selection; // May be set by brush.move!\n      if (lockX) w1 = selection[0][0], e1 = selection[1][0];\n      if (lockY) n1 = selection[0][1], s1 = selection[1][1];\n\n      if (selection[0][0] !== w1\n          || selection[0][1] !== n1\n          || selection[1][0] !== e1\n          || selection[1][1] !== s1) {\n        state.selection = [[w1, n1], [e1, s1]];\n        redraw.call(that);\n        emit.brush(event, mode.name);\n      }\n    }\n\n    function ended(event) {\n      nopropagation(event);\n      if (event.touches) {\n        if (event.touches.length) return;\n        if (touchending) clearTimeout(touchending);\n        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!\n      } else {\n        dragEnable(event.view, moving);\n        view.on(\"keydown.brush keyup.brush mousemove.brush mouseup.brush\", null);\n      }\n      group.attr(\"pointer-events\", \"all\");\n      overlay.attr(\"cursor\", cursors.overlay);\n      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!\n      if (empty(selection)) state.selection = null, redraw.call(that);\n      emit.end(event, mode.name);\n    }\n\n    function keydowned(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          shifting = signX && signY;\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_HANDLE) {\n            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n            mode = MODE_CENTER;\n            move(event);\n          }\n          break;\n        }\n        case 32: { // SPACE; takes priority over ALT\n          if (mode === MODE_HANDLE || mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;\n            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;\n            mode = MODE_SPACE;\n            overlay.attr(\"cursor\", cursors.selection);\n            move(event);\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n\n    function keyupped(event) {\n      switch (event.keyCode) {\n        case 16: { // SHIFT\n          if (shifting) {\n            lockX = lockY = shifting = false;\n            move(event);\n          }\n          break;\n        }\n        case 18: { // ALT\n          if (mode === MODE_CENTER) {\n            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n            mode = MODE_HANDLE;\n            move(event);\n          }\n          break;\n        }\n        case 32: { // SPACE\n          if (mode === MODE_SPACE) {\n            if (event.altKey) {\n              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;\n              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;\n              mode = MODE_CENTER;\n            } else {\n              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;\n              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;\n              mode = MODE_HANDLE;\n            }\n            overlay.attr(\"cursor\", cursors[type]);\n            move(event);\n          }\n          break;\n        }\n        default: return;\n      }\n      noevent(event);\n    }\n  }\n\n  function touchmoved(event) {\n    emitter(this, arguments).moved(event);\n  }\n\n  function touchended(event) {\n    emitter(this, arguments).ended(event);\n  }\n\n  function initialize() {\n    var state = this.__brush || {selection: null};\n    state.extent = number2(extent.apply(this, arguments));\n    state.dim = dim;\n    return state;\n  }\n\n  brush.extent = function(_) {\n    return arguments.length ? (extent = typeof _ === \"function\" ? _ : constant(number2(_)), brush) : extent;\n  };\n\n  brush.filter = function(_) {\n    return arguments.length ? (filter = typeof _ === \"function\" ? _ : constant(!!_), brush) : filter;\n  };\n\n  brush.touchable = function(_) {\n    return arguments.length ? (touchable = typeof _ === \"function\" ? _ : constant(!!_), brush) : touchable;\n  };\n\n  brush.handleSize = function(_) {\n    return arguments.length ? (handleSize = +_, brush) : handleSize;\n  };\n\n  brush.keyModifiers = function(_) {\n    return arguments.length ? (keys = !!_, brush) : keys;\n  };\n\n  brush.on = function() {\n    var value = listeners.on.apply(listeners, arguments);\n    return value === listeners ? brush : value;\n  };\n\n  return brush;\n}\n","export default function ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export default function descending(a, b) {\n  return a == null || b == null ? NaN\n    : b < a ? -1\n    : b > a ? 1\n    : b >= a ? 0\n    : NaN;\n}\n","import ascending from \"./ascending.js\";\nimport descending from \"./descending.js\";\n\nexport default function bisector(f) {\n  let compare1, compare2, delta;\n\n  // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can’t do this\n  // for a comparator (except for specific, known comparators) because we can’t\n  // tell if the comparator is symmetric, and an asymmetric comparator can’t be\n  // used to test whether a single value is comparable.\n  if (f.length !== 2) {\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === ascending || f === descending ? f : zero;\n    compare2 = f;\n    delta = f;\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction zero() {\n  return 0;\n}\n","const e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction tickSpec(start, stop, count) {\n  const step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log10(step)),\n      error = step / Math.pow(10, power),\n      factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;\n  let i1, i2, inc;\n  if (power < 0) {\n    inc = Math.pow(10, -power) / factor;\n    i1 = Math.round(start * inc);\n    i2 = Math.round(stop * inc);\n    if (i1 / inc < start) ++i1;\n    if (i2 / inc > stop) --i2;\n    inc = -inc;\n  } else {\n    inc = Math.pow(10, power) * factor;\n    i1 = Math.round(start / inc);\n    i2 = Math.round(stop / inc);\n    if (i1 * inc < start) ++i1;\n    if (i2 * inc > stop) --i2;\n  }\n  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);\n  return [i1, i2, inc];\n}\n\nexport default function ticks(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  if (!(count > 0)) return [];\n  if (start === stop) return [start];\n  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);\n  if (!(i2 >= i1)) return [];\n  const n = i2 - i1 + 1, ticks = new Array(n);\n  if (reverse) {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;\n  } else {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;\n  }\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  return tickSpec(start, stop, count)[2];\n}\n\nexport function tickStep(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);\n  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);\n}\n","export const durationSecond = 1000;\nexport const durationMinute = durationSecond * 60;\nexport const durationHour = durationMinute * 60;\nexport const durationDay = durationHour * 24;\nexport const durationWeek = durationDay * 7;\nexport const durationMonth = durationDay * 30;\nexport const durationYear = durationDay * 365;\n","const t0 = new Date, t1 = new Date;\n\nexport function timeInterval(floori, offseti, count, field) {\n\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;\n  }\n\n  interval.floor = (date) => {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = (date) => {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = (date) => {\n    const d0 = interval(date), d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = (date, step) => {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = (start, stop, step) => {\n    const range = [];\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n    let previous;\n    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    while (previous < start && start < stop);\n    return range;\n  };\n\n  interval.filter = (test) => {\n    return timeInterval((date) => {\n      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n    }, (date, step) => {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = (start, end) => {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = (step) => {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null\n          : !(step > 1) ? interval\n          : interval.filter(field\n              ? (d) => field(d) % step === 0\n              : (d) => interval.count(0, d) % step === 0);\n    };\n  }\n\n  return interval;\n}\n","import {timeInterval} from \"./interval.js\";\n\nexport const millisecond = timeInterval(() => {\n  // noop\n}, (date, step) => {\n  date.setTime(+date + step);\n}, (start, end) => {\n  return end - start;\n});\n\n// An optimized implementation for this simple case.\nmillisecond.every = (k) => {\n  k = Math.floor(k);\n  if (!isFinite(k) || !(k > 0)) return null;\n  if (!(k > 1)) return millisecond;\n  return timeInterval((date) => {\n    date.setTime(Math.floor(date / k) * k);\n  }, (date, step) => {\n    date.setTime(+date + step * k);\n  }, (start, end) => {\n    return (end - start) / k;\n  });\n};\n\nexport const milliseconds = millisecond.range;\n","import {timeInterval} from \"./interval.js\";\nimport {durationSecond} from \"./duration.js\";\n\nexport const second = timeInterval((date) => {\n  date.setTime(date - date.getMilliseconds());\n}, (date, step) => {\n  date.setTime(+date + step * durationSecond);\n}, (start, end) => {\n  return (end - start) / durationSecond;\n}, (date) => {\n  return date.getUTCSeconds();\n});\n\nexport const seconds = second.range;\n","import {timeInterval} from \"./interval.js\";\nimport {durationMinute, durationSecond} from \"./duration.js\";\n\nexport const timeMinute = timeInterval((date) => {\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);\n}, (date, step) => {\n  date.setTime(+date + step * durationMinute);\n}, (start, end) => {\n  return (end - start) / durationMinute;\n}, (date) => {\n  return date.getMinutes();\n});\n\nexport const timeMinutes = timeMinute.range;\n\nexport const utcMinute = timeInterval((date) => {\n  date.setUTCSeconds(0, 0);\n}, (date, step) => {\n  date.setTime(+date + step * durationMinute);\n}, (start, end) => {\n  return (end - start) / durationMinute;\n}, (date) => {\n  return date.getUTCMinutes();\n});\n\nexport const utcMinutes = utcMinute.range;\n","import {timeInterval} from \"./interval.js\";\nimport {durationHour, durationMinute, durationSecond} from \"./duration.js\";\n\nexport const timeHour = timeInterval((date) => {\n  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);\n}, (date, step) => {\n  date.setTime(+date + step * durationHour);\n}, (start, end) => {\n  return (end - start) / durationHour;\n}, (date) => {\n  return date.getHours();\n});\n\nexport const timeHours = timeHour.range;\n\nexport const utcHour = timeInterval((date) => {\n  date.setUTCMinutes(0, 0, 0);\n}, (date, step) => {\n  date.setTime(+date + step * durationHour);\n}, (start, end) => {\n  return (end - start) / durationHour;\n}, (date) => {\n  return date.getUTCHours();\n});\n\nexport const utcHours = utcHour.range;\n","import {timeInterval} from \"./interval.js\";\nimport {durationDay, durationMinute} from \"./duration.js\";\n\nexport const timeDay = timeInterval(\n  date => date.setHours(0, 0, 0, 0),\n  (date, step) => date.setDate(date.getDate() + step),\n  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,\n  date => date.getDate() - 1\n);\n\nexport const timeDays = timeDay.range;\n\nexport const utcDay = timeInterval((date) => {\n  date.setUTCHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setUTCDate(date.getUTCDate() + step);\n}, (start, end) => {\n  return (end - start) / durationDay;\n}, (date) => {\n  return date.getUTCDate() - 1;\n});\n\nexport const utcDays = utcDay.range;\n\nexport const unixDay = timeInterval((date) => {\n  date.setUTCHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setUTCDate(date.getUTCDate() + step);\n}, (start, end) => {\n  return (end - start) / durationDay;\n}, (date) => {\n  return Math.floor(date / durationDay);\n});\n\nexport const unixDays = unixDay.range;\n","import {timeInterval} from \"./interval.js\";\nimport {durationMinute, durationWeek} from \"./duration.js\";\n\nfunction timeWeekday(i) {\n  return timeInterval((date) => {\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n    date.setHours(0, 0, 0, 0);\n  }, (date, step) => {\n    date.setDate(date.getDate() + step * 7);\n  }, (start, end) => {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n  });\n}\n\nexport const timeSunday = timeWeekday(0);\nexport const timeMonday = timeWeekday(1);\nexport const timeTuesday = timeWeekday(2);\nexport const timeWednesday = timeWeekday(3);\nexport const timeThursday = timeWeekday(4);\nexport const timeFriday = timeWeekday(5);\nexport const timeSaturday = timeWeekday(6);\n\nexport const timeSundays = timeSunday.range;\nexport const timeMondays = timeMonday.range;\nexport const timeTuesdays = timeTuesday.range;\nexport const timeWednesdays = timeWednesday.range;\nexport const timeThursdays = timeThursday.range;\nexport const timeFridays = timeFriday.range;\nexport const timeSaturdays = timeSaturday.range;\n\nfunction utcWeekday(i) {\n  return timeInterval((date) => {\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n    date.setUTCHours(0, 0, 0, 0);\n  }, (date, step) => {\n    date.setUTCDate(date.getUTCDate() + step * 7);\n  }, (start, end) => {\n    return (end - start) / durationWeek;\n  });\n}\n\nexport const utcSunday = utcWeekday(0);\nexport const utcMonday = utcWeekday(1);\nexport const utcTuesday = utcWeekday(2);\nexport const utcWednesday = utcWeekday(3);\nexport const utcThursday = utcWeekday(4);\nexport const utcFriday = utcWeekday(5);\nexport const utcSaturday = utcWeekday(6);\n\nexport const utcSundays = utcSunday.range;\nexport const utcMondays = utcMonday.range;\nexport const utcTuesdays = utcTuesday.range;\nexport const utcWednesdays = utcWednesday.range;\nexport const utcThursdays = utcThursday.range;\nexport const utcFridays = utcFriday.range;\nexport const utcSaturdays = utcSaturday.range;\n","import {timeInterval} from \"./interval.js\";\n\nexport const timeMonth = timeInterval((date) => {\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setMonth(date.getMonth() + step);\n}, (start, end) => {\n  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;\n}, (date) => {\n  return date.getMonth();\n});\n\nexport const timeMonths = timeMonth.range;\n\nexport const utcMonth = timeInterval((date) => {\n  date.setUTCDate(1);\n  date.setUTCHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setUTCMonth(date.getUTCMonth() + step);\n}, (start, end) => {\n  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;\n}, (date) => {\n  return date.getUTCMonth();\n});\n\nexport const utcMonths = utcMonth.range;\n","import {timeInterval} from \"./interval.js\";\n\nexport const timeYear = timeInterval((date) => {\n  date.setMonth(0, 1);\n  date.setHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setFullYear(date.getFullYear() + step);\n}, (start, end) => {\n  return end.getFullYear() - start.getFullYear();\n}, (date) => {\n  return date.getFullYear();\n});\n\n// An optimized implementation for this simple case.\ntimeYear.every = (k) => {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, (date, step) => {\n    date.setFullYear(date.getFullYear() + step * k);\n  });\n};\n\nexport const timeYears = timeYear.range;\n\nexport const utcYear = timeInterval((date) => {\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n}, (date, step) => {\n  date.setUTCFullYear(date.getUTCFullYear() + step);\n}, (start, end) => {\n  return end.getUTCFullYear() - start.getUTCFullYear();\n}, (date) => {\n  return date.getUTCFullYear();\n});\n\n// An optimized implementation for this simple case.\nutcYear.every = (k) => {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : timeInterval((date) => {\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, (date, step) => {\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\n  });\n};\n\nexport const utcYears = utcYear.range;\n","import {bisector, tickStep} from \"d3-array\";\nimport {durationDay, durationHour, durationMinute, durationMonth, durationSecond, durationWeek, durationYear} from \"./duration.js\";\nimport {millisecond} from \"./millisecond.js\";\nimport {second} from \"./second.js\";\nimport {timeMinute, utcMinute} from \"./minute.js\";\nimport {timeHour, utcHour} from \"./hour.js\";\nimport {timeDay, unixDay} from \"./day.js\";\nimport {timeSunday, utcSunday} from \"./week.js\";\nimport {timeMonth, utcMonth} from \"./month.js\";\nimport {timeYear, utcYear} from \"./year.js\";\n\nfunction ticker(year, month, week, day, hour, minute) {\n\n  const tickIntervals = [\n    [second,  1,      durationSecond],\n    [second,  5,  5 * durationSecond],\n    [second, 15, 15 * durationSecond],\n    [second, 30, 30 * durationSecond],\n    [minute,  1,      durationMinute],\n    [minute,  5,  5 * durationMinute],\n    [minute, 15, 15 * durationMinute],\n    [minute, 30, 30 * durationMinute],\n    [  hour,  1,      durationHour  ],\n    [  hour,  3,  3 * durationHour  ],\n    [  hour,  6,  6 * durationHour  ],\n    [  hour, 12, 12 * durationHour  ],\n    [   day,  1,      durationDay   ],\n    [   day,  2,  2 * durationDay   ],\n    [  week,  1,      durationWeek  ],\n    [ month,  1,      durationMonth ],\n    [ month,  3,  3 * durationMonth ],\n    [  year,  1,      durationYear  ]\n  ];\n\n  function ticks(start, stop, count) {\n    const reverse = stop < start;\n    if (reverse) [start, stop] = [stop, start];\n    const interval = count && typeof count.range === \"function\" ? count : tickInterval(start, stop, count);\n    const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop\n    return reverse ? ticks.reverse() : ticks;\n  }\n\n  function tickInterval(start, stop, count) {\n    const target = Math.abs(stop - start) / count;\n    const i = bisector(([,, step]) => step).right(tickIntervals, target);\n    if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));\n    if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));\n    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];\n    return t.every(step);\n  }\n\n  return [ticks, tickInterval];\n}\n\nconst [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);\nconst [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);\n\nexport {utcTicks, utcTickInterval, timeTicks, timeTickInterval};\n","var t0 = new Date,\n    t1 = new Date;\n\nexport default function newInterval(floori, offseti, count, field) {\n\n  function interval(date) {\n    return floori(date = arguments.length === 0 ? new Date : new Date(+date)), date;\n  }\n\n  interval.floor = function(date) {\n    return floori(date = new Date(+date)), date;\n  };\n\n  interval.ceil = function(date) {\n    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;\n  };\n\n  interval.round = function(date) {\n    var d0 = interval(date),\n        d1 = interval.ceil(date);\n    return date - d0 < d1 - date ? d0 : d1;\n  };\n\n  interval.offset = function(date, step) {\n    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;\n  };\n\n  interval.range = function(start, stop, step) {\n    var range = [], previous;\n    start = interval.ceil(start);\n    step = step == null ? 1 : Math.floor(step);\n    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date\n    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);\n    while (previous < start && start < stop);\n    return range;\n  };\n\n  interval.filter = function(test) {\n    return newInterval(function(date) {\n      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);\n    }, function(date, step) {\n      if (date >= date) {\n        if (step < 0) while (++step <= 0) {\n          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty\n        } else while (--step >= 0) {\n          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty\n        }\n      }\n    });\n  };\n\n  if (count) {\n    interval.count = function(start, end) {\n      t0.setTime(+start), t1.setTime(+end);\n      floori(t0), floori(t1);\n      return Math.floor(count(t0, t1));\n    };\n\n    interval.every = function(step) {\n      step = Math.floor(step);\n      return !isFinite(step) || !(step > 0) ? null\n          : !(step > 1) ? interval\n          : interval.filter(field\n              ? function(d) { return field(d) % step === 0; }\n              : function(d) { return interval.count(0, d) % step === 0; });\n    };\n  }\n\n  return interval;\n}\n","export const durationSecond = 1000;\nexport const durationMinute = durationSecond * 60;\nexport const durationHour = durationMinute * 60;\nexport const durationDay = durationHour * 24;\nexport const durationWeek = durationDay * 7;\nexport const durationMonth = durationDay * 30;\nexport const durationYear = durationDay * 365;\n","import interval from \"./interval.js\";\nimport {durationWeek} from \"./duration.js\";\n\nfunction utcWeekday(i) {\n  return interval(function(date) {\n    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCDate(date.getUTCDate() + step * 7);\n  }, function(start, end) {\n    return (end - start) / durationWeek;\n  });\n}\n\nexport var utcSunday = utcWeekday(0);\nexport var utcMonday = utcWeekday(1);\nexport var utcTuesday = utcWeekday(2);\nexport var utcWednesday = utcWeekday(3);\nexport var utcThursday = utcWeekday(4);\nexport var utcFriday = utcWeekday(5);\nexport var utcSaturday = utcWeekday(6);\n\nexport var utcSundays = utcSunday.range;\nexport var utcMondays = utcMonday.range;\nexport var utcTuesdays = utcTuesday.range;\nexport var utcWednesdays = utcWednesday.range;\nexport var utcThursdays = utcThursday.range;\nexport var utcFridays = utcFriday.range;\nexport var utcSaturdays = utcSaturday.range;\n","import interval from \"./interval.js\";\nimport {durationDay} from \"./duration.js\";\n\nvar utcDay = interval(function(date) {\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCDate(date.getUTCDate() + step);\n}, function(start, end) {\n  return (end - start) / durationDay;\n}, function(date) {\n  return date.getUTCDate() - 1;\n});\n\nexport default utcDay;\nexport var utcDays = utcDay.range;\n","import interval from \"./interval.js\";\nimport {durationMinute, durationWeek} from \"./duration.js\";\n\nfunction weekday(i) {\n  return interval(function(date) {\n    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setDate(date.getDate() + step * 7);\n  }, function(start, end) {\n    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;\n  });\n}\n\nexport var sunday = weekday(0);\nexport var monday = weekday(1);\nexport var tuesday = weekday(2);\nexport var wednesday = weekday(3);\nexport var thursday = weekday(4);\nexport var friday = weekday(5);\nexport var saturday = weekday(6);\n\nexport var sundays = sunday.range;\nexport var mondays = monday.range;\nexport var tuesdays = tuesday.range;\nexport var wednesdays = wednesday.range;\nexport var thursdays = thursday.range;\nexport var fridays = friday.range;\nexport var saturdays = saturday.range;\n","import interval from \"./interval.js\";\nimport {durationDay, durationMinute} from \"./duration.js\";\n\nvar day = interval(\n  date => date.setHours(0, 0, 0, 0),\n  (date, step) => date.setDate(date.getDate() + step),\n  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,\n  date => date.getDate() - 1\n);\n\nexport default day;\nexport var days = day.range;\n","import interval from \"./interval.js\";\n\nvar year = interval(function(date) {\n  date.setMonth(0, 1);\n  date.setHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setFullYear(date.getFullYear() + step);\n}, function(start, end) {\n  return end.getFullYear() - start.getFullYear();\n}, function(date) {\n  return date.getFullYear();\n});\n\n// An optimized implementation for this simple case.\nyear.every = function(k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function(date) {\n    date.setFullYear(Math.floor(date.getFullYear() / k) * k);\n    date.setMonth(0, 1);\n    date.setHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setFullYear(date.getFullYear() + step * k);\n  });\n};\n\nexport default year;\nexport var years = year.range;\n","import interval from \"./interval.js\";\n\nvar utcYear = interval(function(date) {\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n}, function(date, step) {\n  date.setUTCFullYear(date.getUTCFullYear() + step);\n}, function(start, end) {\n  return end.getUTCFullYear() - start.getUTCFullYear();\n}, function(date) {\n  return date.getUTCFullYear();\n});\n\n// An optimized implementation for this simple case.\nutcYear.every = function(k) {\n  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : interval(function(date) {\n    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);\n    date.setUTCMonth(0, 1);\n    date.setUTCHours(0, 0, 0, 0);\n  }, function(date, step) {\n    date.setUTCFullYear(date.getUTCFullYear() + step * k);\n  });\n};\n\nexport default utcYear;\nexport var utcYears = utcYear.range;\n","import {\n  timeDay,\n  timeSunday,\n  timeMonday,\n  timeThursday,\n  timeYear,\n  utcDay,\n  utcSunday,\n  utcMonday,\n  utcThursday,\n  utcYear\n} from \"d3-time\";\n\nfunction localDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);\n    date.setFullYear(d.y);\n    return date;\n  }\n  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);\n}\n\nfunction utcDate(d) {\n  if (0 <= d.y && d.y < 100) {\n    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));\n    date.setUTCFullYear(d.y);\n    return date;\n  }\n  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));\n}\n\nfunction newDate(y, m, d) {\n  return {y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0};\n}\n\nexport default function formatLocale(locale) {\n  var locale_dateTime = locale.dateTime,\n      locale_date = locale.date,\n      locale_time = locale.time,\n      locale_periods = locale.periods,\n      locale_weekdays = locale.days,\n      locale_shortWeekdays = locale.shortDays,\n      locale_months = locale.months,\n      locale_shortMonths = locale.shortMonths;\n\n  var periodRe = formatRe(locale_periods),\n      periodLookup = formatLookup(locale_periods),\n      weekdayRe = formatRe(locale_weekdays),\n      weekdayLookup = formatLookup(locale_weekdays),\n      shortWeekdayRe = formatRe(locale_shortWeekdays),\n      shortWeekdayLookup = formatLookup(locale_shortWeekdays),\n      monthRe = formatRe(locale_months),\n      monthLookup = formatLookup(locale_months),\n      shortMonthRe = formatRe(locale_shortMonths),\n      shortMonthLookup = formatLookup(locale_shortMonths);\n\n  var formats = {\n    \"a\": formatShortWeekday,\n    \"A\": formatWeekday,\n    \"b\": formatShortMonth,\n    \"B\": formatMonth,\n    \"c\": null,\n    \"d\": formatDayOfMonth,\n    \"e\": formatDayOfMonth,\n    \"f\": formatMicroseconds,\n    \"g\": formatYearISO,\n    \"G\": formatFullYearISO,\n    \"H\": formatHour24,\n    \"I\": formatHour12,\n    \"j\": formatDayOfYear,\n    \"L\": formatMilliseconds,\n    \"m\": formatMonthNumber,\n    \"M\": formatMinutes,\n    \"p\": formatPeriod,\n    \"q\": formatQuarter,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatSeconds,\n    \"u\": formatWeekdayNumberMonday,\n    \"U\": formatWeekNumberSunday,\n    \"V\": formatWeekNumberISO,\n    \"w\": formatWeekdayNumberSunday,\n    \"W\": formatWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatYear,\n    \"Y\": formatFullYear,\n    \"Z\": formatZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var utcFormats = {\n    \"a\": formatUTCShortWeekday,\n    \"A\": formatUTCWeekday,\n    \"b\": formatUTCShortMonth,\n    \"B\": formatUTCMonth,\n    \"c\": null,\n    \"d\": formatUTCDayOfMonth,\n    \"e\": formatUTCDayOfMonth,\n    \"f\": formatUTCMicroseconds,\n    \"g\": formatUTCYearISO,\n    \"G\": formatUTCFullYearISO,\n    \"H\": formatUTCHour24,\n    \"I\": formatUTCHour12,\n    \"j\": formatUTCDayOfYear,\n    \"L\": formatUTCMilliseconds,\n    \"m\": formatUTCMonthNumber,\n    \"M\": formatUTCMinutes,\n    \"p\": formatUTCPeriod,\n    \"q\": formatUTCQuarter,\n    \"Q\": formatUnixTimestamp,\n    \"s\": formatUnixTimestampSeconds,\n    \"S\": formatUTCSeconds,\n    \"u\": formatUTCWeekdayNumberMonday,\n    \"U\": formatUTCWeekNumberSunday,\n    \"V\": formatUTCWeekNumberISO,\n    \"w\": formatUTCWeekdayNumberSunday,\n    \"W\": formatUTCWeekNumberMonday,\n    \"x\": null,\n    \"X\": null,\n    \"y\": formatUTCYear,\n    \"Y\": formatUTCFullYear,\n    \"Z\": formatUTCZone,\n    \"%\": formatLiteralPercent\n  };\n\n  var parses = {\n    \"a\": parseShortWeekday,\n    \"A\": parseWeekday,\n    \"b\": parseShortMonth,\n    \"B\": parseMonth,\n    \"c\": parseLocaleDateTime,\n    \"d\": parseDayOfMonth,\n    \"e\": parseDayOfMonth,\n    \"f\": parseMicroseconds,\n    \"g\": parseYear,\n    \"G\": parseFullYear,\n    \"H\": parseHour24,\n    \"I\": parseHour24,\n    \"j\": parseDayOfYear,\n    \"L\": parseMilliseconds,\n    \"m\": parseMonthNumber,\n    \"M\": parseMinutes,\n    \"p\": parsePeriod,\n    \"q\": parseQuarter,\n    \"Q\": parseUnixTimestamp,\n    \"s\": parseUnixTimestampSeconds,\n    \"S\": parseSeconds,\n    \"u\": parseWeekdayNumberMonday,\n    \"U\": parseWeekNumberSunday,\n    \"V\": parseWeekNumberISO,\n    \"w\": parseWeekdayNumberSunday,\n    \"W\": parseWeekNumberMonday,\n    \"x\": parseLocaleDate,\n    \"X\": parseLocaleTime,\n    \"y\": parseYear,\n    \"Y\": parseFullYear,\n    \"Z\": parseZone,\n    \"%\": parseLiteralPercent\n  };\n\n  // These recursive directive definitions must be deferred.\n  formats.x = newFormat(locale_date, formats);\n  formats.X = newFormat(locale_time, formats);\n  formats.c = newFormat(locale_dateTime, formats);\n  utcFormats.x = newFormat(locale_date, utcFormats);\n  utcFormats.X = newFormat(locale_time, utcFormats);\n  utcFormats.c = newFormat(locale_dateTime, utcFormats);\n\n  function newFormat(specifier, formats) {\n    return function(date) {\n      var string = [],\n          i = -1,\n          j = 0,\n          n = specifier.length,\n          c,\n          pad,\n          format;\n\n      if (!(date instanceof Date)) date = new Date(+date);\n\n      while (++i < n) {\n        if (specifier.charCodeAt(i) === 37) {\n          string.push(specifier.slice(j, i));\n          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);\n          else pad = c === \"e\" ? \" \" : \"0\";\n          if (format = formats[c]) c = format(date, pad);\n          string.push(c);\n          j = i + 1;\n        }\n      }\n\n      string.push(specifier.slice(j, i));\n      return string.join(\"\");\n    };\n  }\n\n  function newParse(specifier, Z) {\n    return function(string) {\n      var d = newDate(1900, undefined, 1),\n          i = parseSpecifier(d, specifier, string += \"\", 0),\n          week, day;\n      if (i != string.length) return null;\n\n      // If a UNIX timestamp is specified, return it.\n      if (\"Q\" in d) return new Date(d.Q);\n      if (\"s\" in d) return new Date(d.s * 1000 + (\"L\" in d ? d.L : 0));\n\n      // If this is utcParse, never use the local timezone.\n      if (Z && !(\"Z\" in d)) d.Z = 0;\n\n      // The am-pm flag is 0 for AM, and 1 for PM.\n      if (\"p\" in d) d.H = d.H % 12 + d.p * 12;\n\n      // If the month was not specified, inherit from the quarter.\n      if (d.m === undefined) d.m = \"q\" in d ? d.q : 0;\n\n      // Convert day-of-week and week-of-year to day-of-year.\n      if (\"V\" in d) {\n        if (d.V < 1 || d.V > 53) return null;\n        if (!(\"w\" in d)) d.w = 1;\n        if (\"Z\" in d) {\n          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();\n          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);\n          week = utcDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getUTCFullYear();\n          d.m = week.getUTCMonth();\n          d.d = week.getUTCDate() + (d.w + 6) % 7;\n        } else {\n          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();\n          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);\n          week = timeDay.offset(week, (d.V - 1) * 7);\n          d.y = week.getFullYear();\n          d.m = week.getMonth();\n          d.d = week.getDate() + (d.w + 6) % 7;\n        }\n      } else if (\"W\" in d || \"U\" in d) {\n        if (!(\"w\" in d)) d.w = \"u\" in d ? d.u % 7 : \"W\" in d ? 1 : 0;\n        day = \"Z\" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();\n        d.m = 0;\n        d.d = \"W\" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;\n      }\n\n      // If a time zone is specified, all fields are interpreted as UTC and then\n      // offset according to the specified time zone.\n      if (\"Z\" in d) {\n        d.H += d.Z / 100 | 0;\n        d.M += d.Z % 100;\n        return utcDate(d);\n      }\n\n      // Otherwise, all fields are in local time.\n      return localDate(d);\n    };\n  }\n\n  function parseSpecifier(d, specifier, string, j) {\n    var i = 0,\n        n = specifier.length,\n        m = string.length,\n        c,\n        parse;\n\n    while (i < n) {\n      if (j >= m) return -1;\n      c = specifier.charCodeAt(i++);\n      if (c === 37) {\n        c = specifier.charAt(i++);\n        parse = parses[c in pads ? specifier.charAt(i++) : c];\n        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;\n      } else if (c != string.charCodeAt(j++)) {\n        return -1;\n      }\n    }\n\n    return j;\n  }\n\n  function parsePeriod(d, string, i) {\n    var n = periodRe.exec(string.slice(i));\n    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseShortWeekday(d, string, i) {\n    var n = shortWeekdayRe.exec(string.slice(i));\n    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseWeekday(d, string, i) {\n    var n = weekdayRe.exec(string.slice(i));\n    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseShortMonth(d, string, i) {\n    var n = shortMonthRe.exec(string.slice(i));\n    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseMonth(d, string, i) {\n    var n = monthRe.exec(string.slice(i));\n    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;\n  }\n\n  function parseLocaleDateTime(d, string, i) {\n    return parseSpecifier(d, locale_dateTime, string, i);\n  }\n\n  function parseLocaleDate(d, string, i) {\n    return parseSpecifier(d, locale_date, string, i);\n  }\n\n  function parseLocaleTime(d, string, i) {\n    return parseSpecifier(d, locale_time, string, i);\n  }\n\n  function formatShortWeekday(d) {\n    return locale_shortWeekdays[d.getDay()];\n  }\n\n  function formatWeekday(d) {\n    return locale_weekdays[d.getDay()];\n  }\n\n  function formatShortMonth(d) {\n    return locale_shortMonths[d.getMonth()];\n  }\n\n  function formatMonth(d) {\n    return locale_months[d.getMonth()];\n  }\n\n  function formatPeriod(d) {\n    return locale_periods[+(d.getHours() >= 12)];\n  }\n\n  function formatQuarter(d) {\n    return 1 + ~~(d.getMonth() / 3);\n  }\n\n  function formatUTCShortWeekday(d) {\n    return locale_shortWeekdays[d.getUTCDay()];\n  }\n\n  function formatUTCWeekday(d) {\n    return locale_weekdays[d.getUTCDay()];\n  }\n\n  function formatUTCShortMonth(d) {\n    return locale_shortMonths[d.getUTCMonth()];\n  }\n\n  function formatUTCMonth(d) {\n    return locale_months[d.getUTCMonth()];\n  }\n\n  function formatUTCPeriod(d) {\n    return locale_periods[+(d.getUTCHours() >= 12)];\n  }\n\n  function formatUTCQuarter(d) {\n    return 1 + ~~(d.getUTCMonth() / 3);\n  }\n\n  return {\n    format: function(specifier) {\n      var f = newFormat(specifier += \"\", formats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    parse: function(specifier) {\n      var p = newParse(specifier += \"\", false);\n      p.toString = function() { return specifier; };\n      return p;\n    },\n    utcFormat: function(specifier) {\n      var f = newFormat(specifier += \"\", utcFormats);\n      f.toString = function() { return specifier; };\n      return f;\n    },\n    utcParse: function(specifier) {\n      var p = newParse(specifier += \"\", true);\n      p.toString = function() { return specifier; };\n      return p;\n    }\n  };\n}\n\nvar pads = {\"-\": \"\", \"_\": \" \", \"0\": \"0\"},\n    numberRe = /^\\s*\\d+/, // note: ignores next directive\n    percentRe = /^%/,\n    requoteRe = /[\\\\^$*+?|[\\]().{}]/g;\n\nfunction pad(value, fill, width) {\n  var sign = value < 0 ? \"-\" : \"\",\n      string = (sign ? -value : value) + \"\",\n      length = string.length;\n  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);\n}\n\nfunction requote(s) {\n  return s.replace(requoteRe, \"\\\\$&\");\n}\n\nfunction formatRe(names) {\n  return new RegExp(\"^(?:\" + names.map(requote).join(\"|\") + \")\", \"i\");\n}\n\nfunction formatLookup(names) {\n  return new Map(names.map((name, i) => [name.toLowerCase(), i]));\n}\n\nfunction parseWeekdayNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.w = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekdayNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.u = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberSunday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.U = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberISO(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.V = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseWeekNumberMonday(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.W = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseFullYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 4));\n  return n ? (d.y = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;\n}\n\nfunction parseZone(d, string, i) {\n  var n = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(string.slice(i, i + 6));\n  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || \"00\")), i + n[0].length) : -1;\n}\n\nfunction parseQuarter(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 1));\n  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;\n}\n\nfunction parseMonthNumber(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;\n}\n\nfunction parseDayOfMonth(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseDayOfYear(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseHour24(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.H = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMinutes(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.M = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 2));\n  return n ? (d.S = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMilliseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 3));\n  return n ? (d.L = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseMicroseconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i, i + 6));\n  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;\n}\n\nfunction parseLiteralPercent(d, string, i) {\n  var n = percentRe.exec(string.slice(i, i + 1));\n  return n ? i + n[0].length : -1;\n}\n\nfunction parseUnixTimestamp(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.Q = +n[0], i + n[0].length) : -1;\n}\n\nfunction parseUnixTimestampSeconds(d, string, i) {\n  var n = numberRe.exec(string.slice(i));\n  return n ? (d.s = +n[0], i + n[0].length) : -1;\n}\n\nfunction formatDayOfMonth(d, p) {\n  return pad(d.getDate(), p, 2);\n}\n\nfunction formatHour24(d, p) {\n  return pad(d.getHours(), p, 2);\n}\n\nfunction formatHour12(d, p) {\n  return pad(d.getHours() % 12 || 12, p, 2);\n}\n\nfunction formatDayOfYear(d, p) {\n  return pad(1 + timeDay.count(timeYear(d), d), p, 3);\n}\n\nfunction formatMilliseconds(d, p) {\n  return pad(d.getMilliseconds(), p, 3);\n}\n\nfunction formatMicroseconds(d, p) {\n  return formatMilliseconds(d, p) + \"000\";\n}\n\nfunction formatMonthNumber(d, p) {\n  return pad(d.getMonth() + 1, p, 2);\n}\n\nfunction formatMinutes(d, p) {\n  return pad(d.getMinutes(), p, 2);\n}\n\nfunction formatSeconds(d, p) {\n  return pad(d.getSeconds(), p, 2);\n}\n\nfunction formatWeekdayNumberMonday(d) {\n  var day = d.getDay();\n  return day === 0 ? 7 : day;\n}\n\nfunction formatWeekNumberSunday(d, p) {\n  return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);\n}\n\nfunction dISO(d) {\n  var day = d.getDay();\n  return (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);\n}\n\nfunction formatWeekNumberISO(d, p) {\n  d = dISO(d);\n  return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);\n}\n\nfunction formatWeekdayNumberSunday(d) {\n  return d.getDay();\n}\n\nfunction formatWeekNumberMonday(d, p) {\n  return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);\n}\n\nfunction formatYear(d, p) {\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatYearISO(d, p) {\n  d = dISO(d);\n  return pad(d.getFullYear() % 100, p, 2);\n}\n\nfunction formatFullYear(d, p) {\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatFullYearISO(d, p) {\n  var day = d.getDay();\n  d = (day >= 4 || day === 0) ? timeThursday(d) : timeThursday.ceil(d);\n  return pad(d.getFullYear() % 10000, p, 4);\n}\n\nfunction formatZone(d) {\n  var z = d.getTimezoneOffset();\n  return (z > 0 ? \"-\" : (z *= -1, \"+\"))\n      + pad(z / 60 | 0, \"0\", 2)\n      + pad(z % 60, \"0\", 2);\n}\n\nfunction formatUTCDayOfMonth(d, p) {\n  return pad(d.getUTCDate(), p, 2);\n}\n\nfunction formatUTCHour24(d, p) {\n  return pad(d.getUTCHours(), p, 2);\n}\n\nfunction formatUTCHour12(d, p) {\n  return pad(d.getUTCHours() % 12 || 12, p, 2);\n}\n\nfunction formatUTCDayOfYear(d, p) {\n  return pad(1 + utcDay.count(utcYear(d), d), p, 3);\n}\n\nfunction formatUTCMilliseconds(d, p) {\n  return pad(d.getUTCMilliseconds(), p, 3);\n}\n\nfunction formatUTCMicroseconds(d, p) {\n  return formatUTCMilliseconds(d, p) + \"000\";\n}\n\nfunction formatUTCMonthNumber(d, p) {\n  return pad(d.getUTCMonth() + 1, p, 2);\n}\n\nfunction formatUTCMinutes(d, p) {\n  return pad(d.getUTCMinutes(), p, 2);\n}\n\nfunction formatUTCSeconds(d, p) {\n  return pad(d.getUTCSeconds(), p, 2);\n}\n\nfunction formatUTCWeekdayNumberMonday(d) {\n  var dow = d.getUTCDay();\n  return dow === 0 ? 7 : dow;\n}\n\nfunction formatUTCWeekNumberSunday(d, p) {\n  return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);\n}\n\nfunction UTCdISO(d) {\n  var day = d.getUTCDay();\n  return (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\n}\n\nfunction formatUTCWeekNumberISO(d, p) {\n  d = UTCdISO(d);\n  return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);\n}\n\nfunction formatUTCWeekdayNumberSunday(d) {\n  return d.getUTCDay();\n}\n\nfunction formatUTCWeekNumberMonday(d, p) {\n  return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);\n}\n\nfunction formatUTCYear(d, p) {\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCYearISO(d, p) {\n  d = UTCdISO(d);\n  return pad(d.getUTCFullYear() % 100, p, 2);\n}\n\nfunction formatUTCFullYear(d, p) {\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCFullYearISO(d, p) {\n  var day = d.getUTCDay();\n  d = (day >= 4 || day === 0) ? utcThursday(d) : utcThursday.ceil(d);\n  return pad(d.getUTCFullYear() % 10000, p, 4);\n}\n\nfunction formatUTCZone() {\n  return \"+0000\";\n}\n\nfunction formatLiteralPercent() {\n  return \"%\";\n}\n\nfunction formatUnixTimestamp(d) {\n  return +d;\n}\n\nfunction formatUnixTimestampSeconds(d) {\n  return Math.floor(+d / 1000);\n}\n","export default function number(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var timeFormat;\nexport var timeParse;\nexport var utcFormat;\nexport var utcParse;\n\ndefaultLocale({\n  dateTime: \"%x, %X\",\n  date: \"%-m/%-d/%Y\",\n  time: \"%-I:%M:%S %p\",\n  periods: [\"AM\", \"PM\"],\n  days: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\n  shortDays: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  months: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  shortMonths: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  timeFormat = locale.format;\n  timeParse = locale.parse;\n  utcFormat = locale.utcFormat;\n  utcParse = locale.utcParse;\n  return locale;\n}\n","import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n","export default function number(x) {\n  return +x;\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n","export default function constants(x) {\n  return function() {\n    return x;\n  };\n}\n","export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === \"function\") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === \"function\") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": (x, p) => (x * 100).toFixed(p),\n  \"b\": (x) => Math.round(x).toString(2),\n  \"c\": (x) => x + \"\",\n  \"d\": formatDecimal,\n  \"e\": (x, p) => x.toExponential(p),\n  \"f\": (x, p) => x.toFixed(p),\n  \"g\": (x, p) => x.toPrecision(p),\n  \"o\": (x) => Math.round(x).toString(8),\n  \"p\": (x, p) => formatRounded(x * 100, p),\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": (x) => Math.round(x).toString(16).toUpperCase(),\n  \"x\": (x) => Math.round(x).toString(16)\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport tickFormat from \"./tickFormat.js\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start\n        d[i1] = stop\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","export default function range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","export class InternMap extends Map {\n  constructor(entries, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (entries != null) for (const [key, value] of entries) this.set(key, value);\n  }\n  get(key) {\n    return super.get(intern_get(this, key));\n  }\n  has(key) {\n    return super.has(intern_get(this, key));\n  }\n  set(key, value) {\n    return super.set(intern_set(this, key), value);\n  }\n  delete(key) {\n    return super.delete(intern_delete(this, key));\n  }\n}\n\nexport class InternSet extends Set {\n  constructor(values, key = keyof) {\n    super();\n    Object.defineProperties(this, {_intern: {value: new Map()}, _key: {value: key}});\n    if (values != null) for (const value of values) this.add(value);\n  }\n  has(value) {\n    return super.has(intern_get(this, value));\n  }\n  add(value) {\n    return super.add(intern_set(this, value));\n  }\n  delete(value) {\n    return super.delete(intern_delete(this, value));\n  }\n}\n\nfunction intern_get({_intern, _key}, value) {\n  const key = _key(value);\n  return _intern.has(key) ? _intern.get(key) : value;\n}\n\nfunction intern_set({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) return _intern.get(key);\n  _intern.set(key, value);\n  return value;\n}\n\nfunction intern_delete({_intern, _key}, value) {\n  const key = _key(value);\n  if (_intern.has(key)) {\n    value = _intern.get(key);\n    _intern.delete(key);\n  }\n  return value;\n}\n\nfunction keyof(value) {\n  return value !== null && typeof value === \"object\" ? value.valueOf() : value;\n}\n","import {InternMap} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport const implicit = Symbol(\"implicit\");\n\nexport default function ordinal() {\n  var index = new InternMap(),\n      domain = [],\n      range = [],\n      unknown = implicit;\n\n  function scale(d) {\n    let i = index.get(d);\n    if (i === undefined) {\n      if (unknown !== implicit) return unknown;\n      index.set(d, i = domain.push(d) - 1);\n    }\n    return range[i % range.length];\n  }\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [], index = new InternMap();\n    for (const value of _) {\n      if (index.has(value)) continue;\n      index.set(value, domain.push(value) - 1);\n    }\n    return scale;\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), scale) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.copy = function() {\n    return ordinal(domain, range).unknown(unknown);\n  };\n\n  initRange.apply(scale, arguments);\n\n  return scale;\n}\n","import {range as sequence} from \"d3-array\";\nimport {initRange} from \"./init.js\";\nimport ordinal from \"./ordinal.js\";\n\nexport default function band() {\n  var scale = ordinal().unknown(undefined),\n      domain = scale.domain,\n      ordinalRange = scale.range,\n      r0 = 0,\n      r1 = 1,\n      step,\n      bandwidth,\n      round = false,\n      paddingInner = 0,\n      paddingOuter = 0,\n      align = 0.5;\n\n  delete scale.unknown;\n\n  function rescale() {\n    var n = domain().length,\n        reverse = r1 < r0,\n        start = reverse ? r1 : r0,\n        stop = reverse ? r0 : r1;\n    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);\n    if (round) step = Math.floor(step);\n    start += (stop - start - step * (n - paddingInner)) * align;\n    bandwidth = step * (1 - paddingInner);\n    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);\n    var values = sequence(n).map(function(i) { return start + step * i; });\n    return ordinalRange(reverse ? values.reverse() : values);\n  }\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain(_), rescale()) : domain();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];\n  };\n\n  scale.rangeRound = function(_) {\n    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();\n  };\n\n  scale.bandwidth = function() {\n    return bandwidth;\n  };\n\n  scale.step = function() {\n    return step;\n  };\n\n  scale.round = function(_) {\n    return arguments.length ? (round = !!_, rescale()) : round;\n  };\n\n  scale.padding = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;\n  };\n\n  scale.paddingInner = function(_) {\n    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;\n  };\n\n  scale.paddingOuter = function(_) {\n    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;\n  };\n\n  scale.align = function(_) {\n    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;\n  };\n\n  scale.copy = function() {\n    return band(domain(), [r0, r1])\n        .round(round)\n        .paddingInner(paddingInner)\n        .paddingOuter(paddingOuter)\n        .align(align);\n  };\n\n  return initRange.apply(rescale(), arguments);\n}\n\nfunction pointish(scale) {\n  var copy = scale.copy;\n\n  scale.padding = scale.paddingOuter;\n  delete scale.paddingInner;\n  delete scale.paddingOuter;\n\n  scale.copy = function() {\n    return pointish(copy());\n  };\n\n  return scale;\n}\n\nexport function point() {\n  return pointish(band.apply(null, arguments).paddingInner(1));\n}\n","import max from \"./max.js\";\nimport maxIndex from \"./maxIndex.js\";\nimport min from \"./min.js\";\nimport minIndex from \"./minIndex.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\nimport {ascendingDefined} from \"./sort.js\";\nimport greatest from \"./greatest.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length) || isNaN(p = +p)) return;\n  if (p <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length) || isNaN(p = +p)) return;\n  if (p <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileIndex(values, p, valueof = number) {\n  if (isNaN(p = +p)) return;\n  numbers = Float64Array.from(values, (_, i) => number(valueof(values[i], i, values)));\n  if (p <= 0) return minIndex(numbers);\n  if (p >= 1) return maxIndex(numbers);\n  var numbers,\n      index = Uint32Array.from(values, (_, i) => i),\n      j = numbers.length - 1,\n      i = Math.floor(j * p);\n  quickselect(index, i, 0, j, (i, j) => ascendingDefined(numbers[i], numbers[j]));\n  i = greatest(index.subarray(0, i + 1), (i) => numbers[i]);\n  return i >= 0 ? i : -1;\n}\n","import {ascending, bisect, quantileSorted as threshold} from \"d3-array\";\nimport {initRange} from \"./init.js\";\n\nexport default function quantile() {\n  var domain = [],\n      range = [],\n      thresholds = [],\n      unknown;\n\n  function rescale() {\n    var i = 0, n = Math.max(1, range.length);\n    thresholds = new Array(n - 1);\n    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : range[bisect(thresholds, x)];\n  }\n\n  scale.invertExtent = function(y) {\n    var i = range.indexOf(y);\n    return i < 0 ? [NaN, NaN] : [\n      i > 0 ? thresholds[i - 1] : domain[0],\n      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]\n    ];\n  };\n\n  scale.domain = function(_) {\n    if (!arguments.length) return domain.slice();\n    domain = [];\n    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);\n    domain.sort(ascending);\n    return rescale();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  scale.quantiles = function() {\n    return thresholds.slice();\n  };\n\n  scale.copy = function() {\n    return quantile()\n        .domain(domain)\n        .range(range)\n        .unknown(unknown);\n  };\n\n  return initRange.apply(scale, arguments);\n}\n","import * as i0 from '@angular/core';\nimport { PLATFORM_ID, Component, ViewEncapsulation, Inject, Input, ViewChild, HostBinding, HostListener, Injectable, ChangeDetectionStrategy, EventEmitter, Output, Directive, NgModule, ContentChild } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { isPlatformBrowser, isPlatformServer, CommonModule } from '@angular/common';\nimport { __decorate } from 'tslib';\nimport { DomPortalOutlet, ComponentPortal } from '@angular/cdk/portal';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { trigger, transition, style, animate } from '@angular/animations';\nimport { select } from 'd3-selection';\nimport { brushX } from 'd3-brush';\nimport { scaleTime, scaleLinear, scalePoint, scaleOrdinal, scaleQuantile, scaleBand } from 'd3-scale';\nimport { area, curveLinear, line, arc, lineRadial, curveCardinalClosed, pie } from 'd3-shape';\nimport { range, min, max, quantile } from 'd3-array';\nimport { interpolate } from 'd3-interpolate';\nimport { easeSinInOut } from 'd3-ease';\nimport rfdc from 'rfdc';\nimport { format } from 'd3-format';\nimport * as d3_color from 'd3-color';\nimport { treemap, stratify } from 'd3-hierarchy';\nimport { sankey, sankeyLeft, sankeyLinkHorizontal } from 'd3-sankey';\nimport { timeFormat } from 'd3-time-format';\n\n/**\n * Throttle a function\n *\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    let context;\n    let args;\n    let result;\n    let timeout = null;\n    let previous = 0;\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return function () {\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        context = this;\n        // eslint-disable-next-line prefer-rest-params\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nfunction throttleable(duration, options) {\n    return function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            }\n        };\n    };\n}\n\nvar PlacementTypes;\n(function (PlacementTypes) {\n    PlacementTypes[\"Top\"] = \"top\";\n    PlacementTypes[\"Bottom\"] = \"bottom\";\n    PlacementTypes[\"Left\"] = \"left\";\n    PlacementTypes[\"Right\"] = \"right\";\n    PlacementTypes[\"Center\"] = \"center\";\n})(PlacementTypes || (PlacementTypes = {}));\n\nconst caretOffset = 7;\nfunction verticalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Top) {\n        return elDimensions.top - caretOffset;\n    }\n    if (alignment === PlacementTypes.Bottom) {\n        return elDimensions.top + elDimensions.height - popoverDimensions.height + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.top + elDimensions.height / 2 - popoverDimensions.height / 2;\n    }\n    return undefined;\n}\nfunction horizontalPosition(elDimensions, popoverDimensions, alignment) {\n    if (alignment === PlacementTypes.Left) {\n        return elDimensions.left - caretOffset;\n    }\n    if (alignment === PlacementTypes.Right) {\n        return elDimensions.left + elDimensions.width - popoverDimensions.width + caretOffset;\n    }\n    if (alignment === PlacementTypes.Center) {\n        return elDimensions.left + elDimensions.width / 2 - popoverDimensions.width / 2;\n    }\n    return undefined;\n}\n/**\n * Position helper for the popover directive.\n *\n * @export\n */\nclass PositionHelper {\n    /**\n     * Calculate vertical alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.height > window.innerHeight) {\n            result = window.innerHeight - popoverDimensions.height;\n        }\n        return result;\n    }\n    /**\n     * Calculate vertical caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateVerticalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Top) {\n            result = elDimensions.height / 2 - caretDimensions.height / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Bottom) {\n            result = popoverDimensions.height - elDimensions.height / 2 - caretDimensions.height / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.height / 2 - caretDimensions.height / 2;\n        }\n        const popoverPosition = verticalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.height > window.innerHeight) {\n            result += popoverPosition + popoverDimensions.height - window.innerHeight;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz alignment position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalAlignment(elDimensions, popoverDimensions, alignment) {\n        let result = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (result + popoverDimensions.width > window.innerWidth) {\n            result = window.innerWidth - popoverDimensions.width;\n        }\n        return result;\n    }\n    /**\n     * Calculate horz caret position\n     *\n     * @memberOf PositionHelper\n     */\n    static calculateHorizontalCaret(elDimensions, popoverDimensions, caretDimensions, alignment) {\n        let result;\n        if (alignment === PlacementTypes.Left) {\n            result = elDimensions.width / 2 - caretDimensions.width / 2 + caretOffset;\n        }\n        if (alignment === PlacementTypes.Right) {\n            result = popoverDimensions.width - elDimensions.width / 2 - caretDimensions.width / 2 - caretOffset;\n        }\n        if (alignment === PlacementTypes.Center) {\n            result = popoverDimensions.width / 2 - caretDimensions.width / 2;\n        }\n        const popoverPosition = horizontalPosition(elDimensions, popoverDimensions, alignment);\n        if (popoverPosition + popoverDimensions.width > window.innerWidth) {\n            result += popoverPosition + popoverDimensions.width - window.innerWidth;\n        }\n        return result;\n    }\n    /**\n     * Checks if the element's position should be flipped\n     *\n     * @memberOf PositionHelper\n     */\n    static shouldFlip(elDimensions, popoverDimensions, placement, spacing) {\n        let flip = false;\n        if (placement === PlacementTypes.Right) {\n            if (elDimensions.left + elDimensions.width + popoverDimensions.width + spacing > window.innerWidth) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Left) {\n            if (elDimensions.left - popoverDimensions.width - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Top) {\n            if (elDimensions.top - popoverDimensions.height - spacing < 0) {\n                flip = true;\n            }\n        }\n        if (placement === PlacementTypes.Bottom) {\n            if (elDimensions.top + elDimensions.height + popoverDimensions.height + spacing > window.innerHeight) {\n                flip = true;\n            }\n        }\n        return flip;\n    }\n    /**\n     * Position caret\n     *\n     * @memberOf PositionHelper\n     */\n    static positionCaret(placement, elmDim, hostDim, caretDimensions, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = -7;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = elmDim.width;\n            top = PositionHelper.calculateVerticalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = elmDim.height;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = -7;\n            left = PositionHelper.calculateHorizontalCaret(hostDim, elmDim, caretDimensions, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Position content\n     *\n     * @memberOf PositionHelper\n     */\n    static positionContent(placement, elmDim, hostDim, spacing, alignment) {\n        let top = 0;\n        let left = 0;\n        if (placement === PlacementTypes.Right) {\n            left = hostDim.left + hostDim.width + spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Left) {\n            left = hostDim.left - elmDim.width - spacing;\n            top = PositionHelper.calculateVerticalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Top) {\n            top = hostDim.top - elmDim.height - spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        else if (placement === PlacementTypes.Bottom) {\n            top = hostDim.top + hostDim.height + spacing;\n            left = PositionHelper.calculateHorizontalAlignment(hostDim, elmDim, alignment);\n        }\n        return { top, left };\n    }\n    /**\n     * Determine placement based on flip\n     *\n     * @memberOf PositionHelper\n     */\n    static determinePlacement(placement, elmDim, hostDim, spacing) {\n        const shouldFlip = PositionHelper.shouldFlip(hostDim, elmDim, placement, spacing);\n        if (shouldFlip) {\n            if (placement === PlacementTypes.Right) {\n                return PlacementTypes.Left;\n            }\n            else if (placement === PlacementTypes.Left) {\n                return PlacementTypes.Right;\n            }\n            else if (placement === PlacementTypes.Top) {\n                return PlacementTypes.Bottom;\n            }\n            else if (placement === PlacementTypes.Bottom) {\n                return PlacementTypes.Top;\n            }\n        }\n        return placement;\n    }\n}\n\nclass TooltipContentComponent {\n    constructor(element, renderer, platformId) {\n        this.element = element;\n        this.renderer = renderer;\n        this.platformId = platformId;\n    }\n    get cssClasses() {\n        let clz = 'ngx-charts-tooltip-content';\n        clz += ` position-${this.placement}`;\n        clz += ` type-${this.type}`;\n        clz += ` ${this.cssClass}`;\n        return clz;\n    }\n    ngAfterViewInit() {\n        setTimeout(this.position.bind(this));\n    }\n    position() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const nativeElm = this.element.nativeElement;\n        const hostDim = this.host.nativeElement.getBoundingClientRect();\n        // if no dims were found, never show\n        if (!hostDim.height && !hostDim.width)\n            return;\n        const elmDim = nativeElm.getBoundingClientRect();\n        this.checkFlip(hostDim, elmDim);\n        this.positionContent(nativeElm, hostDim, elmDim);\n        if (this.showCaret) {\n            this.positionCaret(hostDim, elmDim);\n        }\n        // animate its entry\n        setTimeout(() => this.renderer.addClass(nativeElm, 'animate'), 1);\n    }\n    positionContent(nativeElm, hostDim, elmDim) {\n        const { top, left } = PositionHelper.positionContent(this.placement, elmDim, hostDim, this.spacing, this.alignment);\n        this.renderer.setStyle(nativeElm, 'top', `${top}px`);\n        this.renderer.setStyle(nativeElm, 'left', `${left}px`);\n    }\n    positionCaret(hostDim, elmDim) {\n        const caretElm = this.caretElm.nativeElement;\n        const caretDimensions = caretElm.getBoundingClientRect();\n        const { top, left } = PositionHelper.positionCaret(this.placement, elmDim, hostDim, caretDimensions, this.alignment);\n        this.renderer.setStyle(caretElm, 'top', `${top}px`);\n        this.renderer.setStyle(caretElm, 'left', `${left}px`);\n    }\n    checkFlip(hostDim, elmDim) {\n        this.placement = PositionHelper.determinePlacement(this.placement, elmDim, hostDim, this.spacing);\n    }\n    onWindowResize() {\n        this.position();\n    }\n}\nTooltipContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipContentComponent, selector: \"ngx-tooltip-content\", inputs: { host: \"host\", showCaret: \"showCaret\", type: \"type\", placement: \"placement\", alignment: \"alignment\", spacing: \"spacing\", cssClass: \"cssClass\", title: \"title\", template: \"template\", context: \"context\" }, host: { listeners: { \"window:resize\": \"onWindowResize()\" }, properties: { \"class\": \"this.cssClasses\" } }, viewQueries: [{ propertyName: \"caretElm\", first: true, predicate: [\"caretElm\"], descendants: true }], ngImport: i0, template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], encapsulation: i0.ViewEncapsulation.None });\n__decorate([\n    throttleable(100)\n], TooltipContentComponent.prototype, \"onWindowResize\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipContentComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-tooltip-content', template: `\n    <div>\n      <span #caretElm [hidden]=\"!showCaret\" class=\"tooltip-caret position-{{ this.placement }}\"> </span>\n      <div class=\"tooltip-content\">\n        <span *ngIf=\"!title\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{ model: context }\"> </ng-template>\n        </span>\n        <span *ngIf=\"title\" [innerHTML]=\"title\"> </span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-tooltip-content{position:fixed;border-radius:3px;z-index:5000;display:block;font-weight:400;opacity:0;pointer-events:none!important}.ngx-charts-tooltip-content.type-popover{background:#fff;color:#060709;border:1px solid #72809b;box-shadow:0 1px 3px #0003,0 1px 1px #00000024,0 2px 1px -1px #0000001f;font-size:13px;padding:4px}.ngx-charts-tooltip-content.type-popover .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid #fff}.ngx-charts-tooltip-content.type-popover .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid #fff}.ngx-charts-tooltip-content.type-tooltip{color:#fff;background:rgba(0,0,0,.75);font-size:12px;padding:0 10px;text-align:center;pointer-events:auto}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-left{border-top:7px solid transparent;border-bottom:7px solid transparent;border-left:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-top{border-left:7px solid transparent;border-right:7px solid transparent;border-top:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-right{border-top:7px solid transparent;border-bottom:7px solid transparent;border-right:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content.type-tooltip .tooltip-caret.position-bottom{border-left:7px solid transparent;border-right:7px solid transparent;border-bottom:7px solid rgba(0,0,0,.75)}.ngx-charts-tooltip-content .tooltip-label{display:block;line-height:1em;padding:8px 5px 5px;font-size:1em}.ngx-charts-tooltip-content .tooltip-val{display:block;font-size:1.3em;line-height:1em;padding:0 5px 8px}.ngx-charts-tooltip-content .tooltip-caret{position:absolute;z-index:5001;width:0;height:0}.ngx-charts-tooltip-content.position-right{transform:translate(10px)}.ngx-charts-tooltip-content.position-left{transform:translate(-10px)}.ngx-charts-tooltip-content.position-top{transform:translateY(-10px)}.ngx-charts-tooltip-content.position-bottom{transform:translateY(10px)}.ngx-charts-tooltip-content.animate{opacity:1;transition:opacity .3s,transform .3s;transform:translate(0);pointer-events:auto}.area-tooltip-container{padding:5px 0;pointer-events:none}.tooltip-item{text-align:left;line-height:1.2em;padding:5px 0}.tooltip-item .tooltip-item-color{display:inline-block;height:12px;width:12px;margin-right:5px;color:#5b646b;border-radius:3px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { host: [{\n                type: Input\n            }], showCaret: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], placement: [{\n                type: Input\n            }], alignment: [{\n                type: Input\n            }], spacing: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], template: [{\n                type: Input\n            }], context: [{\n                type: Input\n            }], caretElm: [{\n                type: ViewChild,\n                args: ['caretElm']\n            }], cssClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], onWindowResize: [{\n                type: HostListener,\n                args: ['window:resize']\n            }] } });\n\nclass InjectionRegisteryService {\n    constructor(injectionService) {\n        this.injectionService = injectionService;\n        this.defaults = {};\n        this.components = new Map();\n    }\n    getByType(type = this.type) {\n        return this.components.get(type);\n    }\n    create(bindings) {\n        return this.createByType(this.type, bindings);\n    }\n    createByType(type, bindings) {\n        bindings = this.assignDefaults(bindings);\n        const component = this.injectComponent(type, bindings);\n        this.register(type, component);\n        return component;\n    }\n    destroy(instance) {\n        const compsByType = this.components.get(instance.componentType);\n        if (compsByType && compsByType.length) {\n            const idx = compsByType.indexOf(instance);\n            if (idx > -1) {\n                const component = compsByType[idx];\n                component.destroy();\n                compsByType.splice(idx, 1);\n            }\n        }\n    }\n    destroyAll() {\n        this.destroyByType(this.type);\n    }\n    destroyByType(type) {\n        const comps = this.components.get(type);\n        if (comps && comps.length) {\n            let i = comps.length - 1;\n            while (i >= 0) {\n                this.destroy(comps[i--]);\n            }\n        }\n    }\n    injectComponent(type, bindings) {\n        return this.injectionService.appendComponent(type, bindings);\n    }\n    assignDefaults(bindings) {\n        const inputs = { ...this.defaults.inputs };\n        const outputs = { ...this.defaults.outputs };\n        if (!bindings.inputs && !bindings.outputs) {\n            bindings = { inputs: bindings };\n        }\n        if (inputs) {\n            bindings.inputs = { ...inputs, ...bindings.inputs };\n        }\n        if (outputs) {\n            bindings.outputs = { ...outputs, ...bindings.outputs };\n        }\n        return bindings;\n    }\n    register(type, component) {\n        if (!this.components.has(type)) {\n            this.components.set(type, []);\n        }\n        const types = this.components.get(type);\n        types.push(component);\n    }\n}\n\nfunction isViewContainerRef(x) {\n    return x.element;\n}\n/**\n * Injection service is a helper to append components\n * dynamically to a known location in the DOM, most\n * noteably for dialogs/tooltips appending to body.\n *\n * @export\n */\nclass InjectionService {\n    constructor(applicationRef, componentFactoryResolver, injector) {\n        this.applicationRef = applicationRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.injector = injector;\n    }\n    /**\n     * Sets a default global root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     */\n    static setGlobalRootViewContainer(container) {\n        InjectionService.globalRootViewContainer = container;\n    }\n    /**\n     * Gets the root view container to inject the component to.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainer() {\n        if (this._container)\n            return this._container;\n        if (InjectionService.globalRootViewContainer)\n            return InjectionService.globalRootViewContainer;\n        if (this.applicationRef.components.length)\n            return this.applicationRef.components[0];\n        throw new Error('View Container not found! ngUpgrade needs to manually set this via setRootViewContainer or setGlobalRootViewContainer.');\n    }\n    /**\n     * Overrides the default root view container. This is useful for\n     * things like ngUpgrade that doesn't have a ApplicationRef root.\n     *\n     * @param container\n     *\n     * @memberOf InjectionService\n     */\n    setRootViewContainer(container) {\n        this._container = container;\n    }\n    /**\n     * Gets the html element for a component ref.\n     *\n     * @param componentRef\n     *\n     * @memberOf InjectionService\n     */\n    getComponentRootNode(component) {\n        if (isViewContainerRef(component)) {\n            return component.element.nativeElement;\n        }\n        if (component.hostView && component.hostView.rootNodes.length > 0) {\n            return component.hostView.rootNodes[0];\n        }\n        // the top most component root node has no `hostView`\n        return component.location.nativeElement;\n    }\n    /**\n     * Gets the root component container html element.\n     *\n     * @memberOf InjectionService\n     */\n    getRootViewContainerNode(component) {\n        return this.getComponentRootNode(component);\n    }\n    /**\n     * Projects the bindings onto the component\n     *\n     * @param component\n     * @param options\n     *\n     * @memberOf InjectionService\n     */\n    projectComponentBindings(component, bindings) {\n        if (bindings) {\n            if (bindings.inputs !== undefined) {\n                const bindingKeys = Object.getOwnPropertyNames(bindings.inputs);\n                for (const bindingName of bindingKeys) {\n                    component.instance[bindingName] = bindings.inputs[bindingName];\n                }\n            }\n            if (bindings.outputs !== undefined) {\n                const eventKeys = Object.getOwnPropertyNames(bindings.outputs);\n                for (const eventName of eventKeys) {\n                    component.instance[eventName] = bindings.outputs[eventName];\n                }\n            }\n        }\n        return component;\n    }\n    /**\n     * Appends a component to a adjacent location\n     *\n     * @param componentClass\n     * @param [options={}]\n     * @param [location]\n     *\n     * @memberOf InjectionService\n     */\n    appendComponent(componentClass, bindings = {}, location) {\n        if (!location)\n            location = this.getRootViewContainer();\n        const appendLocation = this.getComponentRootNode(location);\n        const portalHost = new DomPortalOutlet(appendLocation, this.componentFactoryResolver, this.applicationRef, this.injector);\n        const portal = new ComponentPortal(componentClass);\n        const componentRef = portalHost.attach(portal);\n        this.projectComponentBindings(componentRef, bindings);\n        return componentRef;\n    }\n}\nInjectionService.globalRootViewContainer = null;\nInjectionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, deps: [{ token: i0.ApplicationRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });\nInjectionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: InjectionService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Injector }]; } });\n\nclass TooltipService extends InjectionRegisteryService {\n    constructor(injectionService) {\n        super(injectionService);\n        this.type = TooltipContentComponent;\n    }\n}\nTooltipService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, deps: [{ token: InjectionService }], target: i0.ɵɵFactoryTarget.Injectable });\nTooltipService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: InjectionService }]; } });\n\nvar LegendPosition;\n(function (LegendPosition) {\n    LegendPosition[\"Right\"] = \"right\";\n    LegendPosition[\"Below\"] = \"below\";\n})(LegendPosition || (LegendPosition = {}));\nvar LegendType;\n(function (LegendType) {\n    LegendType[\"ScaleLegend\"] = \"scaleLegend\";\n    LegendType[\"Legend\"] = \"legend\";\n})(LegendType || (LegendType = {}));\n\nvar ScaleType;\n(function (ScaleType) {\n    ScaleType[\"Time\"] = \"time\";\n    ScaleType[\"Linear\"] = \"linear\";\n    ScaleType[\"Ordinal\"] = \"ordinal\";\n    ScaleType[\"Quantile\"] = \"quantile\";\n})(ScaleType || (ScaleType = {}));\n\nclass ScaleLegendComponent {\n    constructor() {\n        this.horizontal = false;\n    }\n    ngOnChanges(changes) {\n        const gradientValues = this.gradientString(this.colors.range(), this.colors.domain());\n        const direction = this.horizontal ? 'right' : 'bottom';\n        this.gradient = `linear-gradient(to ${direction}, ${gradientValues})`;\n    }\n    /**\n     * Generates the string used in the gradient stylesheet properties\n     * @param colors array of colors\n     * @param splits array of splits on a scale of (0, 1)\n     */\n    gradientString(colors, splits) {\n        // add the 100%\n        splits.push(1);\n        const pairs = [];\n        colors.reverse().forEach((c, i) => {\n            pairs.push(`${c} ${Math.round(splits[i] * 100)}%`);\n        });\n        return pairs.join(', ');\n    }\n}\nScaleLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nScaleLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: { valueRange: \"valueRange\", colors: \"colors\", height: \"height\", width: \"width\", horizontal: \"horizontal\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ScaleLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-scale-legend', template: `\n    <div\n      class=\"scale-legend\"\n      [class.horizontal-legend]=\"horizontal\"\n      [style.height.px]=\"horizontal ? undefined : height\"\n      [style.width.px]=\"width\"\n    >\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[1].toLocaleString() }}</span>\n      </div>\n      <div class=\"scale-legend-wrap\" [style.background]=\"gradient\"></div>\n      <div class=\"scale-legend-label\">\n        <span>{{ valueRange[0].toLocaleString() }}</span>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .scale-legend{text-align:center;display:flex;flex-direction:column}.chart-legend .scale-legend-wrap{display:inline-block;flex:1;width:30px;border-radius:5px;margin:0 auto}.chart-legend .scale-legend-label{font-size:12px}.chart-legend .horizontal-legend.scale-legend{flex-direction:row}.chart-legend .horizontal-legend .scale-legend-wrap{width:auto;height:30px;margin:0 16px}\\n\"] }]\n        }], propDecorators: { valueRange: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }] } });\n\n/**\n * Formats a label given a date, number or string.\n *\n * @export\n */\nfunction formatLabel(label) {\n    if (label instanceof Date) {\n        label = label.toLocaleDateString();\n    }\n    else {\n        label = label.toLocaleString();\n    }\n    return label;\n}\n/**\n * Escapes a label.\n *\n * @export\n */\nfunction escapeLabel(label) {\n    return label.toLocaleString().replace(/[&'`\"<>]/g, match => {\n        return {\n            '&': '&amp;',\n            // tslint:disable-next-line: quotemark\n            \"'\": '&#x27;',\n            '`': '&#x60;',\n            '\"': '&quot;',\n            '<': '&lt;',\n            '>': '&gt;'\n        }[match];\n    });\n}\n\nclass LegendEntryComponent {\n    constructor() {\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.toggle = new EventEmitter();\n    }\n    get trimmedLabel() {\n        return this.formattedLabel || '(empty)';\n    }\n    onMouseEnter() {\n        this.activate.emit({ name: this.label });\n    }\n    onMouseLeave() {\n        this.deactivate.emit({ name: this.label });\n    }\n}\nLegendEntryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLegendEntryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: { color: \"color\", label: \"label\", formattedLabel: \"formattedLabel\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", toggle: \"toggle\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, ngImport: i0, template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendEntryComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'ngx-charts-legend-entry',\n                    template: `\n    <span [title]=\"formattedLabel\" tabindex=\"-1\" [class.active]=\"isActive\" (click)=\"select.emit(formattedLabel)\">\n      <span class=\"legend-label-color\" [style.background-color]=\"color\" (click)=\"toggle.emit(formattedLabel)\"> </span>\n      <span class=\"legend-label-text\">\n        {{ trimmedLabel }}\n      </span>\n    </span>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], formattedLabel: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], toggle: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LegendComponent {\n    constructor(cd) {\n        this.cd = cd;\n        this.horizontal = false;\n        this.labelClick = new EventEmitter();\n        this.labelActivate = new EventEmitter();\n        this.labelDeactivate = new EventEmitter();\n        this.legendEntries = [];\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cd.markForCheck();\n        this.legendEntries = this.getLegendEntries();\n    }\n    getLegendEntries() {\n        const items = [];\n        for (const label of this.data) {\n            const formattedLabel = formatLabel(label);\n            const idx = items.findIndex(i => {\n                return i.label === formattedLabel;\n            });\n            if (idx === -1) {\n                items.push({\n                    label,\n                    formattedLabel,\n                    color: this.colors.getColor(label)\n                });\n            }\n        }\n        return items;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.label === d.name;\n        });\n        return item !== undefined;\n    }\n    activate(item) {\n        this.labelActivate.emit(item);\n    }\n    deactivate(item) {\n        this.labelDeactivate.emit(item);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LegendComponent, selector: \"ngx-charts-legend\", inputs: { data: \"data\", title: \"title\", colors: \"colors\", height: \"height\", width: \"width\", activeEntries: \"activeEntries\", horizontal: \"horizontal\" }, outputs: { labelClick: \"labelClick\", labelActivate: \"labelActivate\", labelDeactivate: \"labelDeactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"], components: [{ type: LegendEntryComponent, selector: \"ngx-charts-legend-entry\", inputs: [\"color\", \"label\", \"formattedLabel\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"toggle\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-legend', template: `\n    <div [style.width.px]=\"width\">\n      <header class=\"legend-title\" *ngIf=\"title?.length > 0\">\n        <span class=\"legend-title-text\">{{ title }}</span>\n      </header>\n      <div class=\"legend-wrap\">\n        <ul class=\"legend-labels\" [class.horizontal-legend]=\"horizontal\" [style.max-height.px]=\"height - 45\">\n          <li *ngFor=\"let entry of legendEntries; trackBy: trackBy\" class=\"legend-label\">\n            <ngx-charts-legend-entry\n              [label]=\"entry.label\"\n              [formattedLabel]=\"entry.formattedLabel\"\n              [color]=\"entry.color\"\n              [isActive]=\"isActive(entry)\"\n              (select)=\"labelClick.emit($event)\"\n              (activate)=\"activate($event)\"\n              (deactivate)=\"deactivate($event)\"\n            >\n            </ngx-charts-legend-entry>\n          </li>\n        </ul>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".chart-legend{display:inline-block;padding:0;width:auto!important}.chart-legend .legend-title{white-space:nowrap;overflow:hidden;margin-left:10px;margin-bottom:5px;font-size:14px;font-weight:700}.chart-legend ul,.chart-legend li{padding:0;margin:0;list-style:none}.chart-legend .horizontal-legend li{display:inline-block}.chart-legend .legend-wrap{width:calc(100% - 10px)}.chart-legend .legend-labels{line-height:85%;list-style:none;text-align:left;float:left;width:100%;border-radius:3px;overflow-y:auto;overflow-x:hidden;white-space:nowrap;background:rgba(0,0,0,.05)}.chart-legend .legend-label{cursor:pointer;font-size:90%;margin:8px;color:#afb7c8}.chart-legend .legend-label:hover{color:#000;transition:.2s}.chart-legend .legend-label .active .legend-label-text{color:#000}.chart-legend .legend-label-color{display:inline-block;height:15px;width:15px;margin-right:5px;color:#5b646b;border-radius:3px}.chart-legend .legend-label-text{display:inline-block;vertical-align:top;line-height:15px;font-size:12px;width:calc(100% - 20px);text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.chart-legend .legend-title-text{vertical-align:bottom;display:inline-block;line-height:16px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }], labelClick: [{\n                type: Output\n            }], labelActivate: [{\n                type: Output\n            }], labelDeactivate: [{\n                type: Output\n            }] } });\n\nclass ChartComponent {\n    constructor() {\n        this.showLegend = false;\n        this.animations = true;\n        this.legendLabelClick = new EventEmitter();\n        this.legendLabelActivate = new EventEmitter();\n        this.legendLabelDeactivate = new EventEmitter();\n        this.LegendPosition = LegendPosition;\n        this.LegendType = LegendType;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        let legendColumns = 0;\n        if (this.showLegend) {\n            this.legendType = this.getLegendType();\n            if (!this.legendOptions || this.legendOptions.position === LegendPosition.Right) {\n                if (this.legendType === LegendType.ScaleLegend) {\n                    legendColumns = 1;\n                }\n                else {\n                    legendColumns = 2;\n                }\n            }\n        }\n        const chartColumns = 12 - legendColumns;\n        this.chartWidth = Math.floor((this.view[0] * chartColumns) / 12.0);\n        this.legendWidth =\n            !this.legendOptions || this.legendOptions.position === LegendPosition.Right\n                ? Math.floor((this.view[0] * legendColumns) / 12.0)\n                : this.chartWidth;\n    }\n    getLegendType() {\n        return this.legendOptions.scaleType === ScaleType.Linear ? LegendType.ScaleLegend : LegendType.Legend;\n    }\n}\nChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: ChartComponent, selector: \"ngx-charts-chart\", inputs: { view: \"view\", showLegend: \"showLegend\", legendOptions: \"legendOptions\", legendType: \"legendType\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { legendLabelClick: \"legendLabelClick\", legendLabelActivate: \"legendLabelActivate\", legendLabelDeactivate: \"legendLabelDeactivate\" }, providers: [TooltipService], usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `, isInline: true, components: [{ type: ScaleLegendComponent, selector: \"ngx-charts-scale-legend\", inputs: [\"valueRange\", \"colors\", \"height\", \"width\", \"horizontal\"] }, { type: LegendComponent, selector: \"ngx-charts-legend\", inputs: [\"data\", \"title\", \"colors\", \"height\", \"width\", \"activeEntries\", \"horizontal\"], outputs: [\"labelClick\", \"labelActivate\", \"labelDeactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    providers: [TooltipService],\n                    selector: 'ngx-charts-chart',\n                    template: `\n    <div class=\"ngx-charts-outer\" [style.width.px]=\"view[0]\" [style.height.px]=\"view[1]\">\n      <svg class=\"ngx-charts\" [attr.width]=\"chartWidth\" [attr.height]=\"view[1]\">\n        <ng-content></ng-content>\n      </svg>\n      <ngx-charts-scale-legend\n        *ngIf=\"showLegend && legendType === LegendType.ScaleLegend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [valueRange]=\"legendOptions.domain\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n      >\n      </ngx-charts-scale-legend>\n      <ngx-charts-legend\n        *ngIf=\"showLegend && legendType === LegendType.Legend\"\n        class=\"chart-legend\"\n        [horizontal]=\"legendOptions && legendOptions.position === LegendPosition.Below\"\n        [data]=\"legendOptions.domain\"\n        [title]=\"legendOptions.title\"\n        [colors]=\"legendOptions.colors\"\n        [height]=\"view[1]\"\n        [width]=\"legendWidth\"\n        [activeEntries]=\"activeEntries\"\n        (labelClick)=\"legendLabelClick.emit($event)\"\n        (labelActivate)=\"legendLabelActivate.emit($event)\"\n        (labelDeactivate)=\"legendLabelDeactivate.emit($event)\"\n      >\n      </ngx-charts-legend>\n    </div>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { view: [{\n                type: Input\n            }], showLegend: [{\n                type: Input\n            }], legendOptions: [{\n                type: Input\n            }], legendType: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], legendLabelClick: [{\n                type: Output\n            }], legendLabelActivate: [{\n                type: Output\n            }], legendLabelDeactivate: [{\n                type: Output\n            }] } });\n\n/**\n * Visibility Observer\n */\nclass VisibilityObserver {\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.visible = new EventEmitter();\n        this.isVisible = false;\n        this.runCheck();\n    }\n    destroy() {\n        clearTimeout(this.timeout);\n    }\n    onVisibilityChange() {\n        // trigger zone recalc for columns\n        this.zone.run(() => {\n            this.isVisible = true;\n            this.visible.emit(true);\n        });\n    }\n    runCheck() {\n        const check = () => {\n            if (!this.element) {\n                return;\n            }\n            // https://davidwalsh.name/offsetheight-visibility\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(this.timeout);\n                this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(this.timeout);\n                this.zone.runOutsideAngular(() => {\n                    this.timeout = setTimeout(() => check(), 100);\n                });\n            }\n        };\n        this.zone.runOutsideAngular(() => {\n            this.timeout = setTimeout(() => check());\n        });\n    }\n}\nVisibilityObserver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nVisibilityObserver.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: VisibilityObserver, selector: \"visibility-observer\", outputs: { visible: \"visible\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: VisibilityObserver, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'visibility-observer'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { visible: [{\n                type: Output\n            }] } });\n\nfunction isDate(value) {\n    return toString.call(value) === '[object Date]';\n}\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\n\nclass BaseChartComponent {\n    constructor(chartElement, zone, cd, platformId) {\n        this.chartElement = chartElement;\n        this.zone = zone;\n        this.cd = cd;\n        this.platformId = platformId;\n        this.scheme = 'cool';\n        this.schemeType = ScaleType.Ordinal;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.animations = false;\n        }\n    }\n    ngAfterViewInit() {\n        this.bindWindowResizeEvent();\n        // listen for visibility of the element for hidden by default scenario\n        this.visibilityObserver = new VisibilityObserver(this.chartElement, this.zone);\n        this.visibilityObserver.visible.subscribe(this.update.bind(this));\n    }\n    ngOnDestroy() {\n        this.unbindEvents();\n        if (this.visibilityObserver) {\n            this.visibilityObserver.visible.unsubscribe();\n            this.visibilityObserver.destroy();\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.results) {\n            this.results = this.cloneData(this.results);\n        }\n        else {\n            this.results = [];\n        }\n        if (this.view) {\n            this.width = this.view[0];\n            this.height = this.view[1];\n        }\n        else {\n            const dims = this.getContainerDims();\n            if (dims) {\n                this.width = dims.width;\n                this.height = dims.height;\n            }\n        }\n        // default values if width or height are 0 or undefined\n        if (!this.width) {\n            this.width = 600;\n        }\n        if (!this.height) {\n            this.height = 400;\n        }\n        this.width = Math.floor(this.width);\n        this.height = Math.floor(this.height);\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    getContainerDims() {\n        let width;\n        let height;\n        const hostElem = this.chartElement.nativeElement;\n        if (isPlatformBrowser(this.platformId) && hostElem.parentNode !== null) {\n            // Get the container dimensions\n            const dims = hostElem.parentNode.getBoundingClientRect();\n            width = dims.width;\n            height = dims.height;\n        }\n        if (width && height) {\n            return { width, height };\n        }\n        return null;\n    }\n    /**\n     * Converts all date objects that appear as name\n     * into formatted date strings\n     */\n    formatDates() {\n        for (let i = 0; i < this.results.length; i++) {\n            const g = this.results[i];\n            g.label = g.name;\n            if (isDate(g.label)) {\n                g.label = g.label.toLocaleDateString();\n            }\n            if (g.series) {\n                for (let j = 0; j < g.series.length; j++) {\n                    const d = g.series[j];\n                    d.label = d.name;\n                    if (isDate(d.label)) {\n                        d.label = d.label.toLocaleDateString();\n                    }\n                }\n            }\n        }\n    }\n    unbindEvents() {\n        if (this.resizeSubscription) {\n            this.resizeSubscription.unsubscribe();\n        }\n    }\n    bindWindowResizeEvent() {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const source = fromEvent(window, 'resize');\n        const subscription = source.pipe(debounceTime(200)).subscribe(e => {\n            this.update();\n            if (this.cd) {\n                this.cd.markForCheck();\n            }\n        });\n        this.resizeSubscription = subscription;\n    }\n    /**\n     * Clones the data into a new object\n     *\n     * @memberOf BaseChart\n     */\n    cloneData(data) {\n        const results = [];\n        for (const item of data) {\n            const copy = {};\n            if (item['name'] !== undefined) {\n                copy['name'] = item['name'];\n            }\n            if (item['value'] !== undefined) {\n                copy['value'] = item['value'];\n            }\n            if (item['series'] !== undefined) {\n                copy['series'] = [];\n                for (const seriesItem of item['series']) {\n                    const seriesItemCopy = Object.assign({}, seriesItem);\n                    copy['series'].push(seriesItemCopy);\n                }\n            }\n            if (item['extra'] !== undefined) {\n                copy['extra'] = JSON.parse(JSON.stringify(item['extra']));\n            }\n            if (item['source'] !== undefined) {\n                copy['source'] = item['source'];\n            }\n            if (item['target'] !== undefined) {\n                copy['target'] = item['target'];\n            }\n            results.push(copy);\n        }\n        return results;\n    }\n}\nBaseChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBaseChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BaseChartComponent, selector: \"base-chart\", inputs: { results: \"results\", view: \"view\", scheme: \"scheme\", schemeType: \"schemeType\", customColors: \"customColors\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: ` <div></div> `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BaseChartComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'base-chart',\n                    template: ` <div></div> `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { results: [{\n                type: Input\n            }], view: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nvar Orientation;\n(function (Orientation) {\n    Orientation[\"Top\"] = \"top\";\n    Orientation[\"Bottom\"] = \"bottom\";\n    Orientation[\"Left\"] = \"left\";\n    Orientation[\"Right\"] = \"right\";\n})(Orientation || (Orientation = {}));\n\nclass AxisLabelComponent {\n    constructor(element) {\n        this.textHeight = 25;\n        this.margin = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.strokeWidth = '0.01';\n        this.textAnchor = 'middle';\n        this.transform = '';\n        switch (this.orient) {\n            case Orientation.Top:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Bottom:\n                this.y = this.offset;\n                this.x = this.width / 2;\n                break;\n            case Orientation.Left:\n                this.y = -(this.offset + this.textHeight + this.margin);\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            case Orientation.Right:\n                this.y = this.offset + this.margin;\n                this.x = -this.height / 2;\n                this.transform = 'rotate(270)';\n                break;\n            default:\n        }\n    }\n}\nAxisLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAxisLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: { orient: \"orient\", label: \"label\", offset: \"offset\", width: \"width\", height: \"height\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxisLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-axis-label]',\n                    template: `\n    <svg:text\n      [attr.stroke-width]=\"strokeWidth\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n    >\n      {{ label }}\n    </svg:text>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { orient: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }] } });\n\nfunction trimLabel(s, max = 16) {\n    if (typeof s !== 'string') {\n        if (typeof s === 'number') {\n            return s + '';\n        }\n        else {\n            return '';\n        }\n    }\n    s = s.trim();\n    if (s.length <= max) {\n        return s;\n    }\n    else {\n        return `${s.slice(0, max)}...`;\n    }\n}\n\nfunction reduceTicks(ticks, maxTicks) {\n    if (ticks.length > maxTicks) {\n        const reduced = [];\n        const modulus = Math.floor(ticks.length / maxTicks);\n        for (let i = 0; i < ticks.length; i++) {\n            if (i % modulus === 0) {\n                reduced.push(ticks[i]);\n            }\n        }\n        ticks = reduced;\n    }\n    return ticks;\n}\nfunction getTickLines(label, maxLength, maxLines) {\n    const labelString = (label || '').toString();\n    let totalLines = [];\n    if (/\\s/.test(labelString)) {\n        totalLines = labelString.split(/\\s+/).reduce((lines, line) => {\n            const last = (lines.pop() || '') + ' ';\n            return last.length + line.length > maxLength ? [...lines, last.trim(), line.trim()] : [...lines, last + line];\n        }, []);\n    }\n    else {\n        let startIndex = 0;\n        while (startIndex < labelString.length) {\n            totalLines.push(labelString.substring(startIndex, startIndex + maxLength));\n            startIndex += maxLength;\n        }\n    }\n    if (totalLines.length > maxLines) {\n        totalLines = totalLines.splice(0, maxLines);\n        totalLines[totalLines.length - 1] += '...';\n    }\n    return totalLines;\n}\n\nvar TextAnchor;\n(function (TextAnchor) {\n    TextAnchor[\"Start\"] = \"start\";\n    TextAnchor[\"Middle\"] = \"middle\";\n    TextAnchor[\"End\"] = \"end\";\n})(TextAnchor || (TextAnchor = {}));\n\nclass XAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.rotateTicks = true;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.verticalSpacing = 20;\n        this.rotateLabels = false;\n        this.innerTickSize = 6;\n        this.outerTickSize = 6;\n        this.tickPadding = 3;\n        this.textAnchor = TextAnchor.Middle;\n        this.maxTicksLength = 0;\n        this.maxAllowedLength = 16;\n        this.height = 0;\n        this.approxHeight = 10;\n        this.maxPossibleLengthForTickIfWrapped = 16;\n    }\n    get isWrapTicksSupported() {\n        return this.wrapTicks && this.scale.step;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.dimensionsChanged.emit({ height: this.approxHeight });\n            return;\n        }\n        const height = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().height, 10);\n        if (height !== this.height) {\n            this.height = height;\n            this.dimensionsChanged.emit({ height: this.height });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        const scale = this.scale;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            // eslint-disable-next-line prefer-spread\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const angle = this.rotateTicks ? this.getRotationAngle(this.ticks) : null;\n        this.adjustedScale = this.scale.bandwidth\n            ? function (d) {\n                return this.scale(d) + this.scale.bandwidth() * 0.5;\n            }\n            : this.scale;\n        this.textTransform = '';\n        if (angle && angle !== 0) {\n            this.textTransform = `rotate(${angle})`;\n            this.textAnchor = TextAnchor.End;\n            this.verticalSpacing = 10;\n        }\n        else {\n            this.textAnchor = TextAnchor.Middle;\n        }\n        setTimeout(() => this.updateDims());\n    }\n    getRotationAngle(ticks) {\n        let angle = 0;\n        this.maxTicksLength = 0;\n        for (let i = 0; i < ticks.length; i++) {\n            const tick = this.tickFormat(ticks[i]).toString();\n            let tickLength = tick.length;\n            if (this.trimTicks) {\n                tickLength = this.tickTrim(tick).length;\n            }\n            if (tickLength > this.maxTicksLength) {\n                this.maxTicksLength = tickLength;\n            }\n        }\n        const len = Math.min(this.maxTicksLength, this.maxAllowedLength);\n        const charWidth = 7; // need to measure this\n        const wordWidth = len * charWidth;\n        let baseWidth = wordWidth;\n        const maxBaseWidth = Math.floor(this.width / ticks.length);\n        // calculate optimal angle\n        while (baseWidth > maxBaseWidth && angle > -90) {\n            angle -= 30;\n            baseWidth = Math.cos(angle * (Math.PI / 180)) * wordWidth;\n        }\n        let labelHeight = 14;\n        if (this.isWrapTicksSupported) {\n            const longestTick = this.ticks.reduce((earlier, current) => (current.length > earlier.length ? current : earlier), '');\n            const tickLines = this.tickChunks(longestTick);\n            labelHeight = 14 * (tickLines.length || 1);\n            this.maxPossibleLengthForTickIfWrapped = this.getMaxPossibleLengthForTick(longestTick);\n        }\n        const requiredHeight = angle !== 0\n            ? Math.max(Math.abs(Math.sin((angle * Math.PI) / 180)) * this.maxTickLength * charWidth, 10)\n            : labelHeight;\n        this.approxHeight = Math.min(requiredHeight, 200);\n        return angle;\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(100);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickWidth) {\n        return Math.floor(this.width / tickWidth);\n    }\n    tickTransform(tick) {\n        return 'translate(' + this.adjustedScale(tick) + ',' + this.verticalSpacing + ')';\n    }\n    gridLineTransform() {\n        return `translate(0,${-this.verticalSpacing - 5})`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n    getMaxPossibleLengthForTick(longestLabel) {\n        if (this.scale.bandwidth) {\n            const averageCharacterWidth = 7; // approximate char width\n            const maxCharacters = Math.floor(this.scale.bandwidth() / averageCharacterWidth);\n            const truncatedText = longestLabel.slice(0, maxCharacters);\n            return Math.max(truncatedText.length, this.maxTickLength);\n        }\n        return this.maxTickLength;\n    }\n    tickChunks(label) {\n        if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n            const maxAllowedLines = 5;\n            let maxLines = this.rotateTicks ? Math.floor(this.scale.step() / 14) : maxAllowedLines;\n            if (maxLines <= 1) {\n                return [this.tickTrim(label)];\n            }\n            let possibleStringLength = Math.max(this.maxPossibleLengthForTickIfWrapped, this.maxTickLength);\n            if (!isPlatformBrowser(this.platformId)) {\n                possibleStringLength = Math.floor(Math.min(this.approxHeight / maxAllowedLines, Math.max(this.maxPossibleLengthForTickIfWrapped, this.maxTickLength)));\n            }\n            maxLines = Math.min(maxLines, maxAllowedLines);\n            const lines = getTickLines(label, possibleStringLength, maxLines < 1 ? 1 : maxLines);\n            return lines;\n        }\n        return [this.tickTrim(label)];\n    }\n}\nXAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nXAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineHeight: \"gridLineHeight\", width: \"width\", rotateTicks: \"rotateTicks\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"tickTransform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            font-size=\"12px\"\n            [attr.text-anchor]=\"textAnchor\"\n            [attr.transform]=\"textTransform\"\n          >\n            <ng-container *ngIf=\"isWrapTicksSupported; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * 12\">\n                {{ tickLine }}\n              </svg:tspan>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"tickTransform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line class=\"gridline-path gridline-path-vertical\" [attr.y1]=\"-gridLineHeight\" y2=\"0\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineHeight: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass XAxisComponent {\n    constructor() {\n        this.rotateTicks = true;\n        this.showGridLines = false;\n        this.xOrient = Orientation.Bottom;\n        this.xAxisOffset = 0;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.xAxisClassName = 'x axis';\n        this.labelOffset = 0;\n        this.fill = 'none';\n        this.stroke = 'stroke';\n        this.tickStroke = '#ccc';\n        this.strokeWidth = 'none';\n        this.padding = 5;\n        this.orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.transform = `translate(0,${this.xAxisOffset + this.padding + this.dims.height})`;\n        if (typeof this.xAxisTickCount !== 'undefined') {\n            this.tickArguments = [this.xAxisTickCount];\n        }\n    }\n    emitTicksHeight({ height }) {\n        const newLabelOffset = height + 25 + 5;\n        if (newLabelOffset !== this.labelOffset) {\n            this.labelOffset = newLabelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ height });\n            }, 0);\n        }\n    }\n}\nXAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nXAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: { xScale: \"xScale\", dims: \"dims\", trimTicks: \"trimTicks\", rotateTicks: \"rotateTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", ticks: \"ticks\", xAxisTickCount: \"xAxisTickCount\", xOrient: \"xOrient\", xAxisOffset: \"xAxisOffset\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: XAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: XAxisTicksComponent, selector: \"g[ngx-charts-x-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineHeight\", \"width\", \"rotateTicks\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: XAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-x-axis]',\n                    template: `\n    <svg:g [attr.class]=\"xAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-x-axis-ticks\n        *ngIf=\"xScale\"\n        [trimTicks]=\"trimTicks\"\n        [rotateTicks]=\"rotateTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"xScale\"\n        [orient]=\"xOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineHeight]=\"dims.height\"\n        [width]=\"dims.width\"\n        [tickValues]=\"ticks\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksHeight($event)\"\n      />\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"orientation.Bottom\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { xScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], rotateTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], xAxisTickCount: [{\n                type: Input\n            }], xOrient: [{\n                type: Input\n            }], xAxisOffset: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [XAxisTicksComponent]\n            }] } });\n\n/**\n * Generates a rounded rectanglar path\n *\n * @export\n * @param x, y, w, h, r, tl, tr, bl, br\n */\nfunction roundedRect(x, y, w, h, r, [tl, tr, bl, br]) {\n    let retval = '';\n    w = Math.floor(w);\n    h = Math.floor(h);\n    w = w === 0 ? 1 : w;\n    h = h === 0 ? 1 : h;\n    retval = `M${[x + r, y]}`;\n    retval += `h${w - 2 * r}`;\n    if (tr) {\n        retval += `a${[r, r]} 0 0 1 ${[r, r]}`;\n    }\n    else {\n        retval += `h${r}v${r}`;\n    }\n    retval += `v${h - 2 * r}`;\n    if (br) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, r]}`;\n    }\n    else {\n        retval += `v${r}h${-r}`;\n    }\n    retval += `h${2 * r - w}`;\n    if (bl) {\n        retval += `a${[r, r]} 0 0 1 ${[-r, -r]}`;\n    }\n    else {\n        retval += `h${-r}v${-r}`;\n    }\n    retval += `v${2 * r - h}`;\n    if (tl) {\n        retval += `a${[r, r]} 0 0 1 ${[r, -r]}`;\n    }\n    else {\n        retval += `v${-r}h${r}`;\n    }\n    retval += `z`;\n    return retval;\n}\n\nclass YAxisTicksComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tickArguments = [5];\n        this.tickStroke = '#ccc';\n        this.trimTicks = true;\n        this.maxTickLength = 16;\n        this.showGridLines = false;\n        this.showRefLabels = false;\n        this.showRefLines = false;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.innerTickSize = 6;\n        this.tickPadding = 3;\n        this.verticalSpacing = 20;\n        this.textAnchor = TextAnchor.Middle;\n        this.width = 0;\n        this.outerTickSize = 6;\n        this.rotateLabels = false;\n        this.referenceLineLength = 0;\n        this.Orientation = Orientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngAfterViewInit() {\n        setTimeout(() => this.updateDims());\n    }\n    updateDims() {\n        if (!isPlatformBrowser(this.platformId)) {\n            // for SSR, use approximate value instead of measured\n            this.width = this.getApproximateAxisWidth();\n            this.dimensionsChanged.emit({ width: this.width });\n            return;\n        }\n        const width = parseInt(this.ticksElement.nativeElement.getBoundingClientRect().width, 10);\n        if (width !== this.width) {\n            this.width = width;\n            this.dimensionsChanged.emit({ width });\n            setTimeout(() => this.updateDims());\n        }\n    }\n    update() {\n        const scale = this.scale;\n        const sign = this.orient === Orientation.Top || this.orient === Orientation.Right ? -1 : 1;\n        this.tickSpacing = Math.max(this.innerTickSize, 0) + this.tickPadding;\n        this.ticks = this.getTicks();\n        if (this.tickFormatting) {\n            this.tickFormat = this.tickFormatting;\n        }\n        else if (scale.tickFormat) {\n            // eslint-disable-next-line prefer-spread\n            this.tickFormat = scale.tickFormat.apply(scale, this.tickArguments);\n        }\n        else {\n            this.tickFormat = function (d) {\n                if (d.constructor.name === 'Date') {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        this.adjustedScale = scale.bandwidth\n            ? d => {\n                // position the tick to middle considering number of lines of the tick\n                const positionMiddle = scale(d) + scale.bandwidth() * 0.5;\n                if (this.wrapTicks && d.toString().length > this.maxTickLength) {\n                    const chunksLength = this.tickChunks(d).length;\n                    if (chunksLength === 1) {\n                        return positionMiddle;\n                    }\n                    const bandWidth = scale.bandwidth();\n                    const heightOfLines = chunksLength * 8;\n                    const availableFreeSpace = bandWidth * 0.5 - heightOfLines * 0.5;\n                    return scale(d) + availableFreeSpace;\n                }\n                return positionMiddle;\n            }\n            : scale;\n        if (this.showRefLines && this.referenceLines) {\n            this.setReferencelines();\n        }\n        switch (this.orient) {\n            case Orientation.Top:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Bottom:\n                this.transform = function (tick) {\n                    return 'translate(' + this.adjustedScale(tick) + ',0)';\n                };\n                this.textAnchor = TextAnchor.Middle;\n                this.y2 = this.innerTickSize * sign;\n                this.y1 = this.tickSpacing * sign;\n                this.dy = sign < 0 ? '0em' : '.71em';\n                break;\n            case Orientation.Left:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.End;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            case Orientation.Right:\n                this.transform = function (tick) {\n                    return 'translate(0,' + this.adjustedScale(tick) + ')';\n                };\n                this.textAnchor = TextAnchor.Start;\n                this.x2 = this.innerTickSize * -sign;\n                this.x1 = this.tickSpacing * -sign;\n                this.dy = '.32em';\n                break;\n            default:\n        }\n        setTimeout(() => this.updateDims());\n    }\n    setReferencelines() {\n        this.refMin = this.adjustedScale(Math.min.apply(null, this.referenceLines.map(item => item.value)));\n        this.refMax = this.adjustedScale(Math.max.apply(null, this.referenceLines.map(item => item.value)));\n        this.referenceLineLength = this.referenceLines.length;\n        this.referenceAreaPath = roundedRect(0, this.refMax, this.gridLineWidth, this.refMin - this.refMax, 0, [\n            false,\n            false,\n            false,\n            false\n        ]);\n    }\n    getTicks() {\n        let ticks;\n        const maxTicks = this.getMaxTicks(20);\n        const maxScaleTicks = this.getMaxTicks(50);\n        if (this.tickValues) {\n            ticks = this.tickValues;\n        }\n        else if (this.scale.ticks) {\n            ticks = this.scale.ticks.apply(this.scale, [maxScaleTicks]);\n        }\n        else {\n            ticks = this.scale.domain();\n            ticks = reduceTicks(ticks, maxTicks);\n        }\n        return ticks;\n    }\n    getMaxTicks(tickHeight) {\n        return Math.floor(this.height / tickHeight);\n    }\n    tickTransform(tick) {\n        return `translate(${this.adjustedScale(tick)},${this.verticalSpacing})`;\n    }\n    gridLineTransform() {\n        return `translate(5,0)`;\n    }\n    tickTrim(label) {\n        return this.trimTicks ? trimLabel(label, this.maxTickLength) : label;\n    }\n    getApproximateAxisWidth() {\n        const maxChars = Math.max(...this.ticks.map(t => this.tickTrim(this.tickFormat(t)).length));\n        const charWidth = 7;\n        return maxChars * charWidth;\n    }\n    tickChunks(label) {\n        if (label.toString().length > this.maxTickLength && this.scale.bandwidth) {\n            // for y-axis the width of the tick is fixed\n            const preferredWidth = this.maxTickLength;\n            const maxLines = Math.floor(this.scale.bandwidth() / 15);\n            if (maxLines <= 1) {\n                return [this.tickTrim(label)];\n            }\n            return getTickLines(label, preferredWidth, Math.min(maxLines, 5));\n        }\n        return [this.tickFormat(label)];\n    }\n}\nYAxisTicksComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nYAxisTicksComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: { scale: \"scale\", orient: \"orient\", tickArguments: \"tickArguments\", tickValues: \"tickValues\", tickStroke: \"tickStroke\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", showGridLines: \"showGridLines\", gridLineWidth: \"gridLineWidth\", height: \"height\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", showRefLines: \"showRefLines\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksElement\", first: true, predicate: [\"ticksel\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisTicksComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis-ticks]',\n                    template: `\n    <svg:g #ticksel>\n      <svg:g *ngFor=\"let tick of ticks\" class=\"tick\" [attr.transform]=\"transform(tick)\">\n        <ng-container *ngIf=\"tickFormat(tick) as tickFormatted\">\n          <title>{{ tickFormatted }}</title>\n          <svg:text\n            stroke-width=\"0.01\"\n            [attr.dy]=\"dy\"\n            [attr.x]=\"x1\"\n            [attr.y]=\"y1\"\n            [attr.text-anchor]=\"textAnchor\"\n            [style.font-size]=\"'12px'\"\n          >\n            <ng-container *ngIf=\"wrapTicks; then tmplMultilineTick; else tmplSinglelineTick\"></ng-container>\n          </svg:text>\n\n          <ng-template #tmplMultilineTick>\n            <ng-container *ngIf=\"tickChunks(tick) as tickLines\">\n              <ng-container *ngIf=\"tickLines.length > 1; else tmplSinglelineTick\">\n                <svg:tspan *ngFor=\"let tickLine of tickLines; let i = index\" x=\"0\" [attr.y]=\"i * (8 + tickSpacing)\">\n                  {{ tickLine }}\n                </svg:tspan>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n          <ng-template #tmplSinglelineTick>\n            {{ tickTrim(tickFormatted) }}\n          </ng-template>\n        </ng-container>\n      </svg:g>\n    </svg:g>\n\n    <svg:path\n      *ngIf=\"referenceLineLength > 1 && refMax && refMin && showRefLines\"\n      class=\"reference-area\"\n      [attr.d]=\"referenceAreaPath\"\n      [attr.transform]=\"gridLineTransform()\"\n    />\n    <svg:g *ngFor=\"let tick of ticks\" [attr.transform]=\"transform(tick)\">\n      <svg:g *ngIf=\"showGridLines\" [attr.transform]=\"gridLineTransform()\">\n        <svg:line\n          *ngIf=\"orient === Orientation.Left\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n        />\n        <svg:line\n          *ngIf=\"orient === Orientation.Right\"\n          class=\"gridline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"-gridLineWidth\"\n        />\n      </svg:g>\n    </svg:g>\n\n    <svg:g *ngFor=\"let refLine of referenceLines\">\n      <svg:g *ngIf=\"showRefLines\" [attr.transform]=\"transform(refLine.value)\">\n        <svg:line\n          class=\"refline-path gridline-path-horizontal\"\n          x1=\"0\"\n          [attr.x2]=\"gridLineWidth\"\n          [attr.transform]=\"gridLineTransform()\"\n        />\n        <svg:g *ngIf=\"showRefLabels\">\n          <title>{{ tickTrim(tickFormat(refLine.value)) }}</title>\n          <svg:text\n            class=\"refline-label\"\n            [attr.dy]=\"dy\"\n            [attr.y]=\"-6\"\n            [attr.x]=\"gridLineWidth\"\n            [attr.text-anchor]=\"textAnchor\"\n          >\n            {{ refLine.name }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { scale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }], tickArguments: [{\n                type: Input\n            }], tickValues: [{\n                type: Input\n            }], tickStroke: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], gridLineWidth: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksElement: [{\n                type: ViewChild,\n                args: ['ticksel']\n            }] } });\n\nclass YAxisComponent {\n    constructor() {\n        this.showGridLines = false;\n        this.yOrient = Orientation.Left;\n        this.yAxisOffset = 0;\n        this.wrapTicks = false;\n        this.dimensionsChanged = new EventEmitter();\n        this.yAxisClassName = 'y axis';\n        this.labelOffset = 15;\n        this.fill = 'none';\n        this.stroke = '#CCC';\n        this.tickStroke = '#CCC';\n        this.strokeWidth = 1;\n        this.padding = 5;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.offset = -(this.yAxisOffset + this.padding);\n        if (this.yOrient === Orientation.Right) {\n            this.labelOffset = 65;\n            this.transform = `translate(${this.offset + this.dims.width} , 0)`;\n        }\n        else {\n            this.transform = `translate(${this.offset} , 0)`;\n        }\n        if (this.yAxisTickCount !== undefined) {\n            this.tickArguments = [this.yAxisTickCount];\n        }\n    }\n    emitTicksWidth({ width }) {\n        if (width !== this.labelOffset && this.yOrient === Orientation.Right) {\n            this.labelOffset = width + this.labelOffset;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n        else if (width !== this.labelOffset) {\n            this.labelOffset = width;\n            setTimeout(() => {\n                this.dimensionsChanged.emit({ width });\n            }, 0);\n        }\n    }\n}\nYAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nYAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: { yScale: \"yScale\", dims: \"dims\", trimTicks: \"trimTicks\", maxTickLength: \"maxTickLength\", tickFormatting: \"tickFormatting\", ticks: \"ticks\", showGridLines: \"showGridLines\", showLabel: \"showLabel\", labelText: \"labelText\", yAxisTickCount: \"yAxisTickCount\", yOrient: \"yOrient\", referenceLines: \"referenceLines\", showRefLines: \"showRefLines\", showRefLabels: \"showRefLabels\", yAxisOffset: \"yAxisOffset\", wrapTicks: \"wrapTicks\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, viewQueries: [{ propertyName: \"ticksComponent\", first: true, predicate: YAxisTicksComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: YAxisTicksComponent, selector: \"g[ngx-charts-y-axis-ticks]\", inputs: [\"scale\", \"orient\", \"tickArguments\", \"tickValues\", \"tickStroke\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"gridLineWidth\", \"height\", \"referenceLines\", \"showRefLabels\", \"showRefLines\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: YAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-y-axis]',\n                    template: `\n    <svg:g [attr.class]=\"yAxisClassName\" [attr.transform]=\"transform\">\n      <svg:g\n        ngx-charts-y-axis-ticks\n        *ngIf=\"yScale\"\n        [trimTicks]=\"trimTicks\"\n        [maxTickLength]=\"maxTickLength\"\n        [tickFormatting]=\"tickFormatting\"\n        [tickArguments]=\"tickArguments\"\n        [tickValues]=\"ticks\"\n        [tickStroke]=\"tickStroke\"\n        [scale]=\"yScale\"\n        [orient]=\"yOrient\"\n        [showGridLines]=\"showGridLines\"\n        [gridLineWidth]=\"dims.width\"\n        [referenceLines]=\"referenceLines\"\n        [showRefLines]=\"showRefLines\"\n        [showRefLabels]=\"showRefLabels\"\n        [height]=\"dims.height\"\n        [wrapTicks]=\"wrapTicks\"\n        (dimensionsChanged)=\"emitTicksWidth($event)\"\n      />\n\n      <svg:g\n        ngx-charts-axis-label\n        *ngIf=\"showLabel\"\n        [label]=\"labelText\"\n        [offset]=\"labelOffset\"\n        [orient]=\"yOrient\"\n        [height]=\"dims.height\"\n        [width]=\"dims.width\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { yScale: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], trimTicks: [{\n                type: Input\n            }], maxTickLength: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }], ticks: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], showLabel: [{\n                type: Input\n            }], labelText: [{\n                type: Input\n            }], yAxisTickCount: [{\n                type: Input\n            }], yOrient: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], yAxisOffset: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }], ticksComponent: [{\n                type: ViewChild,\n                args: [YAxisTicksComponent]\n            }] } });\n\nclass AxesModule {\n}\nAxesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAxesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent], imports: [CommonModule], exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent] });\nAxesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AxesModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent],\n                    exports: [AxisLabelComponent, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent]\n                }]\n        }] });\n\nvar StyleTypes;\n(function (StyleTypes) {\n    StyleTypes[\"popover\"] = \"popover\";\n    StyleTypes[\"tooltip\"] = \"tooltip\";\n})(StyleTypes || (StyleTypes = {}));\n\nvar ShowTypes;\n(function (ShowTypes) {\n    ShowTypes[ShowTypes[\"all\"] = 'all'] = \"all\";\n    ShowTypes[ShowTypes[\"focus\"] = 'focus'] = \"focus\";\n    ShowTypes[ShowTypes[\"mouseover\"] = 'mouseover'] = \"mouseover\";\n})(ShowTypes || (ShowTypes = {}));\n\nclass TooltipDirective {\n    constructor(tooltipService, viewContainerRef, renderer) {\n        this.tooltipService = tooltipService;\n        this.viewContainerRef = viewContainerRef;\n        this.renderer = renderer;\n        this.tooltipCssClass = '';\n        this.tooltipAppendToBody = true;\n        this.tooltipSpacing = 10;\n        this.tooltipDisabled = false;\n        this.tooltipShowCaret = true;\n        this.tooltipPlacement = PlacementTypes.Top;\n        this.tooltipAlignment = PlacementTypes.Center;\n        this.tooltipType = StyleTypes.popover;\n        this.tooltipCloseOnClickOutside = true;\n        this.tooltipCloseOnMouseLeave = true;\n        this.tooltipHideTimeout = 300;\n        this.tooltipShowTimeout = 100;\n        this.tooltipShowEvent = ShowTypes.all;\n        this.tooltipImmediateExit = false;\n        this.show = new EventEmitter();\n        this.hide = new EventEmitter();\n    }\n    get listensForFocus() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.focus;\n    }\n    get listensForHover() {\n        return this.tooltipShowEvent === ShowTypes.all || this.tooltipShowEvent === ShowTypes.mouseover;\n    }\n    ngOnDestroy() {\n        this.hideTooltip(true);\n    }\n    onFocus() {\n        if (this.listensForFocus) {\n            this.showTooltip();\n        }\n    }\n    onBlur() {\n        if (this.listensForFocus) {\n            this.hideTooltip(true);\n        }\n    }\n    onMouseEnter() {\n        if (this.listensForHover) {\n            this.showTooltip();\n        }\n    }\n    onMouseLeave(target) {\n        if (this.listensForHover && this.tooltipCloseOnMouseLeave) {\n            clearTimeout(this.timeout);\n            if (this.component) {\n                const contentDom = this.component.instance.element.nativeElement;\n                const contains = contentDom.contains(target);\n                if (contains)\n                    return;\n            }\n            this.hideTooltip(this.tooltipImmediateExit);\n        }\n    }\n    onMouseClick() {\n        if (this.listensForHover) {\n            this.hideTooltip(true);\n        }\n    }\n    showTooltip(immediate) {\n        if (this.component || this.tooltipDisabled)\n            return;\n        const time = immediate\n            ? 0\n            : this.tooltipShowTimeout + (navigator.userAgent.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/) ? 400 : 0);\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n            this.tooltipService.destroyAll();\n            const options = this.createBoundOptions();\n            this.component = this.tooltipService.create(options);\n            // add a tiny timeout to avoid event re-triggers\n            setTimeout(() => {\n                if (this.component) {\n                    this.addHideListeners(this.component.instance.element.nativeElement);\n                }\n            }, 10);\n            this.show.emit(true);\n        }, time);\n    }\n    addHideListeners(tooltip) {\n        // on mouse enter, cancel the hide triggered by the leave\n        this.mouseEnterContentEvent = this.renderer.listen(tooltip, 'mouseenter', () => {\n            clearTimeout(this.timeout);\n        });\n        // content mouse leave listener\n        if (this.tooltipCloseOnMouseLeave) {\n            this.mouseLeaveContentEvent = this.renderer.listen(tooltip, 'mouseleave', () => {\n                this.hideTooltip(this.tooltipImmediateExit);\n            });\n        }\n        // content close on click outside\n        if (this.tooltipCloseOnClickOutside) {\n            this.documentClickEvent = this.renderer.listen('window', 'click', event => {\n                const contains = tooltip.contains(event.target);\n                if (!contains)\n                    this.hideTooltip();\n            });\n        }\n    }\n    hideTooltip(immediate = false) {\n        if (!this.component)\n            return;\n        const destroyFn = () => {\n            // remove events\n            if (this.mouseLeaveContentEvent)\n                this.mouseLeaveContentEvent();\n            if (this.mouseEnterContentEvent)\n                this.mouseEnterContentEvent();\n            if (this.documentClickEvent)\n                this.documentClickEvent();\n            // emit events\n            this.hide.emit(true);\n            // destroy component\n            this.tooltipService.destroy(this.component);\n            this.component = undefined;\n        };\n        clearTimeout(this.timeout);\n        if (!immediate) {\n            this.timeout = setTimeout(destroyFn, this.tooltipHideTimeout);\n        }\n        else {\n            destroyFn();\n        }\n    }\n    createBoundOptions() {\n        return {\n            title: this.tooltipTitle,\n            template: this.tooltipTemplate,\n            host: this.viewContainerRef.element,\n            placement: this.tooltipPlacement,\n            alignment: this.tooltipAlignment,\n            type: this.tooltipType,\n            showCaret: this.tooltipShowCaret,\n            cssClass: this.tooltipCssClass,\n            spacing: this.tooltipSpacing,\n            context: this.tooltipContext\n        };\n    }\n}\nTooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, deps: [{ token: TooltipService }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\nTooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: { tooltipCssClass: \"tooltipCssClass\", tooltipTitle: \"tooltipTitle\", tooltipAppendToBody: \"tooltipAppendToBody\", tooltipSpacing: \"tooltipSpacing\", tooltipDisabled: \"tooltipDisabled\", tooltipShowCaret: \"tooltipShowCaret\", tooltipPlacement: \"tooltipPlacement\", tooltipAlignment: \"tooltipAlignment\", tooltipType: \"tooltipType\", tooltipCloseOnClickOutside: \"tooltipCloseOnClickOutside\", tooltipCloseOnMouseLeave: \"tooltipCloseOnMouseLeave\", tooltipHideTimeout: \"tooltipHideTimeout\", tooltipShowTimeout: \"tooltipShowTimeout\", tooltipTemplate: \"tooltipTemplate\", tooltipShowEvent: \"tooltipShowEvent\", tooltipContext: \"tooltipContext\", tooltipImmediateExit: \"tooltipImmediateExit\" }, outputs: { show: \"show\", hide: \"hide\" }, host: { listeners: { \"focusin\": \"onFocus()\", \"blur\": \"onBlur()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave($event.target)\", \"click\": \"onMouseClick()\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-tooltip]' }]\n        }], ctorParameters: function () { return [{ type: TooltipService }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }]; }, propDecorators: { tooltipCssClass: [{\n                type: Input\n            }], tooltipTitle: [{\n                type: Input\n            }], tooltipAppendToBody: [{\n                type: Input\n            }], tooltipSpacing: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipShowCaret: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipAlignment: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], tooltipCloseOnClickOutside: [{\n                type: Input\n            }], tooltipCloseOnMouseLeave: [{\n                type: Input\n            }], tooltipHideTimeout: [{\n                type: Input\n            }], tooltipShowTimeout: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipShowEvent: [{\n                type: Input\n            }], tooltipContext: [{\n                type: Input\n            }], tooltipImmediateExit: [{\n                type: Input\n            }], show: [{\n                type: Output\n            }], hide: [{\n                type: Output\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focusin']\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave', ['$event.target']]\n            }], onMouseClick: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\n\nclass TooltipModule {\n}\nTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, declarations: [TooltipContentComponent, TooltipDirective], imports: [CommonModule], exports: [TooltipContentComponent, TooltipDirective] });\nTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, providers: [InjectionService, TooltipService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TooltipContentComponent, TooltipDirective],\n                    providers: [InjectionService, TooltipService],\n                    exports: [TooltipContentComponent, TooltipDirective],\n                    imports: [CommonModule],\n                    entryComponents: [TooltipContentComponent]\n                }]\n        }] });\n\nconst cache = {};\n/**\n * Generates a short id.\n *\n * Description:\n *   A 4-character alphanumeric sequence (364 = 1.6 million)\n *   This should only be used for JavaScript specific models.\n *   http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n *\n *   Example: `ebgf`\n */\nfunction id() {\n    let newId = ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n    // append a 'a' because neo gets mad\n    newId = `a${newId}`;\n    // ensure not already used\n    if (!cache[newId]) {\n        cache[newId] = true;\n        return newId;\n    }\n    return id();\n}\n\nvar BarOrientation;\n(function (BarOrientation) {\n    BarOrientation[\"Vertical\"] = \"vertical\";\n    BarOrientation[\"Horizontal\"] = \"horizontal\";\n})(BarOrientation || (BarOrientation = {}));\n\nclass SvgLinearGradientComponent {\n    constructor() {\n        this.orientation = BarOrientation.Vertical;\n    }\n    ngOnChanges(changes) {\n        this.x1 = '0%';\n        this.x2 = '0%';\n        this.y1 = '0%';\n        this.y2 = '0%';\n        if (this.orientation === BarOrientation.Horizontal) {\n            this.x2 = '100%';\n        }\n        else if (this.orientation === BarOrientation.Vertical) {\n            this.y1 = '100%';\n        }\n    }\n}\nSvgLinearGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgLinearGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: { orientation: \"orientation\", name: \"name\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgLinearGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-linear-gradient]',\n                    template: `\n    <svg:linearGradient [id]=\"name\" [attr.x1]=\"x1\" [attr.y1]=\"y1\" [attr.x2]=\"x2\" [attr.y2]=\"y2\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:linearGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { orientation: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass CircleComponent {\n    constructor() {\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    ngOnChanges(changes) {\n        this.classNames = Array.isArray(this.classNames) ? this.classNames.join(' ') : '';\n        this.classNames += 'circle';\n    }\n}\nCircleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCircleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: { cx: \"cx\", cy: \"cy\", r: \"r\", fill: \"fill\", stroke: \"stroke\", data: \"data\", classNames: \"classNames\", circleOpacity: \"circleOpacity\", pointerEvents: \"pointerEvents\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"click\": \"onClick()\", \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle]',\n                    template: `\n    <svg:circle\n      [attr.cx]=\"cx\"\n      [attr.cy]=\"cy\"\n      [attr.r]=\"r\"\n      [attr.fill]=\"fill\"\n      [attr.stroke]=\"stroke\"\n      [attr.opacity]=\"circleOpacity\"\n      [attr.class]=\"classNames\"\n      [attr.pointer-events]=\"pointerEvents\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], r: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], classNames: [{\n                type: Input\n            }], circleOpacity: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onClick: [{\n                type: HostListener,\n                args: ['click']\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar SeriesType;\n(function (SeriesType) {\n    SeriesType[\"Standard\"] = \"standard\";\n    SeriesType[\"Stacked\"] = \"stacked\";\n})(SeriesType || (SeriesType = {}));\nclass CircleSeriesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.type = SeriesType.Standard;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barVisible = false;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges() {\n        this.update();\n    }\n    update() {\n        this.circle = this.getActiveCircle();\n    }\n    getActiveCircle() {\n        const indexActiveDataPoint = this.data.series.findIndex(d => {\n            const label = d.name;\n            return label && this.visibleValue && label.toString() === this.visibleValue.toString() && d.value !== undefined;\n        });\n        if (indexActiveDataPoint === -1) {\n            // No valid point is 'active/hovered over' at this moment.\n            return undefined;\n        }\n        return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);\n    }\n    mapDataPointToCircle(d, i) {\n        const seriesName = this.data.name;\n        const value = d.value;\n        const label = d.name;\n        const tooltipLabel = formatLabel(label);\n        let cx;\n        if (this.scaleType === ScaleType.Time) {\n            cx = this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            cx = this.xScale(Number(label));\n        }\n        else {\n            cx = this.xScale(label);\n        }\n        const cy = this.yScale(this.type === SeriesType.Standard ? value : d.d1);\n        const radius = 5;\n        const height = this.yScale.range()[0] - cy;\n        const opacity = 1;\n        let color;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            if (this.type === SeriesType.Standard) {\n                color = this.colors.getColor(value);\n            }\n            else {\n                color = this.colors.getColor(d.d1);\n            }\n        }\n        else {\n            color = this.colors.getColor(seriesName);\n        }\n        const data = Object.assign({}, d, {\n            series: seriesName,\n            value,\n            name: label\n        });\n        return {\n            classNames: [`circle-data-${i}`],\n            value,\n            label,\n            data,\n            cx,\n            cy,\n            radius,\n            height,\n            tooltipLabel,\n            color,\n            opacity,\n            seriesName,\n            gradientStops: this.getGradientStops(color),\n            min: d.min,\n            max: d.max\n        };\n    }\n    getTooltipText({ tooltipLabel, value, seriesName, min, max }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(seriesName)} • ${escapeLabel(tooltipLabel)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}${this.getTooltipMinMaxText(min, max)}</span>\n    `;\n    }\n    getTooltipMinMaxText(min, max) {\n        if (min !== undefined || max !== undefined) {\n            let result = ' (';\n            if (min !== undefined) {\n                if (max === undefined) {\n                    result += '≥';\n                }\n                result += min.toLocaleString();\n                if (max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (max !== undefined) {\n                result += '≤';\n            }\n            if (max !== undefined) {\n                result += max.toLocaleString();\n            }\n            result += ')';\n            return result;\n        }\n        else {\n            return '';\n        }\n    }\n    getGradientStops(color) {\n        return [\n            {\n                offset: 0,\n                color,\n                opacity: 0.2\n            },\n            {\n                offset: 100,\n                color,\n                opacity: 1\n            }\n        ];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    activateCircle() {\n        this.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle() {\n        this.barVisible = false;\n        this.circle.opacity = 0;\n        this.deactivate.emit({ name: this.data.name });\n    }\n}\nCircleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCircleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: { data: \"data\", type: \"type\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 1 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CircleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-circle-series]',\n                    template: `\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"!isSSR && barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:rect\n        *ngIf=\"isSSR && barVisible && type === 'standard'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g\n        ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({ name: circle.seriesName })\"\n        [pointerEvents]=\"circle.value === 0 ? 'none' : 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"onClick(circle.data)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 1 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GridPanelComponent {\n}\nGridPanelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: { width: \"width\", height: \"height\", x: \"x\", y: \"y\" }, ngImport: i0, template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel]',\n                    template: `\n    <svg:rect [attr.height]=\"height\" [attr.width]=\"width\" [attr.x]=\"x\" [attr.y]=\"y\" stroke=\"none\" class=\"gridpanel\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }] } });\n\nvar ClassEnum;\n(function (ClassEnum) {\n    ClassEnum[\"Odd\"] = \"odd\";\n    ClassEnum[\"Even\"] = \"even\";\n})(ClassEnum || (ClassEnum = {}));\nclass GridPanelSeriesComponent {\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.gridPanels = this.getGridPanels();\n    }\n    getGridPanels() {\n        return this.data.map(d => {\n            let offset;\n            let width;\n            let height;\n            let x;\n            let y;\n            let className = ClassEnum.Odd;\n            if (this.orient === BarOrientation.Vertical) {\n                const position = this.xScale(d.name);\n                const positionIndex = Number.parseInt((position / this.xScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.xScale.bandwidth() * this.xScale.paddingInner();\n                width = this.xScale.bandwidth() + offset;\n                height = this.dims.height;\n                x = this.xScale(d.name) - offset / 2;\n                y = 0;\n            }\n            else if (this.orient === BarOrientation.Horizontal) {\n                const position = this.yScale(d.name);\n                const positionIndex = Number.parseInt((position / this.yScale.step()).toString(), 10);\n                if (positionIndex % 2 === 1) {\n                    className = ClassEnum.Even;\n                }\n                offset = this.yScale.bandwidth() * this.yScale.paddingInner();\n                width = this.dims.width;\n                height = this.yScale.bandwidth() + offset;\n                x = 0;\n                y = this.yScale(d.name) - offset / 2;\n            }\n            return {\n                name: d.name,\n                class: className,\n                height,\n                width,\n                x,\n                y\n            };\n        });\n    }\n}\nGridPanelSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGridPanelSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: { data: \"data\", dims: \"dims\", xScale: \"xScale\", yScale: \"yScale\", orient: \"orient\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: GridPanelComponent, selector: \"g[ngx-charts-grid-panel]\", inputs: [\"width\", \"height\", \"x\", \"y\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GridPanelSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-grid-panel-series]',\n                    template: `\n    <svg:g\n      ngx-charts-grid-panel\n      *ngFor=\"let gridPanel of gridPanels\"\n      [height]=\"gridPanel.height\"\n      [width]=\"gridPanel.width\"\n      [x]=\"gridPanel.x\"\n      [y]=\"gridPanel.y\"\n      [class.grid-panel]=\"true\"\n      [class.odd]=\"gridPanel.class === 'odd'\"\n      [class.even]=\"gridPanel.class === 'even'\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], orient: [{\n                type: Input\n            }] } });\n\nclass SvgRadialGradientComponent {\n    constructor() {\n        this.endOpacity = 1;\n        this.cx = 0;\n        this.cy = 0;\n    }\n    get stops() {\n        return this.stopsInput || this.stopsDefault;\n    }\n    set stops(value) {\n        this.stopsInput = value;\n    }\n    ngOnChanges(changes) {\n        this.r = '30%';\n        if ('color' in changes || 'startOpacity' in changes || 'endOpacity' in changes) {\n            this.stopsDefault = [\n                {\n                    offset: 0,\n                    color: this.color,\n                    opacity: this.startOpacity\n                },\n                {\n                    offset: 100,\n                    color: this.color,\n                    opacity: this.endOpacity\n                }\n            ];\n        }\n    }\n}\nSvgRadialGradientComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSvgRadialGradientComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: { color: \"color\", name: \"name\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", cx: \"cx\", cy: \"cy\", stops: \"stops\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SvgRadialGradientComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-svg-radial-gradient]',\n                    template: `\n    <svg:radialGradient [id]=\"name\" [attr.cx]=\"cx\" [attr.cy]=\"cy\" [attr.r]=\"r\" gradientUnits=\"userSpaceOnUse\">\n      <svg:stop\n        *ngFor=\"let stop of stops\"\n        [attr.offset]=\"stop.offset + '%'\"\n        [style.stop-color]=\"stop.color\"\n        [style.stop-opacity]=\"stop.opacity\"\n      />\n    </svg:radialGradient>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], cx: [{\n                type: Input\n            }], cy: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }] } });\n\nclass AreaComponent {\n    constructor(element) {\n        this.opacity = 1;\n        this.startOpacity = 0.5;\n        this.endOpacity = 1;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.animationsLoaded = false;\n        this.hasGradient = false;\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        if (!this.animationsLoaded) {\n            this.loadAnimation();\n            this.animationsLoaded = true;\n        }\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n    }\n    loadAnimation() {\n        this.areaPath = this.startingPath;\n        setTimeout(this.updatePathEl.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.area');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: this.endOpacity\n            }\n        ];\n    }\n}\nAreaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nAreaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: { data: \"data\", path: \"path\", startingPath: \"startingPath\", fill: \"fill\", opacity: \"opacity\", startOpacity: \"startOpacity\", endOpacity: \"endOpacity\", gradient: \"gradient\", stops: \"stops\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area]',\n                    template: `\n    <svg:defs *ngIf=\"gradient\">\n      <svg:g\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"barOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n    </svg:defs>\n    <svg:path class=\"area\" [attr.d]=\"areaPath\" [attr.fill]=\"gradient ? gradientFill : fill\" [style.opacity]=\"opacity\" />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], path: [{\n                type: Input\n            }], startingPath: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], opacity: [{\n                type: Input\n            }], startOpacity: [{\n                type: Input\n            }], endOpacity: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\n// Robert Penner's easeOutExpo\nfunction easeOutExpo(t, b, c, d) {\n    return (c * (-Math.pow(2, (-10 * t) / d) + 1) * 1024) / 1023 + b;\n}\n/**\n * Counts from a number to the end incrementally.\n */\nfunction count(countFrom, countTo, countDecimals, countDuration, callback) {\n    const startVal = Number(countFrom);\n    const endVal = Number(countTo);\n    const countDown = startVal > endVal;\n    const decimals = Math.max(0, countDecimals);\n    const dec = Math.pow(10, decimals);\n    const duration = Number(countDuration) * 1000;\n    let startTime;\n    function runCount(timestamp) {\n        let frameVal;\n        const progress = timestamp - startTime;\n        if (countDown) {\n            frameVal = startVal - easeOutExpo(progress, 0, startVal - endVal, duration);\n        }\n        else {\n            frameVal = easeOutExpo(progress, startVal, endVal - startVal, duration);\n        }\n        if (countDown) {\n            frameVal = frameVal < endVal ? endVal : frameVal;\n        }\n        else {\n            frameVal = frameVal > endVal ? endVal : frameVal;\n        }\n        frameVal = Math.round(frameVal * dec) / dec;\n        const tick = progress < duration;\n        callback({\n            value: frameVal,\n            progress,\n            timestamp,\n            finished: !tick\n        });\n        if (tick) {\n            return requestAnimationFrame(val => runCount(val));\n        }\n    }\n    return requestAnimationFrame(timestamp => {\n        startTime = timestamp;\n        return runCount(timestamp);\n    });\n}\n/**\n * Determine decimals places\n *\n * @export\n */\nfunction decimalChecker(countTo) {\n    const endVal = Number(countTo);\n    if (endVal % 1 !== 0 && Math.abs(endVal) <= 10) {\n        return 2;\n    }\n    return 0;\n}\n\n/**\n * Count up component\n *\n * Loosely inspired by:\n *  - https://github.com/izupet/angular2-counto\n *  - https://inorganik.github.io/countUp.js/\n *\n * @export\n */\nclass CountUpDirective {\n    constructor(cd, element) {\n        this.cd = cd;\n        this.countDuration = 1;\n        this.countPrefix = '';\n        this.countSuffix = '';\n        this.countChange = new EventEmitter();\n        this.countFinish = new EventEmitter();\n        this.value = '';\n        this._countDecimals = 0;\n        this._countTo = 0;\n        this._countFrom = 0;\n        this.nativeElement = element.nativeElement;\n    }\n    set countDecimals(val) {\n        this._countDecimals = val;\n    }\n    get countDecimals() {\n        if (this._countDecimals)\n            return this._countDecimals;\n        return decimalChecker(this.countTo);\n    }\n    set countTo(val) {\n        this._countTo = parseFloat(val);\n        this.start();\n    }\n    get countTo() {\n        return this._countTo;\n    }\n    set countFrom(val) {\n        this._countFrom = parseFloat(val);\n        this.start();\n    }\n    get countFrom() {\n        return this._countFrom;\n    }\n    ngOnDestroy() {\n        cancelAnimationFrame(this.animationReq);\n    }\n    start() {\n        cancelAnimationFrame(this.animationReq);\n        const valueFormatting = this.valueFormatting || (value => `${this.countPrefix}${value.toLocaleString()}${this.countSuffix}`);\n        const callback = ({ value, progress, finished }) => {\n            this.value = valueFormatting(value);\n            this.cd.markForCheck();\n            if (!finished)\n                this.countChange.emit({ value: this.value, progress });\n            if (finished)\n                this.countFinish.emit({ value: this.value, progress });\n        };\n        this.animationReq = count(this.countFrom, this.countTo, this.countDecimals, this.countDuration, callback);\n    }\n}\nCountUpDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nCountUpDirective.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: { countDuration: \"countDuration\", countPrefix: \"countPrefix\", countSuffix: \"countSuffix\", valueFormatting: \"valueFormatting\", countDecimals: \"countDecimals\", countTo: \"countTo\", countFrom: \"countFrom\" }, outputs: { countChange: \"countChange\", countFinish: \"countFinish\" }, ngImport: i0, template: ` {{ value }} `, isInline: true });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CountUpDirective, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[ngx-charts-count-up]',\n                    template: ` {{ value }} `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { countDuration: [{\n                type: Input\n            }], countPrefix: [{\n                type: Input\n            }], countSuffix: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], countDecimals: [{\n                type: Input\n            }], countTo: [{\n                type: Input\n            }], countFrom: [{\n                type: Input\n            }], countChange: [{\n                type: Output\n            }], countFinish: [{\n                type: Output\n            }] } });\n\n// If we don't check whether 'window' and 'global' variables are defined,\n// code will fail in browser/node with 'variable is undefined' error.\nlet root;\nif (typeof window !== 'undefined') {\n    root = window;\n}\nelse if (typeof global !== 'undefined') {\n    root = global;\n}\n// tslint:disable-next-line:variable-name\nconst MouseEvent = root.MouseEvent;\nfunction createMouseEvent(name, bubbles = false, cancelable = true) {\n    // Calling new of an event does not work correctly on IE. The following is a tested workaround\n    // See https://stackoverflow.com/questions/27176983/dispatchevent-not-working-in-ie11\n    if (typeof MouseEvent === 'function') {\n        // Sane browsers\n        return new MouseEvent(name, { bubbles, cancelable });\n    }\n    else {\n        // IE\n        const event = document.createEvent('MouseEvent');\n        event.initEvent(name, bubbles, cancelable);\n        return event;\n    }\n}\n\nclass TooltipArea {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.anchorOpacity = 0;\n        this.anchorPos = -1;\n        this.anchorValues = [];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.showPercentage = false;\n        this.tooltipDisabled = false;\n        this.hover = new EventEmitter();\n    }\n    getValues(xVal) {\n        const results = [];\n        for (const group of this.results) {\n            const item = group.series.find(d => d.name.toString() === xVal.toString());\n            let groupName = group.name;\n            if (groupName instanceof Date) {\n                groupName = groupName.toLocaleDateString();\n            }\n            if (item) {\n                const label = item.name;\n                let val = item.value;\n                if (this.showPercentage) {\n                    val = (item.d1 - item.d0).toFixed(2) + '%';\n                }\n                let color;\n                if (this.colors.scaleType === ScaleType.Linear) {\n                    let v = val;\n                    if (item.d1) {\n                        v = item.d1;\n                    }\n                    color = this.colors.getColor(v);\n                }\n                else {\n                    color = this.colors.getColor(group.name);\n                }\n                const data = Object.assign({}, item, {\n                    value: val,\n                    name: label,\n                    series: groupName,\n                    min: item.min,\n                    max: item.max,\n                    color\n                });\n                results.push(data);\n            }\n        }\n        return results;\n    }\n    mouseMove(event) {\n        if (!isPlatformBrowser(this.platformId)) {\n            return;\n        }\n        const xPos = event.pageX - event.target.getBoundingClientRect().left;\n        const closestIndex = this.findClosestPointIndex(xPos);\n        const closestPoint = this.xSet[closestIndex];\n        this.anchorPos = this.xScale(closestPoint);\n        this.anchorPos = Math.max(0, this.anchorPos);\n        this.anchorPos = Math.min(this.dims.width, this.anchorPos);\n        this.anchorValues = this.getValues(closestPoint);\n        if (this.anchorPos !== this.lastAnchorPos) {\n            const ev = createMouseEvent('mouseleave');\n            this.tooltipAnchor.nativeElement.dispatchEvent(ev);\n            this.anchorOpacity = 0.7;\n            this.hover.emit({\n                value: closestPoint\n            });\n            this.showTooltip();\n            this.lastAnchorPos = this.anchorPos;\n        }\n    }\n    findClosestPointIndex(xPos) {\n        let minIndex = 0;\n        let maxIndex = this.xSet.length - 1;\n        let minDiff = Number.MAX_VALUE;\n        let closestIndex = 0;\n        while (minIndex <= maxIndex) {\n            const currentIndex = ((minIndex + maxIndex) / 2) | 0;\n            const currentElement = this.xScale(this.xSet[currentIndex]);\n            const curDiff = Math.abs(currentElement - xPos);\n            if (curDiff < minDiff) {\n                minDiff = curDiff;\n                closestIndex = currentIndex;\n            }\n            if (currentElement < xPos) {\n                minIndex = currentIndex + 1;\n            }\n            else if (currentElement > xPos) {\n                maxIndex = currentIndex - 1;\n            }\n            else {\n                minDiff = 0;\n                closestIndex = currentIndex;\n                break;\n            }\n        }\n        return closestIndex;\n    }\n    showTooltip() {\n        const event = createMouseEvent('mouseenter');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n    }\n    hideTooltip() {\n        const event = createMouseEvent('mouseleave');\n        this.tooltipAnchor.nativeElement.dispatchEvent(event);\n        this.anchorOpacity = 0;\n        this.lastAnchorPos = -1;\n    }\n    getToolTipText(tooltipItem) {\n        let result = '';\n        if (tooltipItem.series !== undefined) {\n            result += tooltipItem.series;\n        }\n        else {\n            result += '???';\n        }\n        result += ': ';\n        if (tooltipItem.value !== undefined) {\n            result += tooltipItem.value.toLocaleString();\n        }\n        if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {\n            result += ' (';\n            if (tooltipItem.min !== undefined) {\n                if (tooltipItem.max === undefined) {\n                    result += '≥';\n                }\n                result += tooltipItem.min.toLocaleString();\n                if (tooltipItem.max !== undefined) {\n                    result += ' - ';\n                }\n            }\n            else if (tooltipItem.max !== undefined) {\n                result += '≤';\n            }\n            if (tooltipItem.max !== undefined) {\n                result += tooltipItem.max.toLocaleString();\n            }\n            result += ')';\n        }\n        return result;\n    }\n}\nTooltipArea.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nTooltipArea.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: { dims: \"dims\", xSet: \"xSet\", xScale: \"xScale\", yScale: \"yScale\", results: \"results\", colors: \"colors\", showPercentage: \"showPercentage\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { hover: \"hover\" }, viewQueries: [{ propertyName: \"tooltipAnchor\", first: true, predicate: [\"tooltipAnchor\"], descendants: true }], ngImport: i0, template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition('inactive => active', [\n                style({\n                    opacity: 0\n                }),\n                animate(250, style({ opacity: 0.7 }))\n            ]),\n            transition('active => inactive', [\n                style({\n                    opacity: 0.7\n                }),\n                animate(250, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TooltipArea, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tooltip-area]',\n                    template: `\n    <svg:g>\n      <svg:rect\n        class=\"tooltip-area\"\n        [attr.x]=\"0\"\n        y=\"0\"\n        [attr.width]=\"dims.width\"\n        [attr.height]=\"dims.height\"\n        style=\"opacity: 0; cursor: 'auto';\"\n        (mousemove)=\"mouseMove($event)\"\n        (mouseleave)=\"hideTooltip()\"\n      />\n      <ng-template #defaultTooltipTemplate let-model=\"model\">\n        <xhtml:div class=\"area-tooltip-container\">\n          <xhtml:div *ngFor=\"let tooltipItem of model\" class=\"tooltip-item\">\n            <xhtml:span class=\"tooltip-item-color\" [style.background-color]=\"tooltipItem.color\"></xhtml:span>\n            {{ getToolTipText(tooltipItem) }}\n          </xhtml:div>\n        </xhtml:div>\n      </ng-template>\n      <svg:rect\n        #tooltipAnchor\n        [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n        class=\"tooltip-anchor\"\n        [attr.x]=\"anchorPos\"\n        y=\"0\"\n        [attr.width]=\"1\"\n        [attr.height]=\"dims.height\"\n        [style.opacity]=\"anchorOpacity\"\n        [style.pointer-events]=\"'none'\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Right\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipSpacing]=\"15\"\n        [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate : defaultTooltipTemplate\"\n        [tooltipContext]=\"anchorValues\"\n        [tooltipImmediateExit]=\"true\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition('inactive => active', [\n                                style({\n                                    opacity: 0\n                                }),\n                                animate(250, style({ opacity: 0.7 }))\n                            ]),\n                            transition('active => inactive', [\n                                style({\n                                    opacity: 0.7\n                                }),\n                                animate(250, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { dims: [{\n                type: Input\n            }], xSet: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], showPercentage: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], hover: [{\n                type: Output\n            }], tooltipAnchor: [{\n                type: ViewChild,\n                args: ['tooltipAnchor', { static: false }]\n            }] } });\n\nclass Timeline {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.height = 50;\n        this.select = new EventEmitter();\n        this.onDomainChange = new EventEmitter();\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n        if (!this.initialized) {\n            this.addBrush();\n            this.initialized = true;\n        }\n    }\n    update() {\n        this.dims = this.getDims();\n        this.height = this.dims.height;\n        const offsetY = this.view[1] - this.height;\n        this.xDomain = this.getXDomain();\n        this.xScale = this.getXScale();\n        if (this.brush) {\n            this.updateBrush();\n        }\n        this.transform = `translate(0 , ${offsetY})`;\n        this.filterId = 'filter' + id().toString();\n        this.filter = `url(#${this.filterId})`;\n        this.cd.markForCheck();\n    }\n    getXDomain() {\n        let values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n        }\n        else {\n            domain = values;\n        }\n        return domain;\n    }\n    getXScale() {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, this.dims.width]).padding(0.1).domain(this.xDomain);\n        }\n        return scale;\n    }\n    addBrush() {\n        if (this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush = brushX()\n            .extent([\n            [0, 0],\n            [width, height]\n        ])\n            .on('brush end', ({ selection }) => {\n            const newSelection = selection || this.xScale.range();\n            const newDomain = newSelection.map(this.xScale.invert);\n            this.onDomainChange.emit(newDomain);\n            this.cd.markForCheck();\n        });\n        select(this.element).select('.brush').call(this.brush);\n    }\n    updateBrush() {\n        if (!this.brush)\n            return;\n        const height = this.height;\n        const width = this.view[0];\n        this.brush.extent([\n            [0, 0],\n            [width, height]\n        ]);\n        select(this.element).select('.brush').call(this.brush);\n        // clear hardcoded properties so they can be defined by CSS\n        select(this.element)\n            .select('.selection')\n            .attr('fill', undefined)\n            .attr('stroke', undefined)\n            .attr('fill-opacity', undefined);\n        this.cd.markForCheck();\n    }\n    getDims() {\n        const width = this.view[0];\n        const dims = {\n            width,\n            height: this.height\n        };\n        return dims;\n    }\n}\nTimeline.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTimeline.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: { view: \"view\", results: \"results\", scheme: \"scheme\", customColors: \"customColors\", legend: \"legend\", autoScale: \"autoScale\", scaleType: \"scaleType\", height: \"height\" }, outputs: { select: \"select\", onDomainChange: \"onDomainChange\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, isInline: true, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: Timeline, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-timeline]', template: `\n    <svg:g class=\"timeline\" [attr.transform]=\"transform\">\n      <svg:filter [attr.id]=\"filterId\">\n        <svg:feColorMatrix\n          in=\"SourceGraphic\"\n          type=\"matrix\"\n          values=\"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"\n        />\n      </svg:filter>\n      <svg:g class=\"embedded-chart\">\n        <ng-content></ng-content>\n      </svg:g>\n      <svg:rect x=\"0\" [attr.width]=\"view[0]\" y=\"0\" [attr.height]=\"height\" class=\"brush-background\" />\n      <svg:g class=\"brush\"></svg:g>\n    </svg:g>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".timeline .brush-background{fill:#0000000d}.timeline .brush .selection{fill:#0000001a;stroke-width:1px;stroke:#888}.timeline .brush .handle{fill-opacity:0}.timeline .embedded-chart{opacity:.6}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { view: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], scheme: [{\n                type: Input\n            }], customColors: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], onDomainChange: [{\n                type: Output\n            }] } });\n\nclass AdvancedLegendComponent {\n    constructor() {\n        this.label = 'Total';\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.legendItems = [];\n        this.labelFormatting = label => label;\n        this.percentageFormatting = percentage => percentage;\n        this.defaultValueFormatting = value => value.toLocaleString();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getTotal() {\n        return this.data.map(d => Number(d.value)).reduce((sum, d) => sum + d, 0);\n    }\n    update() {\n        this.total = this.getTotal();\n        this.roundedTotal = this.total;\n        this.legendItems = this.getLegendItems();\n    }\n    getLegendItems() {\n        return this.data.map(d => {\n            const label = formatLabel(d.name);\n            const value = d.value;\n            const color = this.colors.getColor(label);\n            const percentage = this.total > 0 ? (value / this.total) * 100 : 0;\n            const formattedLabel = typeof this.labelFormatting === 'function' ? this.labelFormatting(label) : label;\n            return {\n                _value: value,\n                data: d,\n                value,\n                color,\n                label: formattedLabel,\n                displayLabel: trimLabel(formattedLabel, 20),\n                origialLabel: d.name,\n                percentage: this.percentageFormatting ? this.percentageFormatting(percentage) : percentage.toLocaleString()\n            };\n        });\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nAdvancedLegendComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAdvancedLegendComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: { width: \"width\", data: \"data\", colors: \"colors\", label: \"label\", animations: \"animations\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"], components: [{ type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedLegendComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-legend', template: `\n    <div class=\"advanced-pie-legend\" [style.width.px]=\"width\">\n      <div\n        *ngIf=\"animations\"\n        class=\"total-value\"\n        ngx-charts-count-up\n        [countTo]=\"roundedTotal\"\n        [valueFormatting]=\"valueFormatting\"\n      ></div>\n      <div class=\"total-value\" *ngIf=\"!animations\">\n        {{ valueFormatting ? valueFormatting(roundedTotal) : defaultValueFormatting(roundedTotal) }}\n      </div>\n      <div class=\"total-label\">\n        {{ label }}\n      </div>\n      <div class=\"legend-items-container\">\n        <div class=\"legend-items\">\n          <div\n            *ngFor=\"let legendItem of legendItems; trackBy: trackBy\"\n            tabindex=\"-1\"\n            class=\"legend-item\"\n            (mouseenter)=\"activate.emit(legendItem.data)\"\n            (mouseleave)=\"deactivate.emit(legendItem.data)\"\n            (click)=\"select.emit(legendItem.data)\"\n          >\n            <div class=\"item-color\" [style.border-left-color]=\"legendItem.color\"></div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-value\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem._value\"\n              [valueFormatting]=\"valueFormatting\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-value\">\n              {{ valueFormatting ? valueFormatting(legendItem.value) : defaultValueFormatting(legendItem.value) }}\n            </div>\n            <div class=\"item-label\">{{ legendItem.displayLabel }}</div>\n            <div\n              *ngIf=\"animations\"\n              class=\"item-percent\"\n              ngx-charts-count-up\n              [countTo]=\"legendItem.percentage\"\n              [countSuffix]=\"'%'\"\n            ></div>\n            <div *ngIf=\"!animations\" class=\"item-percent\">{{ legendItem.percentage.toLocaleString() }}%</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".advanced-pie-legend{float:left;position:relative;top:50%;transform:translateY(-50%)}.advanced-pie-legend .total-value{font-size:36px}.advanced-pie-legend .total-label{font-size:24px;margin-bottom:19px}.advanced-pie-legend .legend-items-container{width:100%}.advanced-pie-legend .legend-items-container .legend-items{white-space:nowrap;overflow:auto}.advanced-pie-legend .legend-items-container .legend-items .legend-item{margin-right:20px;display:inline-block;cursor:pointer}.advanced-pie-legend .legend-items-container .legend-items .legend-item:focus{outline:none}.advanced-pie-legend .legend-items-container .legend-items .legend-item:hover{color:#000;transition:.2s}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-value{font-size:24px;margin-top:-6px;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-label{font-size:14px;opacity:.7;margin-left:11px;margin-top:-6px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-percent{font-size:24px;opacity:.7;margin-left:11px}.advanced-pie-legend .legend-items-container .legend-items .legend-item .item-color{border-left:4px solid;width:4px;height:42px;float:left;margin-right:7px}\\n\"] }]\n        }], propDecorators: { width: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nconst COMPONENTS = [\n    AreaComponent,\n    BaseChartComponent,\n    CountUpDirective,\n    TooltipArea,\n    ChartComponent,\n    LegendComponent,\n    LegendEntryComponent,\n    ScaleLegendComponent,\n    CircleComponent,\n    CircleSeriesComponent,\n    GridPanelComponent,\n    GridPanelSeriesComponent,\n    SvgLinearGradientComponent,\n    SvgRadialGradientComponent,\n    Timeline,\n    AdvancedLegendComponent\n];\nclass ChartCommonModule {\n}\nChartCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nChartCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, declarations: [AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver], imports: [CommonModule, AxesModule, TooltipModule], exports: [CommonModule, AxesModule, TooltipModule, AreaComponent,\n        BaseChartComponent,\n        CountUpDirective,\n        TooltipArea,\n        ChartComponent,\n        LegendComponent,\n        LegendEntryComponent,\n        ScaleLegendComponent,\n        CircleComponent,\n        CircleSeriesComponent,\n        GridPanelComponent,\n        GridPanelSeriesComponent,\n        SvgLinearGradientComponent,\n        SvgRadialGradientComponent,\n        Timeline,\n        AdvancedLegendComponent, VisibilityObserver] });\nChartCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, imports: [[CommonModule, AxesModule, TooltipModule], CommonModule, AxesModule, TooltipModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: ChartCommonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, AxesModule, TooltipModule],\n                    declarations: [...COMPONENTS, VisibilityObserver],\n                    exports: [CommonModule, AxesModule, TooltipModule, ...COMPONENTS, VisibilityObserver]\n                }]\n        }] });\n\nfunction calculateViewDimensions({ width, height, margins, showXAxis = false, showYAxis = false, xAxisHeight = 0, yAxisWidth = 0, showXLabel = false, showYLabel = false, showLegend = false, legendType = ScaleType.Ordinal, legendPosition = LegendPosition.Right, columns = 12 }) {\n    let xOffset = margins[3];\n    let chartWidth = width;\n    let chartHeight = height - margins[0] - margins[2];\n    if (showLegend && legendPosition === LegendPosition.Right) {\n        if (legendType === ScaleType.Ordinal) {\n            columns -= 2;\n        }\n        else {\n            columns -= 1;\n        }\n    }\n    chartWidth = (chartWidth * columns) / 12;\n    chartWidth = chartWidth - margins[1] - margins[3];\n    if (showXAxis) {\n        chartHeight -= 5;\n        chartHeight -= xAxisHeight;\n        if (showXLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartHeight -= offset;\n        }\n    }\n    if (showYAxis) {\n        chartWidth -= 5;\n        chartWidth -= yAxisWidth;\n        xOffset += yAxisWidth;\n        xOffset += 10;\n        if (showYLabel) {\n            // text height + spacing between axis label and tick labels\n            const offset = 25 + 5;\n            chartWidth -= offset;\n            xOffset += offset;\n        }\n    }\n    chartWidth = Math.max(0, chartWidth);\n    chartHeight = Math.max(0, chartHeight);\n    return {\n        width: Math.floor(chartWidth),\n        height: Math.floor(chartHeight),\n        xOffset: Math.floor(xOffset)\n    };\n}\n\nconst colorSets = [\n    {\n        name: 'vivid',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#647c8a',\n            '#3f51b5',\n            '#2196f3',\n            '#00b862',\n            '#afdf0a',\n            '#a7b61a',\n            '#f3e562',\n            '#ff9800',\n            '#ff5722',\n            '#ff4514'\n        ]\n    },\n    {\n        name: 'natural',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#bf9d76',\n            '#e99450',\n            '#d89f59',\n            '#f2dfa7',\n            '#a5d7c6',\n            '#7794b1',\n            '#afafaf',\n            '#707160',\n            '#ba9383',\n            '#d9d5c3'\n        ]\n    },\n    {\n        name: 'cool',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#a8385d',\n            '#7aa3e5',\n            '#a27ea8',\n            '#aae3f5',\n            '#adcded',\n            '#a95963',\n            '#8796c0',\n            '#7ed3ed',\n            '#50abcc',\n            '#ad6886'\n        ]\n    },\n    {\n        name: 'fire',\n        selectable: true,\n        group: ScaleType.Ordinal,\n        domain: ['#ff3d00', '#bf360c', '#ff8f00', '#ff6f00', '#ff5722', '#e65100', '#ffca28', '#ffab00']\n    },\n    {\n        name: 'solar',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#fff8e1',\n            '#ffecb3',\n            '#ffe082',\n            '#ffd54f',\n            '#ffca28',\n            '#ffc107',\n            '#ffb300',\n            '#ffa000',\n            '#ff8f00',\n            '#ff6f00'\n        ]\n    },\n    {\n        name: 'air',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e1f5fe',\n            '#b3e5fc',\n            '#81d4fa',\n            '#4fc3f7',\n            '#29b6f6',\n            '#03a9f4',\n            '#039be5',\n            '#0288d1',\n            '#0277bd',\n            '#01579b'\n        ]\n    },\n    {\n        name: 'aqua',\n        selectable: true,\n        group: ScaleType.Linear,\n        domain: [\n            '#e0f7fa',\n            '#b2ebf2',\n            '#80deea',\n            '#4dd0e1',\n            '#26c6da',\n            '#00bcd4',\n            '#00acc1',\n            '#0097a7',\n            '#00838f',\n            '#006064'\n        ]\n    },\n    {\n        name: 'flame',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#A10A28',\n            '#D3342D',\n            '#EF6D49',\n            '#FAAD67',\n            '#FDDE90',\n            '#DBED91',\n            '#A9D770',\n            '#6CBA67',\n            '#2C9653',\n            '#146738'\n        ]\n    },\n    {\n        name: 'ocean',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#1D68FB',\n            '#33C0FC',\n            '#4AFFFE',\n            '#AFFFFF',\n            '#FFFC63',\n            '#FDBD2D',\n            '#FC8A25',\n            '#FA4F1E',\n            '#FA141B',\n            '#BA38D1'\n        ]\n    },\n    {\n        name: 'forest',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#55C22D',\n            '#C1F33D',\n            '#3CC099',\n            '#AFFFFF',\n            '#8CFC9D',\n            '#76CFFA',\n            '#BA60FB',\n            '#EE6490',\n            '#C42A1C',\n            '#FC9F32'\n        ]\n    },\n    {\n        name: 'horizon',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2597FB',\n            '#65EBFD',\n            '#99FDD0',\n            '#FCEE4B',\n            '#FEFCFA',\n            '#FDD6E3',\n            '#FCB1A8',\n            '#EF6F7B',\n            '#CB96E8',\n            '#EFDEE0'\n        ]\n    },\n    {\n        name: 'neons',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FF3333',\n            '#FF33FF',\n            '#CC33FF',\n            '#0000FF',\n            '#33CCFF',\n            '#33FFFF',\n            '#33FF66',\n            '#CCFF33',\n            '#FFCC00',\n            '#FF6600'\n        ]\n    },\n    {\n        name: 'picnic',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#FAC51D',\n            '#66BD6D',\n            '#FAA026',\n            '#29BB9C',\n            '#E96B56',\n            '#55ACD2',\n            '#B7332F',\n            '#2C83C9',\n            '#9166B8',\n            '#92E7E8'\n        ]\n    },\n    {\n        name: 'night',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#2B1B5A',\n            '#501356',\n            '#183356',\n            '#28203F',\n            '#391B3C',\n            '#1E2B3C',\n            '#120634',\n            '#2D0432',\n            '#051932',\n            '#453080',\n            '#75267D',\n            '#2C507D',\n            '#4B3880',\n            '#752F7D',\n            '#35547D'\n        ]\n    },\n    {\n        name: 'nightLights',\n        selectable: false,\n        group: ScaleType.Ordinal,\n        domain: [\n            '#4e31a5',\n            '#9c25a7',\n            '#3065ab',\n            '#57468b',\n            '#904497',\n            '#46648b',\n            '#32118d',\n            '#a00fb3',\n            '#1052a2',\n            '#6e51bd',\n            '#b63cc3',\n            '#6c97cb',\n            '#8671c1',\n            '#b455be',\n            '#7496c3'\n        ]\n    }\n];\n\nclass ColorHelper {\n    constructor(scheme, type, domain, customColors) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        this.colorDomain = scheme.domain;\n        this.scaleType = type;\n        this.domain = domain;\n        this.customColors = customColors;\n        this.scale = this.generateColorScheme(scheme, type, this.domain);\n    }\n    generateColorScheme(scheme, type, domain) {\n        if (typeof scheme === 'string') {\n            scheme = colorSets.find(cs => {\n                return cs.name === scheme;\n            });\n        }\n        let colorScale;\n        switch (type) {\n            case ScaleType.Quantile:\n                colorScale = scaleQuantile()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Ordinal:\n                colorScale = scaleOrdinal()\n                    .range(scheme.domain)\n                    .domain(domain);\n                break;\n            case ScaleType.Linear:\n                {\n                    const colorDomain = [...scheme.domain];\n                    if (colorDomain.length === 1) {\n                        colorDomain.push(colorDomain[0]);\n                        this.colorDomain = colorDomain;\n                    }\n                    const points = range(0, 1, 1.0 / colorDomain.length);\n                    colorScale = scaleLinear()\n                        .range(colorDomain)\n                        .domain(points);\n                }\n                break;\n            default:\n                break;\n        }\n        return colorScale;\n    }\n    getColor(value) {\n        if (value === undefined || value === null) {\n            throw new Error('Value can not be null');\n        }\n        if (this.scaleType === ScaleType.Linear) {\n            const valueScale = scaleLinear()\n                .domain(this.domain)\n                .range([0, 1]);\n            return this.scale(valueScale(value));\n        }\n        else {\n            if (typeof this.customColors === 'function') {\n                return this.customColors(value);\n            }\n            const formattedValue = value.toString();\n            let found; // todo type customColors\n            if (this.customColors && this.customColors.length > 0) {\n                found = this.customColors.find(mapping => {\n                    return mapping.name.toLowerCase() === formattedValue.toLowerCase();\n                });\n            }\n            if (found) {\n                return found.value;\n            }\n            else {\n                return this.scale(value);\n            }\n        }\n    }\n    getLinearGradientStops(value, start) {\n        if (start === undefined) {\n            start = this.domain[0];\n        }\n        const valueScale = scaleLinear()\n            .domain(this.domain)\n            .range([0, 1]);\n        const colorValueScale = scaleBand().domain(this.colorDomain).range([0, 1]);\n        const endColor = this.getColor(value);\n        // generate the stops\n        const startVal = valueScale(start);\n        const startColor = this.getColor(start);\n        const endVal = valueScale(value);\n        let i = 1;\n        let currentVal = startVal;\n        const stops = [];\n        stops.push({\n            color: startColor,\n            offset: startVal,\n            originalOffset: startVal,\n            opacity: 1\n        });\n        while (currentVal < endVal && i < this.colorDomain.length) {\n            const color = this.colorDomain[i];\n            const offset = colorValueScale(color);\n            if (offset <= startVal) {\n                i++;\n                continue;\n            }\n            if (offset.toFixed(4) >= (endVal - colorValueScale.bandwidth()).toFixed(4)) {\n                break;\n            }\n            stops.push({\n                color,\n                offset,\n                opacity: 1\n            });\n            currentVal = offset;\n            i++;\n        }\n        if (stops[stops.length - 1].offset < 100) {\n            stops.push({\n                color: endColor,\n                offset: endVal,\n                opacity: 1\n            });\n        }\n        if (endVal === startVal) {\n            stops[0].offset = 0;\n            stops[1].offset = 100;\n        }\n        else {\n            // normalize the offsets into percentages\n            if (stops[stops.length - 1].offset !== 100) {\n                for (const s of stops) {\n                    s.offset = ((s.offset - startVal) / (endVal - startVal)) * 100;\n                }\n            }\n        }\n        return stops;\n    }\n}\n\n/**\n * Based on the data, return an array with unique values.\n *\n * @export\n * @returns array\n */\nfunction getUniqueXDomainValues(results) {\n    const valueSet = new Set();\n    for (const result of results) {\n        for (const d of result.series) {\n            valueSet.add(d.name);\n        }\n    }\n    return Array.from(valueSet);\n}\n/**\n * Get the scaleType of enumerable of values.\n * @returns  'time', 'linear' or 'ordinal'\n */\nfunction getScaleType(values, checkDateType = true) {\n    if (checkDateType) {\n        const allDates = values.every(value => value instanceof Date);\n        if (allDates) {\n            return ScaleType.Time;\n        }\n    }\n    const allNumbers = values.every(value => typeof value === 'number');\n    if (allNumbers) {\n        return ScaleType.Linear;\n    }\n    return ScaleType.Ordinal;\n}\nfunction getXDomainArray(values, xScaleMin, xScaleMax) {\n    const scaleType = getScaleType(values);\n    let xSet = [];\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n    }\n    let min;\n    let max;\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const mappedValues = values.map(v => Number(v));\n        min = xScaleMin ? xScaleMin : Math.min(...mappedValues);\n        max = xScaleMax ? xScaleMax : Math.max(...mappedValues);\n    }\n    if (scaleType === ScaleType.Time) {\n        domain = [new Date(min), new Date(max)];\n        xSet = [...values].sort((a, b) => {\n            const aDate = a.getTime();\n            const bDate = b.getTime();\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        });\n    }\n    else if (scaleType === ScaleType.Linear) {\n        domain = [min, max];\n        // Use compare function to sort numbers numerically\n        xSet = [...values].sort((a, b) => a - b);\n    }\n    else {\n        domain = values;\n        xSet = values;\n    }\n    return { domain, xSet, scaleType };\n}\n\nfunction sortLinear(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        if (direction === 'asc') {\n            return a[property] - b[property];\n        }\n        else {\n            return b[property] - a[property];\n        }\n    });\n}\nfunction sortByDomain(data, property, direction = 'asc', domain) {\n    return data.sort((a, b) => {\n        const aVal = a[property];\n        const bVal = b[property];\n        const aIdx = domain.indexOf(aVal);\n        const bIdx = domain.indexOf(bVal);\n        if (direction === 'asc') {\n            return aIdx - bIdx;\n        }\n        else {\n            return bIdx - aIdx;\n        }\n    });\n}\nfunction sortByTime(data, property, direction = 'asc') {\n    return data.sort((a, b) => {\n        const aDate = a[property].getTime();\n        const bDate = b[property].getTime();\n        if (direction === 'asc') {\n            if (aDate > bDate)\n                return 1;\n            if (bDate > aDate)\n                return -1;\n            return 0;\n        }\n        else {\n            if (aDate > bDate)\n                return -1;\n            if (bDate > aDate)\n                return 1;\n            return 0;\n        }\n    });\n}\n\nclass AreaSeriesComponent {\n    constructor() {\n        this.baseValue = 'auto';\n        this.stacked = false;\n        this.normalized = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradient();\n        let currentArea;\n        let startingArea;\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        if (this.stacked || this.normalized) {\n            currentArea = area()\n                .x(xProperty)\n                .y0((d, i) => this.yScale(d.d0))\n                .y1((d, i) => this.yScale(d.d1));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => this.yScale.range()[0])\n                .y1(d => this.yScale.range()[0]);\n        }\n        else {\n            currentArea = area()\n                .x(xProperty)\n                .y0(() => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => this.yScale(d.value));\n            startingArea = area()\n                .x(xProperty)\n                .y0(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)))\n                .y1(d => (this.baseValue === 'auto' ? this.yScale.range()[0] : this.yScale(this.baseValue)));\n        }\n        currentArea.curve(this.curve);\n        startingArea.curve(this.curve);\n        this.opacity = 0.8;\n        let data = this.data.series;\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        this.path = currentArea(data);\n        this.startingPath = startingArea(data);\n    }\n    updateGradient() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            if (this.stacked || this.normalized) {\n                const d0values = this.data.series.map(d => d.d0);\n                const d1values = this.data.series.map(d => d.d1);\n                const max = Math.max(...d1values);\n                const min = Math.min(...d0values);\n                this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            }\n            else {\n                const values = this.data.series.map(d => d.value);\n                const max = Math.max(...values);\n                this.gradientStops = this.colors.getLinearGradientStops(max);\n            }\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nAreaSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nAreaSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", baseValue: \"baseValue\", colors: \"colors\", scaleType: \"scaleType\", stacked: \"stacked\", normalized: \"normalized\", gradient: \"gradient\", curve: \"curve\", activeEntries: \"activeEntries\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `, isInline: true, components: [{ type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-area-series]',\n                    template: `\n    <svg:g\n      ngx-charts-area\n      class=\"area-series\"\n      [data]=\"data\"\n      [path]=\"path\"\n      [fill]=\"colors.getColor(data.name)\"\n      [stops]=\"gradientStops\"\n      [startingPath]=\"startingPath\"\n      [opacity]=\"opacity\"\n      [gradient]=\"gradient || hasGradient\"\n      [animations]=\"animations\"\n      [class.active]=\"isActive(data)\"\n      [class.inactive]=\"isInactive(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], stacked: [{\n                type: Input\n            }], normalized: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass AreaChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.baseValue = 'auto';\n        this.autoScale = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        if (this.baseValue !== 'auto') {\n            values.push(this.baseValue);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getScaleType(values) {\n        let date = true;\n        let num = true;\n        for (const value of values) {\n            if (isDate(value)) {\n                date = false;\n            }\n            if (isNumber(value)) {\n                num = false;\n            }\n        }\n        if (date) {\n            return ScaleType.Time;\n        }\n        if (num) {\n            return ScaleType.Linear;\n        }\n        return ScaleType.Ordinal;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartComponent, selector: \"ngx-charts-area-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", baseValue: \"baseValue\", autoScale: \"autoScale\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [baseValue]=\"baseValue\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [baseValue]=\"baseValue\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], baseValue: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showXAxisLabel = false;\n        this.showYAxisLabel = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.yDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.seriesType = SeriesType;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            let total = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    total += d.value;\n                }\n            }\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n                if (total > 0) {\n                    d.d0 = (d.d0 * 100) / total;\n                    d.d1 = (d.d1 * 100) / total;\n                }\n                else {\n                    d.d0 = 0;\n                    d.d1 = 0;\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartNormalizedComponent, selector: \"ngx-charts-area-chart-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [activeEntries]=\"activeEntries\"\n              [gradient]=\"gradient\"\n              [normalized]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [showPercentage]=\"true\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [normalized]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = false;\n        this.yAxis = false;\n        this.timeline = false;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.seriesType = SeriesType;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let d0 = 0;\n            for (const group of this.results) {\n                let d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    d.d0 = d0;\n                    d.d1 = d0 + d.value;\n                    d0 += d.value;\n                }\n                else {\n                    d = {\n                        name: val,\n                        value: 0,\n                        d0,\n                        d1: d0\n                    };\n                    group.series.push(d);\n                }\n            }\n        }\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (let i = 0; i < this.xSet.length; i++) {\n            const val = this.xSet[i];\n            let sum = 0;\n            for (const group of this.results) {\n                const d = group.series.find(item => {\n                    let a = item.name;\n                    let b = val;\n                    if (this.scaleType === ScaleType.Time) {\n                        a = a.valueOf();\n                        b = b.valueOf();\n                    }\n                    return a === b;\n                });\n                if (d) {\n                    sum += d.value;\n                }\n            }\n            domain.push(sum);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(0, ...domain);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...domain);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime();\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear();\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().padding(0.1);\n        }\n        scale.range([0, width]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nAreaChartStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAreaChartStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AreaChartStackedComponent, selector: \"ngx-charts-area-chart-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AreaSeriesComponent, selector: \"g[ngx-charts-area-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"baseValue\", \"colors\", \"scaleType\", \"stacked\", \"normalized\", \"gradient\", \"curve\", \"activeEntries\", \"animations\"], outputs: [\"select\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-area-chart-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"area-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-area-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [scaleType]=\"scaleType\"\n              [gradient]=\"gradient\"\n              [activeEntries]=\"activeEntries\"\n              [stacked]=\"true\"\n              [curve]=\"curve\"\n              [animations]=\"animations\"\n            />\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-circle-series\n                [type]=\"seriesType.Stacked\"\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [activeEntries]=\"activeEntries\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event, series)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [legend]=\"legend\"\n        [scaleType]=\"scaleType\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-area-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [gradient]=\"gradient\"\n            [stacked]=\"true\"\n            [curve]=\"curve\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass AreaChartModule {\n}\nAreaChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAreaChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent], imports: [ChartCommonModule], exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent] });\nAreaChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AreaChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent],\n                    exports: [AreaChartComponent, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaSeriesComponent]\n                }]\n        }] });\n\nclass BarComponent {\n    constructor(element) {\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (changes.roundEdges) {\n            this.loadAnimation();\n        }\n        this.update();\n    }\n    update() {\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient || this.stops) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updatePathEl();\n        this.checkToHideBar();\n    }\n    loadAnimation() {\n        this.path = this.getStartingPath();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const node = select(this.element).select('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            node.transition().duration(500).attr('d', path);\n        }\n        else {\n            node.attr('d', path);\n        }\n    }\n    getGradient() {\n        if (this.stops) {\n            return this.stops;\n        }\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        else {\n            if (this.orientation === BarOrientation.Vertical) {\n                path = roundedRect(this.x, this.y + this.height, this.width, 1, 0, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                path = roundedRect(this.x, this.y, 1, this.height, 0, this.edges);\n            }\n        }\n        return path;\n    }\n    getPath() {\n        let radius = this.getRadius();\n        let path;\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                radius = Math.min(this.height, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                radius = Math.min(this.width, radius);\n                path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n            }\n        }\n        else {\n            path = roundedRect(this.x, this.y, this.width, this.height, radius, this.edges);\n        }\n        return path;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            if (this.orientation === BarOrientation.Vertical) {\n                if (this.data.value > 0) {\n                    edges = [true, true, false, false];\n                }\n                else {\n                    edges = [false, false, true, true];\n                }\n            }\n            else if (this.orientation === BarOrientation.Horizontal) {\n                if (this.data.value > 0) {\n                    edges = [false, true, false, true];\n                }\n                else {\n                    edges = [true, false, true, false];\n                }\n            }\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar =\n            this.noBarWhenZero &&\n                ((this.orientation === BarOrientation.Vertical && this.height === 0) ||\n                    (this.orientation === BarOrientation.Horizontal && this.width === 0));\n    }\n}\nBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: { fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", orientation: \"orientation\", roundEdges: \"roundEdges\", gradient: \"gradient\", offset: \"offset\", isActive: \"isActive\", stops: \"stops\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bar]',\n                    template: `\n    <svg:defs *ngIf=\"hasGradient\">\n      <svg:g ngx-charts-svg-linear-gradient [orientation]=\"orientation\" [name]=\"gradientId\" [stops]=\"gradientStops\" />\n    </svg:defs>\n    <svg:path\n      class=\"bar\"\n      stroke=\"none\"\n      role=\"img\"\n      tabIndex=\"-1\"\n      [class.active]=\"isActive\"\n      [class.hidden]=\"hideBar\"\n      [attr.d]=\"path\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.fill]=\"hasGradient ? gradientFill : fill\"\n      (click)=\"select.emit(data)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], stops: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nvar BarChartType;\n(function (BarChartType) {\n    BarChartType[\"Standard\"] = \"standard\";\n    BarChartType[\"Normalized\"] = \"normalized\";\n    BarChartType[\"Stacked\"] = \"stacked\";\n})(BarChartType || (BarChartType = {}));\n\nvar D0Types;\n(function (D0Types) {\n    D0Types[\"positive\"] = \"positive\";\n    D0Types[\"negative\"] = \"negative\";\n})(D0Types || (D0Types = {}));\n\nclass BarLabelComponent {\n    constructor(element) {\n        this.dimensionsChanged = new EventEmitter();\n        this.horizontalPadding = 2;\n        this.verticalPadding = 5;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getSize() {\n        const h = this.element.getBoundingClientRect().height;\n        const w = this.element.getBoundingClientRect().width;\n        return { height: h, width: w, negative: this.value < 0 };\n    }\n    ngAfterViewInit() {\n        this.dimensionsChanged.emit(this.getSize());\n    }\n    update() {\n        if (this.valueFormatting) {\n            this.formatedValue = this.valueFormatting(this.value);\n        }\n        else {\n            this.formatedValue = formatLabel(this.value);\n        }\n        if (this.orientation === 'horizontal') {\n            this.x = this.barX + this.barWidth;\n            // if the value is negative then it's on the left of the x0.\n            // we need to put the data label in front of the bar\n            if (this.value < 0) {\n                this.x = this.x - this.horizontalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.x = this.x + this.horizontalPadding;\n                this.textAnchor = 'start';\n            }\n            this.y = this.barY + this.barHeight / 2;\n        }\n        else {\n            // orientation must be \"vertical\"\n            this.x = this.barX + this.barWidth / 2;\n            this.y = this.barY + this.barHeight;\n            if (this.value < 0) {\n                this.y = this.y + this.verticalPadding;\n                this.textAnchor = 'end';\n            }\n            else {\n                this.y = this.y - this.verticalPadding;\n                this.textAnchor = 'start';\n            }\n            this.transform = `rotate(-45, ${this.x} , ${this.y})`;\n        }\n    }\n}\nBarLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nBarLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: { value: \"value\", valueFormatting: \"valueFormatting\", barX: \"barX\", barY: \"barY\", barWidth: \"barWidth\", barHeight: \"barHeight\", orientation: \"orientation\" }, outputs: { dimensionsChanged: \"dimensionsChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, isInline: true, styles: [\".textDataLabel{font-size:11px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarLabelComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'g[ngx-charts-bar-label]', template: `\n    <svg:text\n      class=\"textDataLabel\"\n      alignment-baseline=\"middle\"\n      [attr.text-anchor]=\"textAnchor\"\n      [attr.transform]=\"transform\"\n      [attr.x]=\"x\"\n      [attr.y]=\"y\"\n    >\n      {{ formatedValue }}\n    </svg:text>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".textDataLabel{font-size:11px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], barX: [{\n                type: Input\n            }], barY: [{\n                type: Input\n            }], barWidth: [{\n                type: Input\n            }], barHeight: [{\n                type: Input\n            }], orientation: [{\n                type: Input\n            }], dimensionsChanged: [{\n                type: Output\n            }] } });\n\nclass SeriesHorizontal {\n    constructor() {\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelWidthChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type;\n        d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        const xScaleMin = Math.max(this.xScale.domain()[0], 0);\n        this.bars = this.series.map(d => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                formattedLabel\n            };\n            bar.height = this.yScale.bandwidth();\n            if (this.type === BarChartType.Standard) {\n                bar.width = Math.abs(this.xScale(value) - this.xScale(xScaleMin));\n                if (value < 0) {\n                    bar.x = this.xScale(value);\n                }\n                else {\n                    bar.x = this.xScale(xScaleMin);\n                }\n                bar.y = this.yScale(label);\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.width = this.xScale(offset1) - this.xScale(offset0);\n                bar.x = this.xScale(offset0);\n                bar.y = 0;\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            // if total is positive then we show it on the right, otherwise on the left\n            if (section.total > 0) {\n                section.width = this.xScale(totalPositive);\n            }\n            else {\n                section.width = this.xScale(totalNegative);\n            }\n            section.height = this.yScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                const section = {};\n                section.series = this.seriesName ?? d.label;\n                section.total = d.value;\n                section.x = this.xScale(0);\n                section.y = this.yScale(d.label);\n                section.width = this.xScale(section.total) - this.xScale(0);\n                section.height = this.yScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n    click(data) {\n        this.select.emit(data);\n    }\n}\nSeriesHorizontal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, deps: [], target: i0.ɵɵFactoryTarget.Component });\nSeriesHorizontal.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelWidthChanged: \"dataLabelWidthChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesHorizontal, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-horizontal]',\n                    template: `\n    <svg:g\n      ngx-charts-bar\n      *ngFor=\"let bar of bars; trackBy: trackBy\"\n      [@animationState]=\"'active'\"\n      [width]=\"bar.width\"\n      [height]=\"bar.height\"\n      [x]=\"bar.x\"\n      [y]=\"bar.y\"\n      [fill]=\"bar.color\"\n      [stops]=\"bar.gradientStops\"\n      [data]=\"bar.data\"\n      [orientation]=\"barOrientation.Horizontal\"\n      [roundEdges]=\"bar.roundEdges\"\n      (select)=\"click($event)\"\n      [gradient]=\"gradient\"\n      [isActive]=\"isActive(bar.data)\"\n      [ariaLabel]=\"bar.ariaLabel\"\n      [animations]=\"animations\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"bar.data\"\n      [noBarWhenZero]=\"noBarWhenZero\"\n    ></svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Horizontal\"\n        (dimensionsChanged)=\"dataLabelWidthChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelWidthChanged: [{\n                type: Output\n            }] } });\n\nclass BarHorizontalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.xDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const spacing = this.yDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.yDomain);\n    }\n    getXDomain() {\n        const values = this.results.map(d => d.value);\n        const min = this.xScaleMin ? Math.min(this.xScaleMin, ...values) : Math.min(0, ...values);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...values) : Math.max(0, ...values);\n        return [min, max];\n    }\n    getYDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.yDomain;\n        }\n        else {\n            domain = this.xDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === 'ordinal') {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalComponent, selector: \"ngx-charts-bar-horizontal\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", xScaleMin: \"xScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-horizontal\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontal2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.height])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const height = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, height]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.groupScale(group.label)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontal2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontal2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontal2DComponent, selector: \"ngx-charts-bar-horizontal-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontal2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"valueScale\"\n          [yScale]=\"groupScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Horizontal\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [xScale]=\"valueScale\"\n              [activeEntries]=\"activeEntries\"\n              [yScale]=\"innerScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [roundEdges]=\"roundEdges\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.barChartType = BarChartType;\n        this.isSSR = false;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalNormalizedComponent, selector: \"ngx-charts-bar-horizontal-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarHorizontalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        this.barChartType = BarChartType;\n        this.isSSR = false;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxWidth = { negative: 0, positive: 0 };\n        }\n        this.margin = [10, 20 + this.dataLabelMaxWidth.positive, 10, 20 + this.dataLabelMaxWidth.negative];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.xScaleMax ? Math.max(this.xScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getYScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.height]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getXScale() {\n        const scale = scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(0, ${this.yScale(group.name)})`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxWidthChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxWidth.negative = Math.max(this.dataLabelMaxWidth.negative, event.size.width);\n        }\n        else {\n            this.dataLabelMaxWidth.positive = Math.max(this.dataLabelMaxWidth.positive, event.size.width);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarHorizontalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarHorizontalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarHorizontalStackedComponent, selector: \"ngx-charts-bar-horizontal-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", xScaleMax: \"xScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesHorizontal, selector: \"g[ngx-charts-series-horizontal]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"tooltipDisabled\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelWidthChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarHorizontalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-horizontal-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [yAxisOffset]=\"dataLabelMaxWidth.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-horizontal\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [activeEntries]=\"activeEntries\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelWidthChanged)=\"onDataLabelMaxWidthChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass SeriesVerticalComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.type = BarChartType.Standard;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dataLabelHeightChanged = new EventEmitter();\n        this.barsForDataLabels = [];\n        this.barOrientation = BarOrientation;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateTooltipSettings();\n        let width;\n        if (this.series.length) {\n            width = this.xScale.bandwidth();\n        }\n        width = Math.round(width);\n        const yScaleMin = Math.max(this.yScale.domain()[0], 0);\n        const d0 = {\n            [D0Types.positive]: 0,\n            [D0Types.negative]: 0\n        };\n        let d0Type = D0Types.positive;\n        let total;\n        if (this.type === BarChartType.Normalized) {\n            total = this.series.map(d => d.value).reduce((sum, d) => sum + d, 0);\n        }\n        this.bars = this.series.map((d, index) => {\n            let value = d.value;\n            const label = this.getLabel(d);\n            const formattedLabel = formatLabel(label);\n            const roundEdges = this.roundEdges;\n            d0Type = value > 0 ? D0Types.positive : D0Types.negative;\n            const bar = {\n                value,\n                label,\n                roundEdges,\n                data: d,\n                width,\n                formattedLabel,\n                height: 0,\n                x: 0,\n                y: 0\n            };\n            if (this.type === BarChartType.Standard) {\n                bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));\n                bar.x = this.xScale(label);\n                if (value < 0) {\n                    bar.y = this.yScale(0);\n                }\n                else {\n                    bar.y = this.yScale(value);\n                }\n            }\n            else if (this.type === BarChartType.Stacked) {\n                const offset0 = d0[d0Type];\n                const offset1 = offset0 + value;\n                d0[d0Type] += value;\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n            }\n            else if (this.type === BarChartType.Normalized) {\n                let offset0 = d0[d0Type];\n                let offset1 = offset0 + value;\n                d0[d0Type] += value;\n                if (total > 0) {\n                    offset0 = (offset0 * 100) / total;\n                    offset1 = (offset1 * 100) / total;\n                }\n                else {\n                    offset0 = 0;\n                    offset1 = 0;\n                }\n                bar.height = this.yScale(offset0) - this.yScale(offset1);\n                bar.x = 0;\n                bar.y = this.yScale(offset1);\n                bar.offset0 = offset0;\n                bar.offset1 = offset1;\n                value = (offset1 - offset0).toFixed(2) + '%';\n            }\n            if (this.colors.scaleType === ScaleType.Ordinal) {\n                bar.color = this.colors.getColor(label);\n            }\n            else {\n                if (this.type === BarChartType.Standard) {\n                    bar.color = this.colors.getColor(value);\n                    bar.gradientStops = this.colors.getLinearGradientStops(value);\n                }\n                else {\n                    bar.color = this.colors.getColor(bar.offset1);\n                    bar.gradientStops = this.colors.getLinearGradientStops(bar.offset1, bar.offset0);\n                }\n            }\n            let tooltipLabel = formattedLabel;\n            bar.ariaLabel = formattedLabel + ' ' + value.toLocaleString();\n            if (this.seriesName !== null && this.seriesName !== undefined) {\n                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;\n                bar.data.series = this.seriesName;\n                bar.ariaLabel = this.seriesName + ' ' + bar.ariaLabel;\n            }\n            bar.tooltipText = this.tooltipDisabled\n                ? undefined\n                : `\n        <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n        <span class=\"tooltip-val\">${this.dataLabelFormatting ? this.dataLabelFormatting(value) : value.toLocaleString()}</span>\n      `;\n            return bar;\n        });\n        this.updateDataLabels();\n    }\n    updateDataLabels() {\n        if (this.type === BarChartType.Stacked) {\n            this.barsForDataLabels = [];\n            const section = {};\n            section.series = this.seriesName;\n            const totalPositive = this.series.map(d => d.value).reduce((sum, d) => (d > 0 ? sum + d : sum), 0);\n            const totalNegative = this.series.map(d => d.value).reduce((sum, d) => (d < 0 ? sum + d : sum), 0);\n            section.total = totalPositive + totalNegative;\n            section.x = 0;\n            section.y = 0;\n            if (section.total > 0) {\n                section.height = this.yScale(totalPositive);\n            }\n            else {\n                section.height = this.yScale(totalNegative);\n            }\n            section.width = this.xScale.bandwidth();\n            this.barsForDataLabels.push(section);\n        }\n        else {\n            this.barsForDataLabels = this.series.map(d => {\n                const section = {};\n                section.series = this.seriesName ?? d.label;\n                section.total = d.value;\n                section.x = this.xScale(d.label);\n                section.y = this.yScale(0);\n                section.height = this.yScale(section.total) - this.yScale(0);\n                section.width = this.xScale.bandwidth();\n                return section;\n            });\n        }\n    }\n    updateTooltipSettings() {\n        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;\n        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(active => {\n            return entry.name === active.name && entry.value === active.value;\n        });\n        return item !== undefined;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLabel(dataItem) {\n        if (dataItem.label) {\n            return dataItem.label;\n        }\n        return dataItem.name;\n    }\n    trackBy(index, bar) {\n        return bar.label;\n    }\n    trackDataLabelBy(index, barLabel) {\n        return index + '#' + barLabel.series + '#' + barLabel.total;\n    }\n}\nSeriesVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nSeriesVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: { dims: \"dims\", type: \"type\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", gradient: \"gradient\", activeEntries: \"activeEntries\", seriesName: \"seriesName\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", roundEdges: \"roundEdges\", animations: \"animations\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dataLabelHeightChanged: \"dataLabelHeightChanged\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: BarLabelComponent, selector: \"g[ngx-charts-bar-label]\", inputs: [\"value\", \"valueFormatting\", \"barX\", \"barY\", \"barWidth\", \"barHeight\", \"orientation\"], outputs: [\"dimensionsChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SeriesVerticalComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-series-vertical]',\n                    template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [@animationState]=\"'active'\"\n        [@.disabled]=\"!animations\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:g\n        ngx-charts-bar\n        *ngFor=\"let bar of bars; trackBy: trackBy\"\n        [width]=\"bar.width\"\n        [height]=\"bar.height\"\n        [x]=\"bar.x\"\n        [y]=\"bar.y\"\n        [fill]=\"bar.color\"\n        [stops]=\"bar.gradientStops\"\n        [data]=\"bar.data\"\n        [orientation]=\"barOrientation.Vertical\"\n        [roundEdges]=\"bar.roundEdges\"\n        [gradient]=\"gradient\"\n        [ariaLabel]=\"bar.ariaLabel\"\n        [isActive]=\"isActive(bar.data)\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"tooltipPlacement\"\n        [tooltipType]=\"tooltipType\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"bar.data\"\n        [noBarWhenZero]=\"noBarWhenZero\"\n        [animations]=\"animations\"\n      ></svg:g>\n    </svg:g>\n    <svg:g *ngIf=\"showDataLabel\">\n      <svg:g\n        ngx-charts-bar-label\n        *ngFor=\"let b of barsForDataLabels; let i = index; trackBy: trackDataLabelBy\"\n        [barX]=\"b.x\"\n        [barY]=\"b.y\"\n        [barWidth]=\"b.width\"\n        [barHeight]=\"b.height\"\n        [value]=\"b.total\"\n        [valueFormatting]=\"dataLabelFormatting\"\n        [orientation]=\"barOrientation.Vertical\"\n        (dimensionsChanged)=\"dataLabelHeightChanged.emit({ size: $event, index: i })\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { dims: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], seriesName: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dataLabelHeightChanged: [{\n                type: Output\n            }] } });\n\nclass BarVerticalComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getXScale() {\n        this.xDomain = this.getXDomain();\n        const spacing = this.xDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().range([0, this.dims.width]).paddingInner(spacing).domain(this.xDomain);\n    }\n    getYScale() {\n        this.yDomain = this.getYDomain();\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.yDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getXDomain() {\n        return this.results.map(d => d.label);\n    }\n    getYDomain() {\n        const values = this.results.map(d => d.value);\n        let min = this.yScaleMin ? Math.min(this.yScaleMin, ...values) : Math.min(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            min = Math.min(min, ...this.yAxisTicks);\n        }\n        let max = this.yScaleMax ? Math.max(this.yScaleMax, ...values) : Math.max(0, ...values);\n        if (this.yAxisTicks && !this.yAxisTicks.some(isNaN)) {\n            max = Math.max(max, ...this.yAxisTicks);\n        }\n        return [min, max];\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.xDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.xDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onDataLabelMaxHeightChanged(event) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (event.index === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalComponent, selector: \"ngx-charts-bar-vertical\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", yScaleMin: \"yScaleMin\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-series-vertical\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [series]=\"results\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [activeEntries]=\"activeEntries\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n          (select)=\"onClick($event)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event)\"\n        ></svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVertical2DComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.scaleType = ScaleType.Ordinal;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.groupPadding = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barOrientation = BarOrientation;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.groupScale = this.getGroupScale();\n        this.innerScale = this.getInnerScale();\n        this.valueScale = this.getValueScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    getGroupScale() {\n        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);\n        return scaleBand()\n            .rangeRound([0, this.dims.width])\n            .paddingInner(spacing)\n            .paddingOuter(spacing / 2)\n            .domain(this.groupDomain);\n    }\n    getInnerScale() {\n        const width = this.groupScale.bandwidth();\n        const spacing = this.innerDomain.length / (width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);\n    }\n    getValueScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(0, ...domain);\n        return [min, max];\n    }\n    groupTransform(group) {\n        return `translate(${this.groupScale(group.label)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVertical2DComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVertical2DComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVertical2DComponent, selector: \"ngx-charts-bar-vertical-2d\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", scaleType: \"scaleType\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", groupPadding: \"groupPadding\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", roundEdges: \"roundEdges\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GridPanelSeriesComponent, selector: \"g[ngx-charts-grid-panel-series]\", inputs: [\"data\", \"dims\", \"xScale\", \"yScale\", \"orient\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVertical2DComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-2d', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-grid-panel-series\n          [xScale]=\"groupScale\"\n          [yScale]=\"valueScale\"\n          [data]=\"results\"\n          [dims]=\"dims\"\n          [orient]=\"barOrientation.Vertical\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"groupScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"valueScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            ngx-charts-series-vertical\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n            [activeEntries]=\"activeEntries\"\n            [xScale]=\"innerScale\"\n            [yScale]=\"valueScale\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [roundEdges]=\"roundEdges\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          ngx-charts-series-vertical\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n          [activeEntries]=\"activeEntries\"\n          [xScale]=\"innerScale\"\n          [yScale]=\"valueScale\"\n          [colors]=\"colors\"\n          [series]=\"group.series\"\n          [dims]=\"dims\"\n          [gradient]=\"gradient\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [showDataLabel]=\"showDataLabel\"\n          [dataLabelFormatting]=\"dataLabelFormatting\"\n          [seriesName]=\"group.name\"\n          [roundEdges]=\"roundEdges\"\n          [animations]=\"animations\"\n          [noBarWhenZero]=\"noBarWhenZero\"\n          (select)=\"onClick($event, group)\"\n          (activate)=\"onActivate($event, group)\"\n          (deactivate)=\"onDeactivate($event, group)\"\n          (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], groupPadding: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalNormalizedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.valueDomain = [0, 100];\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.isSSR = false;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name)}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalNormalizedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalNormalizedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalNormalizedComponent, selector: \"ngx-charts-bar-vertical-normalized\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalNormalizedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-normalized', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\">\n          <svg:g *ngFor=\"let group of results; trackBy: trackBy\" [attr.transform]=\"groupTransform(group)\">\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Normalized\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarVerticalStackedComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.tooltipDisabled = false;\n        this.showGridLines = true;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.barPadding = 8;\n        this.roundDomains = false;\n        this.showDataLabel = false;\n        this.noBarWhenZero = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        this.isSSR = false;\n        this.barChartType = BarChartType;\n        this.trackBy = (index, item) => {\n            return item.name;\n        };\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        if (!this.showDataLabel) {\n            this.dataLabelMaxHeight = { negative: 0, positive: 0 };\n        }\n        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.showDataLabel) {\n            this.dims.height -= this.dataLabelMaxHeight.negative;\n        }\n        this.formatDates();\n        this.groupDomain = this.getGroupDomain();\n        this.innerDomain = this.getInnerDomain();\n        this.valueDomain = this.getValueDomain();\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;\n    }\n    getGroupDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.label)) {\n                domain.push(group.label);\n            }\n        }\n        return domain;\n    }\n    getInnerDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.label)) {\n                    domain.push(d.label);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        let smallest = 0;\n        let biggest = 0;\n        for (const group of this.results) {\n            let smallestSum = 0;\n            let biggestSum = 0;\n            for (const d of group.series) {\n                if (d.value < 0) {\n                    smallestSum += d.value;\n                }\n                else {\n                    biggestSum += d.value;\n                }\n                smallest = d.value < smallest ? d.value : smallest;\n                biggest = d.value > biggest ? d.value : biggest;\n            }\n            domain.push(smallestSum);\n            domain.push(biggestSum);\n        }\n        domain.push(smallest);\n        domain.push(biggest);\n        const min = Math.min(0, ...domain);\n        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);\n        return [min, max];\n    }\n    getXScale() {\n        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);\n        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);\n    }\n    getYScale() {\n        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onDataLabelMaxHeightChanged(event, groupIndex) {\n        if (event.size.negative) {\n            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);\n        }\n        else {\n            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);\n        }\n        if (groupIndex === this.results.length - 1) {\n            setTimeout(() => this.update());\n        }\n    }\n    groupTransform(group) {\n        return `translate(${this.xScale(group.name) || 0}, 0)`;\n    }\n    onClick(data, group) {\n        if (group) {\n            data.series = group.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.innerDomain;\n        }\n        else {\n            domain = this.valueDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.innerDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.valueDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nBarVerticalStackedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBarVerticalStackedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BarVerticalStackedComponent, selector: \"ngx-charts-bar-vertical-stacked\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", showGridLines: \"showGridLines\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", barPadding: \"barPadding\", roundDomains: \"roundDomains\", yScaleMax: \"yScaleMax\", showDataLabel: \"showDataLabel\", dataLabelFormatting: \"dataLabelFormatting\", noBarWhenZero: \"noBarWhenZero\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: SeriesVerticalComponent, selector: \"g[ngx-charts-series-vertical]\", inputs: [\"dims\", \"type\", \"series\", \"xScale\", \"yScale\", \"colors\", \"gradient\", \"activeEntries\", \"seriesName\", \"tooltipDisabled\", \"tooltipTemplate\", \"roundEdges\", \"animations\", \"showDataLabel\", \"dataLabelFormatting\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dataLabelHeightChanged\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1,\n                    transform: '*'\n                }),\n                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarVerticalStackedComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bar-vertical-stacked', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, undefined, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, undefined, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\">\n          <svg:g\n            *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n            [@animationState]=\"'active'\"\n            [attr.transform]=\"groupTransform(group)\"\n          >\n            <svg:g\n              ngx-charts-series-vertical\n              [type]=\"barChartType.Stacked\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [activeEntries]=\"activeEntries\"\n              [colors]=\"colors\"\n              [series]=\"group.series\"\n              [dims]=\"dims\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [showDataLabel]=\"showDataLabel\"\n              [dataLabelFormatting]=\"dataLabelFormatting\"\n              [seriesName]=\"group.name\"\n              [animations]=\"animations\"\n              [noBarWhenZero]=\"noBarWhenZero\"\n              (select)=\"onClick($event, group)\"\n              (activate)=\"onActivate($event, group)\"\n              (deactivate)=\"onDeactivate($event, group)\"\n              (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g *ngIf=\"isSSR\">\n        <svg:g\n          *ngFor=\"let group of results; let index = index; trackBy: trackBy\"\n          [attr.transform]=\"groupTransform(group)\"\n        >\n          <svg:g\n            ngx-charts-series-vertical\n            [type]=\"barChartType.Stacked\"\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [activeEntries]=\"activeEntries\"\n            [colors]=\"colors\"\n            [series]=\"group.series\"\n            [dims]=\"dims\"\n            [gradient]=\"gradient\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [showDataLabel]=\"showDataLabel\"\n            [dataLabelFormatting]=\"dataLabelFormatting\"\n            [seriesName]=\"group.name\"\n            [animations]=\"animations\"\n            [noBarWhenZero]=\"noBarWhenZero\"\n            (select)=\"onClick($event, group)\"\n            (activate)=\"onActivate($event, group)\"\n            (deactivate)=\"onDeactivate($event, group)\"\n            (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1,\n                                    transform: '*'\n                                }),\n                                animate(500, style({ opacity: 0, transform: 'scale(0)' }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], barPadding: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], showDataLabel: [{\n                type: Input\n            }], dataLabelFormatting: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass BarChartModule {\n}\nBarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, declarations: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent], imports: [ChartCommonModule], exports: [BarComponent,\n        BarHorizontalComponent,\n        BarHorizontal2DComponent,\n        BarHorizontalNormalizedComponent,\n        BarHorizontalStackedComponent,\n        BarVerticalComponent,\n        BarVertical2DComponent,\n        BarVerticalNormalizedComponent,\n        BarVerticalStackedComponent,\n        BarLabelComponent,\n        SeriesHorizontal,\n        SeriesVerticalComponent] });\nBarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ],\n                    exports: [\n                        BarComponent,\n                        BarHorizontalComponent,\n                        BarHorizontal2DComponent,\n                        BarHorizontalNormalizedComponent,\n                        BarHorizontalStackedComponent,\n                        BarVerticalComponent,\n                        BarVertical2DComponent,\n                        BarVerticalNormalizedComponent,\n                        BarVerticalStackedComponent,\n                        BarLabelComponent,\n                        SeriesHorizontal,\n                        SeriesVerticalComponent\n                    ]\n                }]\n        }] });\n\nconst cloneDeep = rfdc();\nclass BoxComponent {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.roundEdges = true;\n        this.gradient = false;\n        this.offset = 0;\n        this.isActive = false;\n        this.animations = true;\n        this.noBarWhenZero = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.BarOrientation = BarOrientation;\n        this.initialized = false;\n        this.hasGradient = false;\n        this.hideBar = false;\n        this.nativeElm = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.loadAnimation();\n            this.initialized = true;\n        }\n        else {\n            this.update();\n        }\n    }\n    update() {\n        this.boxStrokeWidth = Math.max(this.strokeWidth, 1);\n        this.whiskerStrokeWidth = Math.max(this.strokeWidth / 2, 1);\n        this.medianLineWidth = 1.5 * this.strokeWidth;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientFill = `url(#${this.gradientId})`;\n        if (this.gradient) {\n            this.gradientStops = this.getGradient();\n            this.hasGradient = true;\n        }\n        else {\n            this.hasGradient = false;\n        }\n        this.updateLineEl();\n        this.updatePathEl();\n        this.checkToHideBar();\n        this.maskLineId = 'mask' + id().toString();\n        this.maskLine = `url(#${this.maskLineId})`;\n        if (this.cd) {\n            this.cd.markForCheck();\n        }\n    }\n    loadAnimation() {\n        this.boxPath = this.oldPath = this.getStartingPath();\n        this.oldLineCoordinates = this.getStartingLineCoordinates();\n        setTimeout(this.update.bind(this), 100);\n    }\n    updatePathEl() {\n        const nodeBar = select(this.nativeElm).selectAll('.bar');\n        const path = this.getPath();\n        if (this.animations) {\n            nodeBar\n                .attr('d', this.oldPath)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attrTween('d', this.pathTween(path, 4));\n        }\n        else {\n            nodeBar.attr('d', path);\n        }\n        this.oldPath = path;\n    }\n    updateLineEl() {\n        const lineEl = select(this.nativeElm).selectAll('.bar-line');\n        const lineCoordinates = this.lineCoordinates;\n        const oldLineCoordinates = this.oldLineCoordinates;\n        if (this.animations) {\n            lineEl\n                .attr('x1', (_, index) => oldLineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => oldLineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => oldLineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => oldLineCoordinates[index].v2.y)\n                .transition()\n                .ease(easeSinInOut)\n                .duration(500)\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        else {\n            lineEl\n                .attr('x1', (_, index) => lineCoordinates[index].v1.x)\n                .attr('y1', (_, index) => lineCoordinates[index].v1.y)\n                .attr('x2', (_, index) => lineCoordinates[index].v2.x)\n                .attr('y2', (_, index) => lineCoordinates[index].v2.y);\n        }\n        this.oldLineCoordinates = [...lineCoordinates];\n    }\n    /**\n     * See [D3 Selections](https://www.d3indepth.com/selections/)\n     * @param d The joined data.\n     * @param index The index of the element within the selection\n     * @param node The node element (Line).\n     */\n    lineTween(attr, d, index, node) {\n        const nodeLineEl = node[index];\n        return nodeLineEl[attr].baseVal.value;\n    }\n    // TODO: Refactor into another .ts file if https://github.com/swimlane/ngx-charts/pull/1179 gets merged.\n    pathTween(d1, precision) {\n        return function () {\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const path0 = this;\n            const path1 = this.cloneNode();\n            path1.setAttribute('d', d1);\n            const n0 = path0?.getTotalLength();\n            const n1 = path1?.getTotalLength();\n            // Uniform sampling of distance based on specified precision.\n            const distances = [0];\n            let i = 0;\n            const dt = precision / Math.max(n0, n1);\n            while (i < 1) {\n                distances.push(i);\n                i += dt;\n            }\n            distances.push(1);\n            // Compute point-interpolators at each distance.\n            const points = distances.map((t) => {\n                const p0 = path0.getPointAtLength(t * n0);\n                const p1 = path1.getPointAtLength(t * n1);\n                return interpolate([p0.x, p0.y], [p1.x, p1.y]);\n            });\n            // 't': T is the fraction of time (between 0 and 1) since the transition began.\n            return (t) => {\n                return t < 1 ? 'M' + points.map((p) => p(t)).join('L') : d1;\n            };\n        };\n    }\n    getStartingPath() {\n        if (!this.animations) {\n            return this.getPath();\n        }\n        const radius = this.roundEdges ? 1 : 0;\n        const { x, y } = this.lineCoordinates[2].v1;\n        return roundedRect(x - this.width, y - 1, this.width, 2, radius, this.edges);\n    }\n    getPath() {\n        const radius = this.getRadius();\n        let path = '';\n        path = roundedRect(this.x, this.y, this.width, this.height, Math.min(this.height, radius), this.edges);\n        return path;\n    }\n    getStartingLineCoordinates() {\n        if (!this.animations) {\n            return [...this.lineCoordinates];\n        }\n        const lineCoordinates = cloneDeep(this.lineCoordinates);\n        lineCoordinates[1].v1.y = lineCoordinates[1].v2.y = lineCoordinates[3].v1.y = lineCoordinates[3].v2.y = lineCoordinates[0].v1.y = lineCoordinates[0].v2.y =\n            lineCoordinates[2].v1.y;\n        return lineCoordinates;\n    }\n    getRadius() {\n        let radius = 0;\n        if (this.roundEdges && this.height > 5 && this.width > 5) {\n            radius = Math.floor(Math.min(5, this.height / 2, this.width / 2));\n        }\n        return radius;\n    }\n    getGradient() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.getStartOpacity()\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    getStartOpacity() {\n        if (this.roundEdges) {\n            return 0.2;\n        }\n        else {\n            return 0.5;\n        }\n    }\n    get edges() {\n        let edges = [false, false, false, false];\n        if (this.roundEdges) {\n            edges = [true, true, true, true];\n        }\n        return edges;\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n    checkToHideBar() {\n        this.hideBar = this.noBarWhenZero && this.height === 0;\n    }\n}\nBoxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nBoxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: { strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", fill: \"fill\", data: \"data\", width: \"width\", height: \"height\", x: \"x\", y: \"y\", lineCoordinates: \"lineCoordinates\", roundEdges: \"roundEdges\", gradient: \"gradient\", gradientStops: \"gradientStops\", offset: \"offset\", isActive: \"isActive\", animations: \"animations\", ariaLabel: \"ariaLabel\", noBarWhenZero: \"noBarWhenZero\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box]',\n                    template: `\n    <svg:defs>\n      <svg:g\n        *ngIf=\"hasGradient\"\n        ngx-charts-svg-linear-gradient\n        [orientation]=\"BarOrientation.Vertical\"\n        [name]=\"gradientId\"\n        [stops]=\"gradientStops\"\n      />\n      <svg:mask [attr.id]=\"maskLineId\">\n        <svg:g>\n          <rect height=\"100%\" width=\"100%\" fill=\"white\" fill-opacity=\"1\" />\n          <path class=\"bar\" [attr.d]=\"boxPath\" fill=\"black\" fill-opacity=\"1\" />\n        </svg:g>\n      </svg:mask>\n    </svg:defs>\n    <svg:g>\n      <svg:path\n        class=\"bar\"\n        role=\"img\"\n        tabIndex=\"-1\"\n        [class.active]=\"isActive\"\n        [class.hidden]=\"hideBar\"\n        [attr.d]=\"boxPath\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"boxStrokeWidth\"\n        [attr.aria-label]=\"ariaLabel\"\n        [attr.fill]=\"hasGradient ? gradientFill : fill\"\n        (click)=\"select.emit(data)\"\n      />\n      <svg:line\n        *ngFor=\"let line of lineCoordinates; let i = index\"\n        class=\"bar-line\"\n        [class.hidden]=\"hideBar\"\n        [attr.x1]=\"line.v1.x\"\n        [attr.y1]=\"line.v1.y\"\n        [attr.x2]=\"line.v2.x\"\n        [attr.y2]=\"line.v2.y\"\n        [attr.stroke]=\"strokeColor\"\n        [attr.stroke-width]=\"i === 2 ? medianLineWidth : whiskerStrokeWidth\"\n        [attr.mask]=\"i ? undefined : maskLine\"\n        fill=\"none\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], lineCoordinates: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], gradientStops: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], noBarWhenZero: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BoxSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    update() {\n        this.updateTooltipSettings();\n        const width = this.series && this.series.series.length ? Math.round(this.xScale.bandwidth()) : null;\n        const seriesName = this.series.name;\n        // Calculate Quantile and Whiskers for each box serie.\n        this.counts = this.series.series;\n        const mappedCounts = this.counts.map(serie => Number(serie.value));\n        this.whiskers = [min(mappedCounts), max(mappedCounts)];\n        // We get the group count and must sort it in order to retrieve quantiles.\n        const groupCounts = this.counts.map(item => item.value).sort((a, b) => Number(a) - Number(b));\n        this.quartiles = this.getBoxQuantiles(groupCounts);\n        this.lineCoordinates = this.getLinesCoordinates(seriesName.toString(), this.whiskers, this.quartiles, width);\n        const value = this.quartiles[1];\n        const formattedLabel = formatLabel(seriesName);\n        const box = {\n            value,\n            data: this.counts,\n            label: seriesName,\n            formattedLabel,\n            width,\n            height: 0,\n            x: 0,\n            y: 0,\n            roundEdges: this.roundEdges,\n            quartiles: this.quartiles,\n            lineCoordinates: this.lineCoordinates\n        };\n        box.height = Math.abs(this.yScale(this.quartiles[0]) - this.yScale(this.quartiles[2]));\n        box.x = this.xScale(seriesName.toString());\n        box.y = this.yScale(this.quartiles[2]);\n        box.ariaLabel = formattedLabel + ' - Median: ' + value.toLocaleString();\n        if (this.colors.scaleType === ScaleType.Ordinal) {\n            box.color = this.colors.getColor(seriesName);\n        }\n        else {\n            box.color = this.colors.getColor(this.quartiles[1]);\n            box.gradientStops = this.colors.getLinearGradientStops(this.quartiles[0], this.quartiles[2]);\n        }\n        const tooltipLabel = formattedLabel;\n        const formattedTooltipLabel = `\n    <span class=\"tooltip-label\">${escapeLabel(tooltipLabel)}</span>\n    <span class=\"tooltip-val\">\n      • Q1: ${this.quartiles[0]} • Q2: ${this.quartiles[1]} • Q3: ${this.quartiles[2]}<br>\n      • Min: ${this.whiskers[0]} • Max: ${this.whiskers[1]}\n    </span>`;\n        box.tooltipText = this.tooltipDisabled ? undefined : formattedTooltipLabel;\n        this.tooltipTitle = this.tooltipDisabled ? undefined : box.tooltipText;\n        this.box = box;\n    }\n    getBoxQuantiles(inputData) {\n        return [quantile(inputData, 0.25), quantile(inputData, 0.5), quantile(inputData, 0.75)];\n    }\n    getLinesCoordinates(seriesName, whiskers, quartiles, barWidth) {\n        // The X value is not being centered, so had to sum half the width to align it.\n        const commonX = this.xScale(seriesName);\n        const offsetX = commonX + barWidth / 2;\n        const medianLineWidth = Math.max(barWidth + 4 * this.strokeWidth, 1);\n        const whiskerLineWidth = Math.max(barWidth / 3, 1);\n        const whiskerZero = this.yScale(whiskers[0]);\n        const whiskerOne = this.yScale(whiskers[1]);\n        const median = this.yScale(quartiles[1]);\n        const topLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerZero },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerZero }\n        };\n        const medianLine = {\n            v1: { x: offsetX + medianLineWidth / 2, y: median },\n            v2: { x: offsetX - medianLineWidth / 2, y: median }\n        };\n        const bottomLine = {\n            v1: { x: offsetX + whiskerLineWidth / 2, y: whiskerOne },\n            v2: { x: offsetX - whiskerLineWidth / 2, y: whiskerOne }\n        };\n        const verticalLine = {\n            v1: { x: offsetX, y: whiskerZero },\n            v2: { x: offsetX, y: whiskerOne }\n        };\n        return [verticalLine, topLine, medianLine, bottomLine];\n    }\n    updateTooltipSettings() {\n        if (this.tooltipDisabled) {\n            this.tooltipPlacement = undefined;\n            this.tooltipType = undefined;\n        }\n        else {\n            if (!this.tooltipPlacement) {\n                this.tooltipPlacement = PlacementTypes.Top;\n            }\n            if (!this.tooltipType) {\n                this.tooltipType = StyleTypes.tooltip;\n            }\n        }\n    }\n}\nBoxSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nBoxSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: { dims: \"dims\", series: \"series\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", animations: \"animations\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", tooltipPlacement: \"tooltipPlacement\", tooltipType: \"tooltipType\", roundEdges: \"roundEdges\", gradient: \"gradient\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: BoxComponent, selector: \"g[ngx-charts-box]\", inputs: [\"strokeColor\", \"strokeWidth\", \"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"lineCoordinates\", \"roundEdges\", \"gradient\", \"gradientStops\", \"offset\", \"isActive\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({ opacity: 0 }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-box-series]',\n                    template: `\n    <svg:g\n      ngx-charts-box\n      [@animationState]=\"'active'\"\n      [@.disabled]=\"!animations\"\n      [width]=\"box.width\"\n      [height]=\"box.height\"\n      [x]=\"box.x\"\n      [y]=\"box.y\"\n      [roundEdges]=\"box.roundEdges\"\n      [fill]=\"box.color\"\n      [gradientStops]=\"box.gradientStops\"\n      [strokeColor]=\"strokeColor\"\n      [strokeWidth]=\"strokeWidth\"\n      [data]=\"box.data\"\n      [lineCoordinates]=\"box.lineCoordinates\"\n      [gradient]=\"gradient\"\n      [ariaLabel]=\"box.ariaLabel\"\n      (select)=\"onClick($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"tooltipPlacement\"\n      [tooltipType]=\"tooltipType\"\n      [tooltipTitle]=\"tooltipTitle\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"box.data\"\n      [animations]=\"animations\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({ opacity: 0 }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], propDecorators: { dims: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], tooltipPlacement: [{\n                type: Input\n            }], tooltipType: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BoxChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        /** Show or hide the legend. */\n        this.legend = false;\n        this.legendPosition = LegendPosition.Right;\n        this.legendTitle = 'Legend';\n        this.showGridLines = true;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.showXAxisLabel = true;\n        this.showYAxisLabel = true;\n        this.roundDomains = false;\n        this.roundEdges = true;\n        this.strokeColor = '#FFFFFF';\n        this.strokeWidth = 2;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        /** Chart Margins (For each side, counterclock wise). */\n        this.margin = [10, 20, 10, 20];\n        /** Chart X axis dimension. */\n        this.xAxisHeight = 0;\n        /** Chart Y axis dimension. */\n        this.yAxisWidth = 0;\n    }\n    trackBy(index, item) {\n        return item.name;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    setColors() {\n        let domain = [];\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    setScales() {\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n    }\n    getXScale(domain, width) {\n        const scale = scaleBand()\n            .domain(domain.map(d => d.toString()))\n            .rangeRound([0, width])\n            .padding(0.5);\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().domain(domain).range([height, 0]);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getUniqueBoxChartXDomainValues(results) {\n        const valueSet = new Set();\n        for (const result of results) {\n            valueSet.add(result.name);\n        }\n        return Array.from(valueSet);\n    }\n    getXDomain() {\n        let domain = [];\n        const values = this.getUniqueBoxChartXDomainValues(this.results);\n        let min;\n        let max;\n        if (typeof values[0] === 'string') {\n            domain = values.map(val => val.toString());\n        }\n        else if (typeof values[0] === 'number') {\n            const mappedValues = values.map(v => Number(v));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [min, max];\n        }\n        else {\n            const mappedValues = values.map(v => Number(new Date(v)));\n            min = Math.min(...mappedValues);\n            max = Math.max(...mappedValues);\n            domain = [new Date(min), new Date(max)];\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        const values = [...domain];\n        const mappedValues = values.map(v => Number(v));\n        const min = Math.min(...mappedValues);\n        const max = Math.max(...mappedValues);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => `${d.name}`);\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    onActivate(data) {\n        this.activate.emit(data);\n    }\n    onDeactivate(data) {\n        this.deactivate.emit(data);\n    }\n    getLegendOptions() {\n        const legendOpts = {\n            scaleType: this.schemeType,\n            colors: this.colors,\n            domain: [],\n            position: this.legendPosition,\n            title: this.legendTitle\n        };\n        if (this.schemeType === ScaleType.Ordinal) {\n            legendOpts.domain = this.xDomain;\n            legendOpts.colors = this.colors;\n        }\n        else {\n            legendOpts.domain = this.yDomain;\n            legendOpts.colors = this.colors.scale;\n        }\n        return legendOpts;\n    }\n}\nBoxChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBoxChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BoxChartComponent, selector: \"ngx-charts-box-chart\", inputs: { legend: \"legend\", legendPosition: \"legendPosition\", legendTitle: \"legendTitle\", legendOptionsConfig: \"legendOptionsConfig\", showGridLines: \"showGridLines\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", roundDomains: \"roundDomains\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", roundEdges: \"roundEdges\", strokeColor: \"strokeColor\", strokeWidth: \"strokeWidth\", tooltipDisabled: \"tooltipDisabled\", gradient: \"gradient\", wrapTicks: \"wrapTicks\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: BoxSeriesComponent, selector: \"g[ngx-charts-box-series]\", inputs: [\"dims\", \"series\", \"xScale\", \"yScale\", \"colors\", \"animations\", \"strokeColor\", \"strokeWidth\", \"tooltipDisabled\", \"tooltipTemplate\", \"tooltipPlacement\", \"tooltipType\", \"roundEdges\", \"gradient\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-box-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"box-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [yScale]=\"yScale\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n      </svg:g>\n      <svg:g [attr.transform]=\"transform\">\n        <svg:g *ngFor=\"let result of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-box-series\n            [xScale]=\"xScale\"\n            [yScale]=\"yScale\"\n            [colors]=\"colors\"\n            [roundEdges]=\"roundEdges\"\n            [strokeColor]=\"strokeColor\"\n            [strokeWidth]=\"strokeWidth\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [series]=\"result\"\n            [dims]=\"dims\"\n            [animations]=\"animations\"\n            [gradient]=\"gradient\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n            (select)=\"onClick($event)\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendOptionsConfig: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], roundEdges: [{\n                type: Input\n            }], strokeColor: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate', { static: false }]\n            }] } });\n\nclass BoxChartModule {\n}\nBoxChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBoxChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent], imports: [ChartCommonModule], exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent] });\nBoxChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BoxChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BoxChartComponent, BoxSeriesComponent, BoxComponent],\n                    exports: [BoxChartComponent, BoxSeriesComponent, BoxComponent]\n                }]\n        }] });\n\nfunction getDomain(values, scaleType, autoScale, minVal, maxVal) {\n    let domain = [];\n    if (scaleType === ScaleType.Linear) {\n        values = values.map(v => Number(v));\n        if (!autoScale) {\n            values.push(0);\n        }\n    }\n    if (scaleType === ScaleType.Time || scaleType === ScaleType.Linear) {\n        const min = minVal || minVal === 0 ? minVal : Math.min(...values);\n        const max = maxVal ? maxVal : Math.max(...values);\n        domain = [min, max];\n    }\n    else {\n        domain = values;\n    }\n    return domain;\n}\nfunction getScale(domain, range, scaleType, roundDomains) {\n    switch (scaleType) {\n        case ScaleType.Time:\n            return scaleTime().range(range).domain(domain);\n        case ScaleType.Linear: {\n            const scale = scaleLinear().range(range).domain(domain);\n            if (roundDomains) {\n                return scale.nice();\n            }\n            return scale;\n        }\n        case ScaleType.Ordinal:\n            return scalePoint()\n                .range([range[0], range[1]])\n                .domain(domain.map(r => r.toString()));\n        default:\n            return undefined;\n    }\n}\n\nclass BubbleSeriesComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.tooltipDisabled = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.circles = this.getCircles();\n    }\n    getCircles() {\n        const seriesName = this.data.name;\n        return this.data.series\n            .map((d, i) => {\n            if (typeof d.y !== 'undefined' && typeof d.x !== 'undefined') {\n                const y = d.y;\n                const x = d.x;\n                const r = d.r;\n                const radius = this.rScale(r || 1);\n                const tooltipLabel = formatLabel(d.name);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(x)) : this.xScale(x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(y)) : this.yScale(y);\n                const color = this.colors.scaleType === ScaleType.Linear ? this.colors.getColor(r) : this.colors.getColor(seriesName);\n                const isActive = !this.activeEntries.length ? true : this.isActive({ name: seriesName });\n                const opacity = isActive ? 1 : 0.3;\n                const data = Object.assign({}, d, {\n                    series: seriesName,\n                    name: d.name,\n                    value: d.y,\n                    x: d.x,\n                    radius: d.r\n                });\n                return {\n                    data,\n                    x,\n                    y,\n                    r,\n                    classNames: [`circle-data-${i}`],\n                    value: y,\n                    label: x,\n                    cx,\n                    cy,\n                    radius,\n                    tooltipLabel,\n                    color,\n                    opacity,\n                    seriesName,\n                    isActive,\n                    transform: `translate(${cx},${cy})`\n                };\n            }\n        })\n            .filter(circle => circle !== undefined);\n    }\n    getTooltipText(circle) {\n        const hasRadius = typeof circle.r !== 'undefined';\n        const hasTooltipLabel = circle.tooltipLabel && circle.tooltipLabel.length;\n        const hasSeriesName = circle.seriesName && circle.seriesName.length;\n        const radiusValue = hasRadius ? formatLabel(circle.r) : '';\n        const xAxisLabel = this.xAxisLabel && this.xAxisLabel !== '' ? `${this.xAxisLabel}:` : '';\n        const yAxisLabel = this.yAxisLabel && this.yAxisLabel !== '' ? `${this.yAxisLabel}:` : '';\n        const x = formatLabel(circle.x);\n        const y = formatLabel(circle.y);\n        const name = hasSeriesName && hasTooltipLabel\n            ? `${circle.seriesName} • ${circle.tooltipLabel}`\n            : circle.seriesName + circle.tooltipLabel;\n        const tooltipTitle = hasSeriesName || hasTooltipLabel ? `<span class=\"tooltip-label\">${escapeLabel(name)}</span>` : '';\n        return `\n      ${tooltipTitle}\n      <span class=\"tooltip-label\">\n        <label>${escapeLabel(xAxisLabel)}</label> ${escapeLabel(x)}<br />\n        <label>${escapeLabel(yAxisLabel)}</label> ${escapeLabel(y)}\n      </span>\n      <span class=\"tooltip-val\">\n        ${escapeLabel(radiusValue)}\n      </span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isVisible(circle) {\n        if (this.activeEntries.length > 0) {\n            return this.isActive({ name: circle.seriesName });\n        }\n        return circle.opacity !== 0;\n    }\n    activateCircle(circle) {\n        circle.barVisible = true;\n        this.activate.emit({ name: this.data.name });\n    }\n    deactivateCircle(circle) {\n        circle.barVisible = false;\n        this.deactivate.emit({ name: this.data.name });\n    }\n    trackBy(index, circle) {\n        return `${circle.data.series} ${circle.data.name}`;\n    }\n}\nBubbleSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nBubbleSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", rScale: \"rScale\", xScaleType: \"xScaleType\", yScaleType: \"yScaleType\", colors: \"colors\", visibleValue: \"visibleValue\", activeEntries: \"activeEntries\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    opacity: 0,\n                    transform: 'scale(0)'\n                }),\n                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-bubble-series]',\n                    template: `\n    <svg:g *ngFor=\"let circle of circles; trackBy: trackBy\">\n      <svg:g [attr.transform]=\"circle.transform\">\n        <svg:g\n          *ngIf=\"!isSSR\"\n          ngx-charts-circle\n          [@animationState]=\"'active'\"\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n        <svg:g\n          *ngIf=\"isSSR\"\n          ngx-charts-circle\n          class=\"circle\"\n          [cx]=\"0\"\n          [cy]=\"0\"\n          [r]=\"circle.radius\"\n          [fill]=\"circle.color\"\n          [style.opacity]=\"circle.opacity\"\n          [class.active]=\"circle.isActive\"\n          [pointerEvents]=\"'all'\"\n          [data]=\"circle.value\"\n          [classNames]=\"circle.classNames\"\n          (select)=\"onClick(circle.data)\"\n          (activate)=\"activateCircle(circle)\"\n          (deactivate)=\"deactivateCircle(circle)\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipPlacement]=\"placementTypes.Top\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"circle.data\"\n        />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    opacity: 0,\n                                    transform: 'scale(0)'\n                                }),\n                                animate(250, style({ opacity: 1, transform: 'scale(1)' }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], rScale: [{\n                type: Input\n            }], xScaleType: [{\n                type: Input\n            }], yScaleType: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], visibleValue: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass BubbleChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.showGridLines = true;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.xAxis = true;\n        this.yAxis = true;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.maxRadius = 10;\n        this.minRadius = 3;\n        this.schemeType = ScaleType.Ordinal;\n        this.tooltipDisabled = false;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.scaleType = ScaleType.Linear;\n        this.margin = [10, 20, 10, 20];\n        this.bubblePadding = [0, 0, 0, 0];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.activeEntries = [];\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        this.seriesDomain = this.results.map(d => d.name);\n        this.rDomain = this.getRDomain();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.transform = `translate(${this.dims.xOffset},${this.margin[0]})`;\n        const colorDomain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.rDomain;\n        this.colors = new ColorHelper(this.scheme, this.schemeType, colorDomain, this.customColors);\n        this.data = this.results;\n        this.minRadius = Math.max(this.minRadius, 1);\n        this.maxRadius = Math.max(this.maxRadius, 1);\n        this.rScale = this.getRScale(this.rDomain, [this.minRadius, this.maxRadius]);\n        this.bubblePadding = [0, 0, 0, 0];\n        this.setScales();\n        this.bubblePadding = this.getBubblePadding();\n        this.setScales();\n        this.legendOptions = this.getLegendOptions();\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    hideCircles() {\n        this.deactivateAll();\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    getBubblePadding() {\n        let yMin = 0;\n        let xMin = 0;\n        let yMax = this.dims.height;\n        let xMax = this.dims.width;\n        for (const s of this.data) {\n            for (const d of s.series) {\n                const r = this.rScale(d.r);\n                const cx = this.xScaleType === ScaleType.Linear ? this.xScale(Number(d.x)) : this.xScale(d.x);\n                const cy = this.yScaleType === ScaleType.Linear ? this.yScale(Number(d.y)) : this.yScale(d.y);\n                xMin = Math.max(r - cx, xMin);\n                yMin = Math.max(r - cy, yMin);\n                yMax = Math.max(cy + r, yMax);\n                xMax = Math.max(cx + r, xMax);\n            }\n        }\n        xMax = Math.max(xMax - this.dims.width, 0);\n        yMax = Math.max(yMax - this.dims.height, 0);\n        return [yMin, xMax, yMax, xMin];\n    }\n    setScales() {\n        let width = this.dims.width;\n        if (this.xScaleMin === undefined && this.xScaleMax === undefined) {\n            width = width - this.bubblePadding[1];\n        }\n        let height = this.dims.height;\n        if (this.yScaleMin === undefined && this.yScaleMax === undefined) {\n            height = height - this.bubblePadding[2];\n        }\n        this.xScale = this.getXScale(this.xDomain, width);\n        this.yScale = this.getYScale(this.yDomain, height);\n    }\n    getYScale(domain, height) {\n        return getScale(domain, [height, this.bubblePadding[0]], this.yScaleType, this.roundDomains);\n    }\n    getXScale(domain, width) {\n        return getScale(domain, [this.bubblePadding[3], width], this.xScaleType, this.roundDomains);\n    }\n    getRScale(domain, range) {\n        const scale = scaleLinear().range(range).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            position: this.legendPosition,\n            title: undefined\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.rDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    getXDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.x)) {\n                    values.push(d.x);\n                }\n            }\n        }\n        this.xScaleType = getScaleType(values);\n        return getDomain(values, this.xScaleType, this.autoScale, this.xScaleMin, this.xScaleMax);\n    }\n    getYDomain() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.y)) {\n                    values.push(d.y);\n                }\n            }\n        }\n        this.yScaleType = getScaleType(values);\n        return getDomain(values, this.yScaleType, this.autoScale, this.yScaleMin, this.yScaleMax);\n    }\n    getRDomain() {\n        let min = Infinity;\n        let max = -Infinity;\n        for (const results of this.results) {\n            for (const d of results.series) {\n                const value = Number(d.r) || 1;\n                min = Math.min(min, value);\n                max = Math.max(max, value);\n            }\n        }\n        return [min, max];\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nBubbleChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nBubbleChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: BubbleChartComponent, selector: \"ngx-charts-bubble-chart\", inputs: { showGridLines: \"showGridLines\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", maxRadius: \"maxRadius\", minRadius: \"minRadius\", autoScale: \"autoScale\", schemeType: \"schemeType\", tooltipDisabled: \"tooltipDisabled\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: BubbleSeriesComponent, selector: \"g[ngx-charts-bubble-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"rScale\", \"xScaleType\", \"yScaleType\", \"colors\", \"visibleValue\", \"activeEntries\", \"xAxisLabel\", \"yAxisLabel\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-bubble-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [activeEntries]=\"activeEntries\"\n      [legendOptions]=\"legendOptions\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"bubble-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [showGridLines]=\"showGridLines\"\n          [dims]=\"dims\"\n          [xScale]=\"xScale\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        />\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [showGridLines]=\"showGridLines\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        />\n        <svg:rect\n          class=\"bubble-chart-area\"\n          x=\"0\"\n          y=\"0\"\n          [attr.width]=\"dims.width\"\n          [attr.height]=\"dims.height\"\n          style=\"fill: rgb(255, 0, 0); opacity: 0; cursor: 'auto';\"\n          (mouseenter)=\"deactivateAll()\"\n        />\n        <svg:g *ngIf=\"!isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.clip-path]=\"clipPath\">\n          <svg:g *ngFor=\"let series of data; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-bubble-series\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [rScale]=\"rScale\"\n              [xScaleType]=\"xScaleType\"\n              [yScaleType]=\"yScaleType\"\n              [xAxisLabel]=\"xAxisLabel\"\n              [yAxisLabel]=\"yAxisLabel\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event, series)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { showGridLines: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], maxRadius: [{\n                type: Input\n            }], minRadius: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass BubbleChartModule {\n}\nBubbleChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nBubbleChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, declarations: [BubbleChartComponent, BubbleSeriesComponent], imports: [ChartCommonModule], exports: [BubbleChartComponent, BubbleSeriesComponent] });\nBubbleChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: BubbleChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [BubbleChartComponent, BubbleSeriesComponent],\n                    exports: [BubbleChartComponent, BubbleSeriesComponent]\n                }]\n        }] });\n\nclass HeatMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.transform = `translate(${this.x} , ${this.y})`;\n        this.startOpacity = 0.3;\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n        if (this.animations) {\n            this.loadAnimation();\n        }\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: this.startOpacity\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0);\n        this.animateToCurrentForm();\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        node.transition().duration(750).attr('opacity', 1);\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    onMouseEnter() {\n        this.activate.emit(this.data);\n    }\n    onMouseLeave() {\n        this.deactivate.emit(this.data);\n    }\n}\nHeatMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nHeatMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: { fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", data: \"data\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseenter\": \"onMouseEnter()\", \"mouseleave\": \"onMouseLeave()\" } }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\">\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        rx=\"3\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], onMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], onMouseLeave: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass HeatCellSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnInit() {\n        if (!this.tooltipText) {\n            this.tooltipText = this.getTooltipText;\n        }\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        const cells = [];\n        this.data.map(row => {\n            row.series.map(cell => {\n                const value = cell.value;\n                cell.series = row.name;\n                cells.push({\n                    row,\n                    cell,\n                    x: this.xScale(row.name),\n                    y: this.yScale(cell.name),\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: this.colors.getColor(value),\n                    data: value,\n                    label: formatLabel(cell.name),\n                    series: row.name\n                });\n            });\n        });\n        return cells;\n    }\n    getTooltipText({ label, data, series }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(series)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${data.toLocaleString()}</span>\n    `;\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nHeatCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nHeatCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: { data: \"data\", colors: \"colors\", xScale: \"xScale\", yScale: \"yScale\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: HeatMapCellComponent, selector: \"g[ngx-charts-heat-map-cell]\", inputs: [\"fill\", \"x\", \"y\", \"width\", \"height\", \"data\", \"gradient\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-heat-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-heat-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [data]=\"c.data\"\n      (select)=\"onClick(c.cell)\"\n      (activate)=\"activate.emit(c.cell)\"\n      (deactivate)=\"deactivate.emit(c.cell)\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"{ series: c.series, name: c.label, value: c.data }\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass HeatMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.innerPadding = 8;\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.tooltipDisabled = false;\n        this.activeEntries = [];\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.scaleType = ScaleType.Linear;\n    }\n    update() {\n        super.update();\n        this.formatDates();\n        this.xDomain = this.getXDomain();\n        this.yDomain = this.getYDomain();\n        this.valueDomain = this.getValueDomain();\n        this.scaleType = getScaleType(this.valueDomain, false);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.scaleType,\n            legendPosition: this.legendPosition\n        });\n        if (this.scaleType === ScaleType.Linear) {\n            let min = this.min;\n            let max = this.max;\n            if (!this.min) {\n                min = Math.min(0, ...this.valueDomain);\n            }\n            if (!this.max) {\n                max = Math.max(...this.valueDomain);\n            }\n            this.valueDomain = [min, max];\n        }\n        this.xScale = this.getXScale();\n        this.yScale = this.getYScale();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.rects = this.getRects();\n    }\n    getXDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            if (!domain.includes(group.name)) {\n                domain.push(group.name);\n            }\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.name)) {\n                    domain.push(d.name);\n                }\n            }\n        }\n        return domain;\n    }\n    getValueDomain() {\n        const domain = [];\n        for (const group of this.results) {\n            for (const d of group.series) {\n                if (!domain.includes(d.value)) {\n                    domain.push(d.value);\n                }\n            }\n        }\n        return domain;\n    }\n    /**\n     * Converts the input to gap paddingInner in fraction\n     * Supports the following inputs:\n     *    Numbers: 8\n     *    Strings: \"8\", \"8px\", \"8%\"\n     *    Arrays: [8,2], \"8,2\", \"[8,2]\"\n     *    Mixed: [8,\"2%\"], [\"8px\",\"2%\"], \"8,2%\", \"[8,2%]\"\n     *\n     * @memberOf HeatMapComponent\n     */\n    getDimension(value, index = 0, N, L) {\n        if (typeof value === 'string') {\n            value = value\n                .replace('[', '')\n                .replace(']', '')\n                .replace('px', '')\n                // tslint:disable-next-line: quotemark\n                .replace(\"'\", '');\n            if (value.includes(',')) {\n                value = value.split(',');\n            }\n        }\n        if (Array.isArray(value) && typeof index === 'number') {\n            return this.getDimension(value[index], null, N, L);\n        }\n        if (typeof value === 'string' && value.includes('%')) {\n            return +value.replace('%', '') / 100;\n        }\n        return N / (L / +value + 1);\n    }\n    getXScale() {\n        const f = this.getDimension(this.innerPadding, 0, this.xDomain.length, this.dims.width);\n        return scaleBand().rangeRound([0, this.dims.width]).domain(this.xDomain).paddingInner(f);\n    }\n    getYScale() {\n        const f = this.getDimension(this.innerPadding, 1, this.yDomain.length, this.dims.height);\n        return scaleBand().rangeRound([this.dims.height, 0]).domain(this.yDomain).paddingInner(f);\n    }\n    getRects() {\n        const rects = [];\n        this.xDomain.map(xVal => {\n            this.yDomain.map(yVal => {\n                rects.push({\n                    x: this.xScale(xVal),\n                    y: this.yScale(yVal),\n                    rx: 3,\n                    width: this.xScale.bandwidth(),\n                    height: this.yScale.bandwidth(),\n                    fill: 'rgba(200,200,200,0.03)'\n                });\n            });\n        });\n        return rects;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: this.scaleType,\n            domain: this.valueDomain,\n            colors: this.scaleType === ScaleType.Ordinal ? this.colors : this.colors.scale,\n            title: this.scaleType === ScaleType.Ordinal ? this.legendTitle : undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        const items = this.results\n            .map(g => g.series)\n            .flat()\n            .filter(i => {\n            if (fromLegend) {\n                return i.label === item.name;\n            }\n            else {\n                return i.name === item.name && i.series === item.series;\n            }\n        });\n        this.activeEntries = [...items];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(event, group, fromLegend = false) {\n        const item = Object.assign({}, event);\n        if (group) {\n            item.series = group.name;\n        }\n        this.activeEntries = this.activeEntries.filter(i => {\n            if (fromLegend) {\n                return i.label !== item.name;\n            }\n            else {\n                return !(i.name === item.name && i.series === item.series);\n            }\n        });\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nHeatMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nHeatMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: HeatMapComponent, selector: \"ngx-charts-heat-map\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", gradient: \"gradient\", innerPadding: \"innerPadding\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", min: \"min\", max: \"max\", activeEntries: \"activeEntries\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: HeatCellSeriesComponent, selector: \"g[ngx-charts-heat-map-cell-series]\", inputs: [\"data\", \"colors\", \"xScale\", \"yScale\", \"gradient\", \"tooltipDisabled\", \"tooltipText\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-heat-map', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [animations]=\"animations\"\n      [legendOptions]=\"legendOptions\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"heat-map chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:rect\n          *ngFor=\"let rect of rects\"\n          [attr.x]=\"rect.x\"\n          [attr.y]=\"rect.y\"\n          [attr.rx]=\"rect.rx\"\n          [attr.width]=\"rect.width\"\n          [attr.height]=\"rect.height\"\n          [attr.fill]=\"rect.fill\"\n        />\n        <svg:g\n          ngx-charts-heat-map-cell-series\n          [xScale]=\"xScale\"\n          [yScale]=\"yScale\"\n          [colors]=\"colors\"\n          [data]=\"results\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, undefined)\"\n          (deactivate)=\"onDeactivate($event, undefined)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass HeatMapModule {\n}\nHeatMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nHeatMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent], imports: [ChartCommonModule], exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent] });\nHeatMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: HeatMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent],\n                    exports: [HeatMapCellComponent, HeatCellSeriesComponent, HeatMapComponent]\n                }]\n        }] });\n\nclass LineComponent {\n    constructor(element, platformId) {\n        this.element = element;\n        this.platformId = platformId;\n        this.fill = 'none';\n        this.animations = true;\n        // @Output() select = new EventEmitter();\n        this.initialized = false;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    ngOnChanges(changes) {\n        if (!this.initialized) {\n            this.initialized = true;\n            this.initialPath = this.path;\n        }\n        else {\n            this.updatePathEl();\n        }\n    }\n    updatePathEl() {\n        const node = select(this.element.nativeElement).select('.line');\n        if (this.animations) {\n            node.transition().duration(750).attr('d', this.path);\n        }\n        else {\n            node.attr('d', this.path);\n        }\n    }\n}\nLineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, deps: [{ token: i0.ElementRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nLineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: { path: \"path\", stroke: \"stroke\", data: \"data\", fill: \"fill\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('animationState', [\n            transition(':enter', [\n                style({\n                    strokeDasharray: 2000,\n                    strokeDashoffset: 2000\n                }),\n                animate(1000, style({\n                    strokeDashoffset: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line]',\n                    template: `\n    <svg:g *ngIf=\"!isSSR\">\n      <svg:path\n        [@animationState]=\"'active'\"\n        class=\"line\"\n        [attr.d]=\"initialPath\"\n        [attr.fill]=\"fill\"\n        [attr.stroke]=\"stroke\"\n        stroke-width=\"1.5px\"\n      />\n    </svg:g>\n    <svg:g *ngIf=\"isSSR\">\n      <svg:path class=\"line\" [attr.d]=\"initialPath\" [attr.fill]=\"fill\" [attr.stroke]=\"stroke\" stroke-width=\"1.5px\" />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    animations: [\n                        trigger('animationState', [\n                            transition(':enter', [\n                                style({\n                                    strokeDasharray: 2000,\n                                    strokeDashoffset: 2000\n                                }),\n                                animate(1000, style({\n                                    strokeDashoffset: 0\n                                }))\n                            ])\n                        ])\n                    ]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { path: [{\n                type: Input\n            }], stroke: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineSeriesComponent {\n    constructor() {\n        this.animations = true;\n        this.barOrientation = BarOrientation;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const data = this.sortData(this.data.series);\n        const lineGen = this.getLineGenerator();\n        this.path = lineGen(data) || '';\n        const areaGen = this.getAreaGenerator();\n        this.areaPath = areaGen(data) || '';\n        if (this.hasRange) {\n            const range = this.getRangeGenerator();\n            this.outerPath = range(data) || '';\n        }\n        if (this.hasGradient) {\n            this.stroke = this.gradientUrl;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            if (max === min) {\n                this.stroke = this.colors.getColor(max);\n            }\n        }\n        else {\n            this.stroke = this.colors.getColor(this.data.name);\n        }\n    }\n    getLineGenerator() {\n        return line()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    getRangeGenerator() {\n        return area()\n            .x(d => {\n            const label = d.name;\n            let value;\n            if (this.scaleType === ScaleType.Time) {\n                value = this.xScale(label);\n            }\n            else if (this.scaleType === ScaleType.Linear) {\n                value = this.xScale(Number(label));\n            }\n            else {\n                value = this.xScale(label);\n            }\n            return value;\n        })\n            .y0(d => this.yScale(typeof d.min === 'number' ? d.min : d.value))\n            .y1(d => this.yScale(typeof d.max === 'number' ? d.max : d.value))\n            .curve(this.curve);\n    }\n    getAreaGenerator() {\n        const xProperty = d => {\n            const label = d.name;\n            return this.xScale(label);\n        };\n        return area()\n            .x(xProperty)\n            .y0(() => this.yScale.range()[0])\n            .y1(d => this.yScale(d.value))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            data = sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            data = sortByTime(data, 'name');\n        }\n        else {\n            data = sortByDomain(data, 'name', 'asc', this.xScale.domain());\n        }\n        return data;\n    }\n    updateGradients() {\n        if (this.colors.scaleType === ScaleType.Linear) {\n            this.hasGradient = true;\n            this.gradientId = 'grad' + id().toString();\n            this.gradientUrl = `url(#${this.gradientId})`;\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n            this.areaGradientStops = this.colors.getLinearGradientStops(max);\n        }\n        else {\n            this.hasGradient = false;\n            this.gradientStops = undefined;\n            this.areaGradientStops = undefined;\n        }\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n}\nLineSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nLineSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: { data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", hasRange: \"hasRange\", animations: \"animations\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: AreaComponent, selector: \"g[ngx-charts-area]\", inputs: [\"data\", \"path\", \"startingPath\", \"fill\", \"opacity\", \"startOpacity\", \"endOpacity\", \"gradient\", \"stops\", \"animations\"], outputs: [\"select\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-line-series]',\n                    template: `\n    <svg:g>\n      <defs>\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          *ngIf=\"hasGradient\"\n          [orientation]=\"barOrientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-area\n        class=\"line-highlight\"\n        [data]=\"data\"\n        [path]=\"areaPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [opacity]=\"0.25\"\n        [startOpacity]=\"0\"\n        [gradient]=\"true\"\n        [stops]=\"areaGradientStops\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-line\n        class=\"line-series\"\n        [data]=\"data\"\n        [path]=\"path\"\n        [stroke]=\"stroke\"\n        [animations]=\"animations\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n      />\n      <svg:g\n        ngx-charts-area\n        *ngIf=\"hasRange\"\n        class=\"line-series-range\"\n        [data]=\"data\"\n        [path]=\"outerPath\"\n        [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n        [class.active]=\"isActive(data)\"\n        [class.inactive]=\"isInactive(data)\"\n        [opacity]=\"rangeFillOpacity\"\n        [animations]=\"animations\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], hasRange: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }] } });\n\nclass LineChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveLinear;\n        this.activeEntries = [];\n        this.trimXAxisTicks = true;\n        this.trimYAxisTicks = true;\n        this.rotateXAxisTicks = true;\n        this.maxXAxisTickLength = 16;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showRefLines = false;\n        this.showRefLabels = true;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.timelineHeight = 50;\n        this.timelinePadding = 10;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        if (this.timeline) {\n            this.dims.height -= this.timelineHeight + this.margin[2] + this.timelinePadding;\n        }\n        this.xDomain = this.getXDomain();\n        if (this.filteredDomain) {\n            this.xDomain = this.filteredDomain;\n        }\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n        this.yScale = this.getYScale(this.yDomain, this.dims.height);\n        this.updateTimeline();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        this.clipPathId = 'clip' + id().toString();\n        this.clipPath = `url(#${this.clipPathId})`;\n    }\n    updateTimeline() {\n        if (this.timeline) {\n            this.timelineWidth = this.dims.width;\n            this.timelineXDomain = this.getXDomain();\n            this.timelineXScale = this.getXScale(this.timelineXDomain, this.timelineWidth);\n            this.timelineYScale = this.getYScale(this.yDomain, this.timelineHeight);\n            this.timelineTransform = `translate(${this.dims.xOffset}, ${-this.margin[2]})`;\n        }\n    }\n    getXDomain() {\n        let values = getUniqueXDomainValues(this.results);\n        this.scaleType = getScaleType(values);\n        let domain = [];\n        if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n        }\n        let min;\n        let max;\n        if (this.scaleType === ScaleType.Time || this.scaleType === ScaleType.Linear) {\n            min = this.xScaleMin ? this.xScaleMin : Math.min(...values);\n            max = this.xScaleMax ? this.xScaleMax : Math.max(...values);\n        }\n        if (this.scaleType === ScaleType.Time) {\n            domain = [new Date(min), new Date(max)];\n            this.xSet = [...values].sort((a, b) => {\n                const aDate = a.getTime();\n                const bDate = b.getTime();\n                if (aDate > bDate)\n                    return 1;\n                if (bDate > aDate)\n                    return -1;\n                return 0;\n            });\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            domain = [min, max];\n            // Use compare function to sort numbers numerically\n            this.xSet = [...values].sort((a, b) => a - b);\n        }\n        else {\n            domain = values;\n            this.xSet = values;\n        }\n        return domain;\n    }\n    getYDomain() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    this.hasRange = true;\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        const values = [...domain];\n        if (!this.autoScale) {\n            values.push(0);\n        }\n        const min = this.yScaleMin ? this.yScaleMin : Math.min(...values);\n        const max = this.yScaleMax ? this.yScaleMax : Math.max(...values);\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        let scale;\n        if (this.scaleType === ScaleType.Time) {\n            scale = scaleTime().range([0, width]).domain(domain);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            scale = scaleLinear().range([0, width]).domain(domain);\n            if (this.roundDomains) {\n                scale = scale.nice();\n            }\n        }\n        else if (this.scaleType === ScaleType.Ordinal) {\n            scale = scalePoint().range([0, width]).padding(0.1).domain(domain);\n        }\n        return scale;\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([height, 0]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    updateDomain(domain) {\n        this.filteredDomain = domain;\n        this.xDomain = this.filteredDomain;\n        this.xScale = this.getXScale(this.xDomain, this.dims.width);\n    }\n    updateHoveredVertical(item) {\n        this.hoveredVertical = item.value;\n        this.deactivateAll();\n    }\n    hideCircles() {\n        this.hoveredVertical = null;\n        this.deactivateAll();\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n    setColors() {\n        let domain;\n        if (this.schemeType === ScaleType.Ordinal) {\n            domain = this.seriesDomain;\n        }\n        else {\n            domain = this.yDomain;\n        }\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        const opts = {\n            scaleType: this.schemeType,\n            colors: undefined,\n            domain: [],\n            title: undefined,\n            position: this.legendPosition\n        };\n        if (opts.scaleType === ScaleType.Ordinal) {\n            opts.domain = this.seriesDomain;\n            opts.colors = this.colors;\n            opts.title = this.legendTitle;\n        }\n        else {\n            opts.domain = this.yDomain;\n            opts.colors = this.colors.scale;\n        }\n        return opts;\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        this.deactivateAll();\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n}\nLineChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLineChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LineChartComponent, selector: \"ngx-charts-line-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", timeline: \"timeline\", gradient: \"gradient\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimXAxisTicks: \"trimXAxisTicks\", trimYAxisTicks: \"trimYAxisTicks\", rotateXAxisTicks: \"rotateXAxisTicks\", maxXAxisTickLength: \"maxXAxisTickLength\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", xAxisTicks: \"xAxisTicks\", yAxisTicks: \"yAxisTicks\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showRefLines: \"showRefLines\", referenceLines: \"referenceLines\", showRefLabels: \"showRefLabels\", xScaleMin: \"xScaleMin\", xScaleMax: \"xScaleMax\", yScaleMin: \"yScaleMin\", yScaleMax: \"yScaleMax\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, host: { listeners: { \"mouseleave\": \"hideCircles()\" } }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }, { propertyName: \"seriesTooltipTemplate\", first: true, predicate: [\"seriesTooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: XAxisComponent, selector: \"g[ngx-charts-x-axis]\", inputs: [\"xScale\", \"dims\", \"trimTicks\", \"rotateTicks\", \"maxTickLength\", \"tickFormatting\", \"showGridLines\", \"showLabel\", \"labelText\", \"ticks\", \"xAxisTickCount\", \"xOrient\", \"xAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: LineSeriesComponent, selector: \"g[ngx-charts-line-series]\", inputs: [\"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"hasRange\", \"animations\"] }, { type: TooltipArea, selector: \"g[ngx-charts-tooltip-area]\", inputs: [\"dims\", \"xSet\", \"xScale\", \"yScale\", \"results\", \"colors\", \"showPercentage\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"hover\"] }, { type: CircleSeriesComponent, selector: \"g[ngx-charts-circle-series]\", inputs: [\"data\", \"type\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"visibleValue\", \"activeEntries\", \"tooltipDisabled\", \"tooltipTemplate\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: Timeline, selector: \"g[ngx-charts-timeline]\", inputs: [\"view\", \"results\", \"scheme\", \"customColors\", \"legend\", \"autoScale\", \"scaleType\", \"height\"], outputs: [\"select\", \"onDomainChange\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-line-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:defs>\n        <svg:clipPath [attr.id]=\"clipPathId\">\n          <svg:rect\n            [attr.width]=\"dims.width + 10\"\n            [attr.height]=\"dims.height + 10\"\n            [attr.transform]=\"'translate(-5, -5)'\"\n          />\n        </svg:clipPath>\n      </svg:defs>\n      <svg:g [attr.transform]=\"transform\" class=\"line-chart chart\">\n        <svg:g\n          ngx-charts-x-axis\n          *ngIf=\"xAxis\"\n          [xScale]=\"xScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showXAxisLabel\"\n          [labelText]=\"xAxisLabel\"\n          [trimTicks]=\"trimXAxisTicks\"\n          [rotateTicks]=\"rotateXAxisTicks\"\n          [maxTickLength]=\"maxXAxisTickLength\"\n          [tickFormatting]=\"xAxisTickFormatting\"\n          [ticks]=\"xAxisTicks\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateXAxisHeight($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          *ngIf=\"yAxis\"\n          [yScale]=\"yScale\"\n          [dims]=\"dims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [ticks]=\"yAxisTicks\"\n          [referenceLines]=\"referenceLines\"\n          [showRefLines]=\"showRefLines\"\n          [showRefLabels]=\"showRefLabels\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g [attr.clip-path]=\"clipPath\">\n          <svg:g *ngIf=\"!isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n          <svg:g *ngIf=\"isSSR\">\n            <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n              <svg:g\n                ngx-charts-line-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [activeEntries]=\"activeEntries\"\n                [scaleType]=\"scaleType\"\n                [curve]=\"curve\"\n                [rangeFillOpacity]=\"rangeFillOpacity\"\n                [hasRange]=\"hasRange\"\n                [animations]=\"animations\"\n              />\n            </svg:g>\n          </svg:g>\n\n          <svg:g *ngIf=\"!tooltipDisabled\" (mouseleave)=\"hideCircles()\">\n            <svg:g\n              ngx-charts-tooltip-area\n              [dims]=\"dims\"\n              [xSet]=\"xSet\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [results]=\"results\"\n              [colors]=\"colors\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"seriesTooltipTemplate\"\n              (hover)=\"updateHoveredVertical($event)\"\n            />\n\n            <svg:g *ngFor=\"let series of results\">\n              <svg:g\n                ngx-charts-circle-series\n                [xScale]=\"xScale\"\n                [yScale]=\"yScale\"\n                [colors]=\"colors\"\n                [data]=\"series\"\n                [scaleType]=\"scaleType\"\n                [visibleValue]=\"hoveredVertical\"\n                [activeEntries]=\"activeEntries\"\n                [tooltipDisabled]=\"tooltipDisabled\"\n                [tooltipTemplate]=\"tooltipTemplate\"\n                (select)=\"onClick($event)\"\n                (activate)=\"onActivate($event)\"\n                (deactivate)=\"onDeactivate($event)\"\n              />\n            </svg:g>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n      <svg:g\n        ngx-charts-timeline\n        *ngIf=\"timeline && scaleType != 'ordinal'\"\n        [attr.transform]=\"timelineTransform\"\n        [results]=\"results\"\n        [view]=\"[timelineWidth, height]\"\n        [height]=\"timelineHeight\"\n        [scheme]=\"scheme\"\n        [customColors]=\"customColors\"\n        [scaleType]=\"scaleType\"\n        [legend]=\"legend\"\n        (onDomainChange)=\"updateDomain($event)\"\n      >\n        <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n          <svg:g\n            ngx-charts-line-series\n            [xScale]=\"timelineXScale\"\n            [yScale]=\"timelineYScale\"\n            [colors]=\"colors\"\n            [data]=\"series\"\n            [scaleType]=\"scaleType\"\n            [curve]=\"curve\"\n            [hasRange]=\"hasRange\"\n            [animations]=\"animations\"\n          />\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], timeline: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimXAxisTicks: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], rotateXAxisTicks: [{\n                type: Input\n            }], maxXAxisTickLength: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], xAxisTicks: [{\n                type: Input\n            }], yAxisTicks: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showRefLines: [{\n                type: Input\n            }], referenceLines: [{\n                type: Input\n            }], showRefLabels: [{\n                type: Input\n            }], xScaleMin: [{\n                type: Input\n            }], xScaleMax: [{\n                type: Input\n            }], yScaleMin: [{\n                type: Input\n            }], yScaleMax: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], seriesTooltipTemplate: [{\n                type: ContentChild,\n                args: ['seriesTooltipTemplate']\n            }], hideCircles: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nclass LineChartModule {\n}\nLineChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nLineChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, declarations: [LineComponent, LineChartComponent, LineSeriesComponent], imports: [ChartCommonModule], exports: [LineComponent, LineChartComponent, LineSeriesComponent] });\nLineChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LineChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [LineComponent, LineChartComponent, LineSeriesComponent],\n                    exports: [LineComponent, LineChartComponent, LineSeriesComponent]\n                }]\n        }] });\n\nclass PieLabelComponent {\n    constructor(platformId) {\n        this.platformId = platformId;\n        this.animations = true;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.trimLabel = trimLabel;\n    }\n    ngOnChanges(changes) {\n        this.setTransforms();\n        this.update();\n    }\n    setTransforms() {\n        if (isPlatformServer(this.platformId)) {\n            this.styleTransform = `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = `translate(${this.textX},${this.textY})`;\n            this.textTransition = !this.animations ? null : 'transform 0.75s';\n        }\n        else {\n            const isIE = /(edge|msie|trident)/i.test(navigator.userAgent);\n            this.styleTransform = isIE ? null : `translate3d(${this.textX}px,${this.textY}px, 0)`;\n            this.attrTransform = !isIE ? null : `translate(${this.textX},${this.textY})`;\n            this.textTransition = isIE || !this.animations ? null : 'transform 0.75s';\n        }\n    }\n    update() {\n        let startRadius = this.radius;\n        if (this.explodeSlices) {\n            startRadius = (this.radius * this.value) / this.max;\n        }\n        const innerArc = arc().innerRadius(startRadius).outerRadius(startRadius);\n        // Calculate innerPos then scale outer position to match label position\n        const innerPos = innerArc.centroid(this.data);\n        let scale = this.data.pos[1] / innerPos[1];\n        if (this.data.pos[1] === 0 || innerPos[1] === 0) {\n            scale = 1;\n        }\n        const outerPos = [scale * innerPos[0], scale * innerPos[1]];\n        this.line = `M${innerPos}L${outerPos}L${this.data.pos}`;\n    }\n    get textX() {\n        return this.data.pos[0];\n    }\n    get textY() {\n        return this.data.pos[1];\n    }\n    textAnchor() {\n        return this.midAngle(this.data) < Math.PI ? TextAnchor.Start : TextAnchor.End;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n}\nPieLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nPieLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: { data: \"data\", radius: \"radius\", label: \"label\", color: \"color\", max: \"max\", value: \"value\", explodeSlices: \"explodeSlices\", animations: \"animations\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\" }, usesOnChanges: true, ngImport: i0, template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieLabelComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-label]',\n                    template: `\n    <title>{{ label }}</title>\n    <svg:g [attr.transform]=\"attrTransform\" [style.transform]=\"styleTransform\" [style.transition]=\"textTransition\">\n      <svg:text\n        class=\"pie-label\"\n        [class.animation]=\"animations\"\n        dy=\".35em\"\n        [style.textAnchor]=\"textAnchor()\"\n        [style.shapeRendering]=\"'crispEdges'\"\n      >\n        {{ labelTrim ? trimLabel(label, labelTrimSize) : label }}\n      </svg:text>\n    </svg:g>\n    <svg:path\n      [attr.d]=\"line\"\n      [attr.stroke]=\"color\"\n      fill=\"none\"\n      class=\"pie-label-line line\"\n      [class.animation]=\"animations\"\n    ></svg:path>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { data: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], color: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }] } });\n\nclass PolarSeriesComponent {\n    constructor() {\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.circleRadius = 3;\n        this.barOrientation = BarOrientation;\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.updateGradients();\n        const line = this.getLineGenerator();\n        const data = this.sortData(this.data.series);\n        const seriesName = this.data.name;\n        const linearScaleType = this.colors.scaleType === ScaleType.Linear;\n        const min = this.yScale.domain()[0];\n        this.seriesColor = this.colors.getColor(linearScaleType ? min : seriesName);\n        this.path = line(data) || '';\n        this.circles = data.map(d => {\n            const a = this.getAngle(d);\n            const r = this.getRadius(d);\n            const value = d.value;\n            const color = this.colors.getColor(linearScaleType ? Math.abs(value) : seriesName);\n            const cData = Object.assign({}, d, {\n                series: seriesName,\n                value,\n                name: d.name\n            });\n            return {\n                data: cData,\n                cx: r * Math.sin(a),\n                cy: -r * Math.cos(a),\n                value,\n                color,\n                label: d.name\n            };\n        });\n        this.active = this.isActive(this.data);\n        this.inactive = this.isInactive(this.data);\n        this.tooltipText = this.tooltipText || (c => this.defaultTooltipText(c));\n    }\n    getAngle(d) {\n        const label = d.name;\n        if (this.scaleType === ScaleType.Time) {\n            return this.xScale(label);\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            return this.xScale(Number(label));\n        }\n        return this.xScale(label);\n    }\n    getRadius(d) {\n        return this.yScale(d.value);\n    }\n    getLineGenerator() {\n        return lineRadial()\n            .angle(d => this.getAngle(d))\n            .radius(d => this.getRadius(d))\n            .curve(this.curve);\n    }\n    sortData(data) {\n        if (this.scaleType === ScaleType.Linear) {\n            return sortLinear(data, 'name');\n        }\n        else if (this.scaleType === ScaleType.Time) {\n            return sortByTime(data, 'name');\n        }\n        return sortByDomain(data, 'name', 'asc', this.xScale.domain());\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item !== undefined;\n    }\n    isInactive(entry) {\n        if (!this.activeEntries || this.activeEntries.length === 0)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name;\n        });\n        return item === undefined;\n    }\n    defaultTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(this.data.name)} • ${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    updateGradients() {\n        this.hasGradient = this.gradient || this.colors.scaleType === ScaleType.Linear;\n        if (!this.hasGradient) {\n            return;\n        }\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        if (this.colors.scaleType === ScaleType.Linear) {\n            const values = this.data.series.map(d => d.value);\n            const max = Math.max(...values);\n            const min = Math.min(...values);\n            this.gradientStops = this.colors.getLinearGradientStops(max, min);\n        }\n        else {\n            this.gradientStops = undefined;\n        }\n    }\n}\nPolarSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPolarSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: { name: \"name\", data: \"data\", xScale: \"xScale\", yScale: \"yScale\", colors: \"colors\", scaleType: \"scaleType\", curve: \"curve\", activeEntries: \"activeEntries\", rangeFillOpacity: \"rangeFillOpacity\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", gradient: \"gradient\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }, { type: LineComponent, selector: \"g[ngx-charts-line]\", inputs: [\"path\", \"stroke\", \"data\", \"fill\", \"animations\"] }, { type: CircleComponent, selector: \"g[ngx-charts-circle]\", inputs: [\"cx\", \"cy\", \"r\", \"fill\", \"stroke\", \"data\", \"classNames\", \"circleOpacity\", \"pointerEvents\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-polar-series]',\n                    template: `\n    <svg:g class=\"polar-charts-series\">\n      <defs>\n        <svg:g\n          ngx-charts-svg-radial-gradient\n          *ngIf=\"hasGradient\"\n          [color]=\"seriesColor\"\n          [name]=\"gradientId\"\n          [startOpacity]=\"0.25\"\n          [endOpacity]=\"1\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:g\n        ngx-charts-line\n        class=\"polar-series-path\"\n        [path]=\"path\"\n        [stroke]=\"hasGradient ? gradientUrl : seriesColor\"\n        [class.active]=\"active\"\n        [class.inactive]=\"inactive\"\n        [attr.fill-opacity]=\"rangeFillOpacity\"\n        [fill]=\"hasGradient ? gradientUrl : seriesColor\"\n        [animations]=\"animations\"\n      />\n      <svg:g\n        ngx-charts-circle\n        *ngFor=\"let circle of circles\"\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circleRadius\"\n        [fill]=\"circle.color\"\n        [style.opacity]=\"inactive ? 0.2 : 1\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n        (select)=\"select.emit(circle.data)\"\n        (activate)=\"activate.emit({ name: circle.data.series })\"\n        (deactivate)=\"deactivate.emit({ name: circle.data.series })\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { name: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], xScale: [{\n                type: Input\n            }], yScale: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], scaleType: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nconst twoPI = 2 * Math.PI;\nclass PolarChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.showGridLines = true;\n        this.curve = curveCardinalClosed;\n        this.activeEntries = [];\n        this.rangeFillOpacity = 0.15;\n        this.trimYAxisTicks = true;\n        this.maxYAxisTickLength = 16;\n        this.roundDomains = false;\n        this.tooltipDisabled = false;\n        this.showSeriesOnHover = true;\n        this.gradient = false;\n        this.yAxisMinScale = 0;\n        this.labelTrim = true;\n        this.labelTrimSize = 10;\n        this.wrapTicks = false;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        // series: any; // ???\n        this.margin = [10, 20, 10, 20];\n        this.xAxisHeight = 0;\n        this.yAxisWidth = 0;\n        this.orientation = Orientation;\n        this.isSSR = false;\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.isSSR = true;\n        }\n    }\n    update() {\n        super.update();\n        this.setDims();\n        this.setScales();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        this.setTicks();\n    }\n    setDims() {\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showXAxis: this.xAxis,\n            showYAxis: this.yAxis,\n            xAxisHeight: this.xAxisHeight,\n            yAxisWidth: this.yAxisWidth,\n            showXLabel: this.showXAxisLabel,\n            showYLabel: this.showYAxisLabel,\n            showLegend: this.legend,\n            legendType: this.schemeType,\n            legendPosition: this.legendPosition\n        });\n        const halfWidth = Math.floor(this.dims.width / 2);\n        const halfHeight = Math.floor(this.dims.height / 2);\n        const outerRadius = (this.outerRadius = Math.min(halfHeight / 1.5, halfWidth / 1.5));\n        const yOffset = Math.max(0, halfHeight - outerRadius);\n        this.yAxisDims = {\n            ...this.dims,\n            width: halfWidth\n        };\n        this.transform = `translate(${this.dims.xOffset}, ${this.margin[0]})`;\n        this.transformYAxis = `translate(0, ${yOffset})`;\n        this.labelOffset = this.dims.height + 40;\n        this.transformPlot = `translate(${halfWidth}, ${halfHeight})`;\n    }\n    setScales() {\n        const xValues = this.getXValues();\n        this.scaleType = getScaleType(xValues);\n        this.xDomain = this.filteredDomain || this.getXDomain(xValues);\n        this.yDomain = this.getYDomain();\n        this.seriesDomain = this.getSeriesDomain();\n        this.xScale = this.getXScale(this.xDomain, twoPI);\n        this.yScale = this.getYScale(this.yDomain, this.outerRadius);\n        this.yAxisScale = this.getYScale(this.yDomain.reverse(), this.outerRadius);\n    }\n    setTicks() {\n        let tickFormat;\n        if (this.xAxisTickFormatting) {\n            tickFormat = this.xAxisTickFormatting;\n        }\n        else if (this.xScale.tickFormat) {\n            tickFormat = this.xScale.tickFormat.apply(this.xScale, [5]);\n        }\n        else {\n            tickFormat = d => {\n                if (isDate(d)) {\n                    return d.toLocaleDateString();\n                }\n                return d.toLocaleString();\n            };\n        }\n        const outerRadius = this.outerRadius;\n        const s = 1.1;\n        this.thetaTicks = this.xDomain.map(d => {\n            const startAngle = this.xScale(d);\n            const dd = s * outerRadius * (startAngle > Math.PI ? -1 : 1);\n            const label = tickFormat(d);\n            const startPos = [outerRadius * Math.sin(startAngle), -outerRadius * Math.cos(startAngle)];\n            const pos = [dd, s * startPos[1]];\n            return {\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle: startAngle,\n                value: outerRadius,\n                label,\n                startPos,\n                pos\n            };\n        });\n        const minDistance = 10;\n        /* from pie chart, abstract out -*/\n        for (let i = 0; i < this.thetaTicks.length - 1; i++) {\n            const a = this.thetaTicks[i];\n            for (let j = i + 1; j < this.thetaTicks.length; j++) {\n                const b = this.thetaTicks[j];\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        this.radiusTicks = this.yAxisScale.ticks(Math.floor(this.dims.height / 50)).map(d => this.yScale(d));\n    }\n    getXValues() {\n        const values = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (!values.includes(d.name)) {\n                    values.push(d.name);\n                }\n            }\n        }\n        return values;\n    }\n    getXDomain(values = this.getXValues()) {\n        if (this.scaleType === ScaleType.Time) {\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        else if (this.scaleType === ScaleType.Linear) {\n            values = values.map(v => Number(v));\n            const min = Math.min(...values);\n            const max = Math.max(...values);\n            return [min, max];\n        }\n        return values;\n    }\n    getYValues() {\n        const domain = [];\n        for (const results of this.results) {\n            for (const d of results.series) {\n                if (domain.indexOf(d.value) < 0) {\n                    domain.push(d.value);\n                }\n                if (d.min !== undefined) {\n                    if (domain.indexOf(d.min) < 0) {\n                        domain.push(d.min);\n                    }\n                }\n                if (d.max !== undefined) {\n                    if (domain.indexOf(d.max) < 0) {\n                        domain.push(d.max);\n                    }\n                }\n            }\n        }\n        return domain;\n    }\n    getYDomain(domain = this.getYValues()) {\n        let min = Math.min(...domain);\n        const max = Math.max(this.yAxisMinScale, ...domain);\n        min = Math.max(0, min);\n        if (!this.autoScale) {\n            min = Math.min(0, min);\n        }\n        return [min, max];\n    }\n    getSeriesDomain() {\n        return this.results.map(d => d.name);\n    }\n    getXScale(domain, width) {\n        switch (this.scaleType) {\n            case ScaleType.Time:\n                return scaleTime().range([0, width]).domain(domain);\n            case ScaleType.Linear: {\n                const scale = scaleLinear().range([0, width]).domain(domain);\n                return this.roundDomains ? scale.nice() : scale;\n            }\n            default:\n                return scalePoint()\n                    .range([0, width - twoPI / domain.length])\n                    .padding(0)\n                    .domain(domain);\n        }\n    }\n    getYScale(domain, height) {\n        const scale = scaleLinear().range([0, height]).domain(domain);\n        return this.roundDomains ? scale.nice() : scale;\n    }\n    onClick(data, series) {\n        if (series) {\n            data.series = series.name;\n        }\n        this.select.emit(data);\n    }\n    setColors() {\n        const domain = this.schemeType === ScaleType.Ordinal ? this.seriesDomain : this.yDomain.reverse();\n        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);\n    }\n    getLegendOptions() {\n        if (this.schemeType === ScaleType.Ordinal) {\n            return {\n                scaleType: this.schemeType,\n                colors: this.colors,\n                domain: this.seriesDomain,\n                title: this.legendTitle,\n                position: this.legendPosition\n            };\n        }\n        return {\n            scaleType: this.schemeType,\n            colors: this.colors.scale,\n            domain: this.yDomain,\n            title: undefined,\n            position: this.legendPosition\n        };\n    }\n    updateYAxisWidth({ width }) {\n        this.yAxisWidth = width;\n        this.update();\n    }\n    updateXAxisHeight({ height }) {\n        this.xAxisHeight = height;\n        this.update();\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = this.showSeriesOnHover ? [item, ...this.activeEntries] : this.activeEntries;\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    deactivateAll() {\n        this.activeEntries = [...this.activeEntries];\n        for (const entry of this.activeEntries) {\n            this.deactivate.emit({ value: entry, entries: [] });\n        }\n        this.activeEntries = [];\n    }\n    trackBy(index, item) {\n        return `${item.name}`;\n    }\n}\nPolarChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPolarChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PolarChartComponent, selector: \"ngx-charts-polar-chart\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", xAxis: \"xAxis\", yAxis: \"yAxis\", showXAxisLabel: \"showXAxisLabel\", showYAxisLabel: \"showYAxisLabel\", xAxisLabel: \"xAxisLabel\", yAxisLabel: \"yAxisLabel\", autoScale: \"autoScale\", showGridLines: \"showGridLines\", curve: \"curve\", activeEntries: \"activeEntries\", schemeType: \"schemeType\", rangeFillOpacity: \"rangeFillOpacity\", trimYAxisTicks: \"trimYAxisTicks\", maxYAxisTickLength: \"maxYAxisTickLength\", xAxisTickFormatting: \"xAxisTickFormatting\", yAxisTickFormatting: \"yAxisTickFormatting\", roundDomains: \"roundDomains\", tooltipDisabled: \"tooltipDisabled\", showSeriesOnHover: \"showSeriesOnHover\", gradient: \"gradient\", yAxisMinScale: \"yAxisMinScale\", labelTrim: \"labelTrim\", labelTrimSize: \"labelTrimSize\", wrapTicks: \"wrapTicks\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: YAxisComponent, selector: \"g[ngx-charts-y-axis]\", inputs: [\"yScale\", \"dims\", \"trimTicks\", \"maxTickLength\", \"tickFormatting\", \"ticks\", \"showGridLines\", \"showLabel\", \"labelText\", \"yAxisTickCount\", \"yOrient\", \"referenceLines\", \"showRefLines\", \"showRefLabels\", \"yAxisOffset\", \"wrapTicks\"], outputs: [\"dimensionsChanged\"] }, { type: AxisLabelComponent, selector: \"g[ngx-charts-axis-label]\", inputs: [\"orient\", \"label\", \"offset\", \"width\", \"height\"] }, { type: PolarSeriesComponent, selector: \"g[ngx-charts-polar-series]\", inputs: [\"name\", \"data\", \"xScale\", \"yScale\", \"colors\", \"scaleType\", \"curve\", \"activeEntries\", \"rangeFillOpacity\", \"tooltipDisabled\", \"tooltipText\", \"gradient\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], animations: [\n        trigger('animationState', [\n            transition(':leave', [\n                style({\n                    opacity: 1\n                }),\n                animate(500, style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-polar-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g class=\"polar-chart chart\" [attr.transform]=\"transform\">\n        <svg:g [attr.transform]=\"transformPlot\">\n          <svg:circle class=\"polar-chart-background\" cx=\"0\" cy=\"0\" [attr.r]=\"this.outerRadius\" />\n          <svg:g *ngIf=\"showGridLines\">\n            <svg:circle\n              *ngFor=\"let r of radiusTicks\"\n              class=\"gridline-path radial-gridline-path\"\n              cx=\"0\"\n              cy=\"0\"\n              [attr.r]=\"r\"\n            />\n          </svg:g>\n          <svg:g *ngIf=\"xAxis\">\n            <svg:g\n              ngx-charts-pie-label\n              *ngFor=\"let tick of thetaTicks\"\n              [data]=\"tick\"\n              [radius]=\"outerRadius\"\n              [label]=\"tick.label\"\n              [max]=\"outerRadius\"\n              [value]=\"showGridLines ? 1 : outerRadius\"\n              [explodeSlices]=\"true\"\n              [animations]=\"animations\"\n              [labelTrim]=\"labelTrim\"\n              [labelTrimSize]=\"labelTrimSize\"\n            ></svg:g>\n          </svg:g>\n        </svg:g>\n        <svg:g\n          ngx-charts-y-axis\n          [attr.transform]=\"transformYAxis\"\n          *ngIf=\"yAxis\"\n          [yScale]=\"yAxisScale\"\n          [dims]=\"yAxisDims\"\n          [showGridLines]=\"showGridLines\"\n          [showLabel]=\"showYAxisLabel\"\n          [labelText]=\"yAxisLabel\"\n          [trimTicks]=\"trimYAxisTicks\"\n          [maxTickLength]=\"maxYAxisTickLength\"\n          [tickFormatting]=\"yAxisTickFormatting\"\n          [wrapTicks]=\"wrapTicks\"\n          (dimensionsChanged)=\"updateYAxisWidth($event)\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-axis-label\n          *ngIf=\"xAxis && showXAxisLabel\"\n          [label]=\"xAxisLabel\"\n          [offset]=\"labelOffset\"\n          [orient]=\"orientation.Bottom\"\n          [height]=\"dims.height\"\n          [width]=\"dims.width\"\n        ></svg:g>\n        <svg:g *ngIf=\"!isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\" [@animationState]=\"'active'\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n        <svg:g *ngIf=\"isSSR\" [attr.transform]=\"transformPlot\">\n          <svg:g *ngFor=\"let series of results; trackBy: trackBy\">\n            <svg:g\n              ngx-charts-polar-series\n              [gradient]=\"gradient\"\n              [xScale]=\"xScale\"\n              [yScale]=\"yScale\"\n              [colors]=\"colors\"\n              [data]=\"series\"\n              [activeEntries]=\"activeEntries\"\n              [scaleType]=\"scaleType\"\n              [curve]=\"curve\"\n              [rangeFillOpacity]=\"rangeFillOpacity\"\n              [animations]=\"animations\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n            />\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [\n                        trigger('animationState', [\n                            transition(':leave', [\n                                style({\n                                    opacity: 1\n                                }),\n                                animate(500, style({\n                                    opacity: 0\n                                }))\n                            ])\n                        ])\n                    ], styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\", \".polar-chart .polar-chart-background{fill:none}.polar-chart .radial-gridline-path{stroke-dasharray:10 10;fill:none}.polar-chart .pie-label-line{stroke:#2f3646}.polar-charts-series .polar-series-area,.polar-series-path{pointer-events:none}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], xAxis: [{\n                type: Input\n            }], yAxis: [{\n                type: Input\n            }], showXAxisLabel: [{\n                type: Input\n            }], showYAxisLabel: [{\n                type: Input\n            }], xAxisLabel: [{\n                type: Input\n            }], yAxisLabel: [{\n                type: Input\n            }], autoScale: [{\n                type: Input\n            }], showGridLines: [{\n                type: Input\n            }], curve: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], schemeType: [{\n                type: Input\n            }], rangeFillOpacity: [{\n                type: Input\n            }], trimYAxisTicks: [{\n                type: Input\n            }], maxYAxisTickLength: [{\n                type: Input\n            }], xAxisTickFormatting: [{\n                type: Input\n            }], yAxisTickFormatting: [{\n                type: Input\n            }], roundDomains: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], showSeriesOnHover: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], yAxisMinScale: [{\n                type: Input\n            }], labelTrim: [{\n                type: Input\n            }], labelTrimSize: [{\n                type: Input\n            }], wrapTicks: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieArcComponent {\n    constructor(element) {\n        this.startAngle = 0;\n        this.endAngle = Math.PI * 2;\n        this.cornerRadius = 0;\n        this.explodeSlices = false;\n        this.gradient = false;\n        this.animate = true;\n        this.pointerEvents = true;\n        this.isActive = false;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.barOrientation = BarOrientation;\n        this.initialized = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    getGradient() {\n        return this.gradient ? this.gradientFill : this.fill;\n    }\n    getPointerEvents() {\n        return this.pointerEvents ? 'auto' : 'none';\n    }\n    update() {\n        const calc = this.calculateArc();\n        this.startOpacity = 0.5;\n        this.radialGradientId = 'linearGrad' + id().toString();\n        this.gradientFill = `url(#${this.radialGradientId})`;\n        if (this.animate) {\n            if (this.initialized) {\n                this.updateAnimation();\n            }\n            else {\n                this.loadAnimation();\n                this.initialized = true;\n            }\n        }\n        else {\n            this.path = calc.startAngle(this.startAngle).endAngle(this.endAngle)();\n        }\n    }\n    calculateArc() {\n        let outerRadius = this.outerRadius;\n        if (this.explodeSlices && this.innerRadius === 0) {\n            outerRadius = (this.outerRadius * this.value) / this.max;\n        }\n        return arc().innerRadius(this.innerRadius).outerRadius(outerRadius).cornerRadius(this.cornerRadius);\n    }\n    loadAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const copyOfD = Object.assign({}, d);\n            copyOfD.endAngle = copyOfD.startAngle;\n            const interpolater = interpolate(copyOfD, copyOfD);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        })\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    updateAnimation() {\n        const node = select(this.element)\n            .selectAll('.arc')\n            .data([{ startAngle: this.startAngle, endAngle: this.endAngle }]);\n        const calc = this.calculateArc();\n        node\n            .transition()\n            .duration(750)\n            .attrTween('d', function (d) {\n            this._current = this._current || d;\n            const interpolater = interpolate(this._current, d);\n            this._current = interpolater(0);\n            return function (t) {\n                return calc(interpolater(t));\n            };\n        });\n    }\n    onClick() {\n        clearTimeout(this._timeout);\n        this._timeout = setTimeout(() => this.select.emit(this.data), 200);\n    }\n    onDblClick(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        clearTimeout(this._timeout);\n        this.dblclick.emit({\n            data: this.data,\n            nativeEvent: event\n        });\n    }\n}\nPieArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: { fill: \"fill\", startAngle: \"startAngle\", endAngle: \"endAngle\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", cornerRadius: \"cornerRadius\", value: \"value\", max: \"max\", data: \"data\", explodeSlices: \"explodeSlices\", gradient: \"gradient\", animate: \"animate\", pointerEvents: \"pointerEvents\", isActive: \"isActive\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgRadialGradientComponent, selector: \"g[ngx-charts-svg-radial-gradient]\", inputs: [\"color\", \"name\", \"startOpacity\", \"endOpacity\", \"cx\", \"cy\", \"stops\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-arc]',\n                    template: `\n    <svg:g class=\"arc-group\">\n      <svg:defs *ngIf=\"gradient\">\n        <svg:g ngx-charts-svg-radial-gradient [color]=\"fill\" [name]=\"radialGradientId\" [startOpacity]=\"startOpacity\" />\n      </svg:defs>\n      <svg:path\n        [attr.d]=\"path\"\n        class=\"arc\"\n        [class.active]=\"isActive\"\n        [attr.fill]=\"getGradient()\"\n        (click)=\"onClick()\"\n        (dblclick)=\"onDblClick($event)\"\n        (mouseenter)=\"activate.emit(data)\"\n        (mouseleave)=\"deactivate.emit(data)\"\n        [style.pointer-events]=\"getPointerEvents()\"\n      />\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], endAngle: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animate: [{\n                type: Input\n            }], pointerEvents: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass PieSeriesComponent {\n    constructor() {\n        this.series = [];\n        this.innerRadius = 60;\n        this.outerRadius = 80;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.dblclick = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        const pieGenerator = pie()\n            .value(d => d.value)\n            .sort(null);\n        const arcData = pieGenerator(this.series);\n        this.max = max(arcData, d => {\n            return d.value;\n        });\n        this.data = this.calculateLabelPositions(arcData);\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    midAngle(d) {\n        return d.startAngle + (d.endAngle - d.startAngle) / 2;\n    }\n    outerArc() {\n        const factor = 1.5;\n        return arc()\n            .innerRadius(this.outerRadius * factor)\n            .outerRadius(this.outerRadius * factor);\n    }\n    calculateLabelPositions(pieData) {\n        const factor = 1.5;\n        const minDistance = 10;\n        const labelPositions = pieData;\n        labelPositions.forEach(d => {\n            d.pos = this.outerArc().centroid(d);\n            d.pos[0] = factor * this.outerRadius * (this.midAngle(d) < Math.PI ? 1 : -1);\n        });\n        for (let i = 0; i < labelPositions.length - 1; i++) {\n            const a = labelPositions[i];\n            if (!this.labelVisible(a)) {\n                continue;\n            }\n            for (let j = i + 1; j < labelPositions.length; j++) {\n                const b = labelPositions[j];\n                if (!this.labelVisible(b)) {\n                    continue;\n                }\n                // if they're on the same side\n                if (b.pos[0] * a.pos[0] > 0) {\n                    // if they're overlapping\n                    const o = minDistance - Math.abs(b.pos[1] - a.pos[1]);\n                    if (o > 0) {\n                        // push the second up or down\n                        b.pos[1] += Math.sign(b.pos[0]) * o;\n                    }\n                }\n            }\n        }\n        return labelPositions;\n    }\n    labelVisible(myArc) {\n        return this.showLabels && myArc.endAngle - myArc.startAngle > Math.PI / 30;\n    }\n    getTooltipTitle(a) {\n        return this.tooltipTemplate ? undefined : this.tooltipText(a);\n    }\n    labelText(myArc) {\n        if (this.labelFormatting) {\n            return this.labelFormatting(myArc.data.name);\n        }\n        return this.label(myArc);\n    }\n    label(myArc) {\n        return formatLabel(myArc.data.name);\n    }\n    defaultTooltipText(myArc) {\n        const label = this.label(myArc);\n        const val = formatLabel(myArc.data.value);\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    color(myArc) {\n        return this.colors.getColor(this.label(myArc));\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n}\nPieSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nPieSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: { colors: \"colors\", series: \"series\", dims: \"dims\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", explodeSlices: \"explodeSlices\", showLabels: \"showLabels\", gradient: \"gradient\", activeEntries: \"activeEntries\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\", dblclick: \"dblclick\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieLabelComponent, selector: \"g[ngx-charts-pie-label]\", inputs: [\"data\", \"radius\", \"label\", \"color\", \"max\", \"value\", \"explodeSlices\", \"animations\", \"labelTrim\", \"labelTrimSize\"] }, { type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-series]',\n                    template: `\n    <svg:g *ngFor=\"let arc of data; trackBy: trackBy\">\n      <svg:g\n        ngx-charts-pie-label\n        *ngIf=\"labelVisible(arc)\"\n        [data]=\"arc\"\n        [radius]=\"outerRadius\"\n        [color]=\"color(arc)\"\n        [label]=\"labelText(arc)\"\n        [labelTrim]=\"trimLabels\"\n        [labelTrimSize]=\"maxLabelLength\"\n        [max]=\"max\"\n        [value]=\"arc.value\"\n        [explodeSlices]=\"explodeSlices\"\n        [animations]=\"animations\"\n      ></svg:g>\n      <svg:g\n        ngx-charts-pie-arc\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [gradient]=\"gradient\"\n        [data]=\"arc.data\"\n        [max]=\"max\"\n        [explodeSlices]=\"explodeSlices\"\n        [isActive]=\"isActive(arc.data)\"\n        [animate]=\"animations\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n        (dblclick)=\"dblclick.emit($event)\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"placementTypes.Top\"\n        [tooltipType]=\"styleTypes.tooltip\"\n        [tooltipTitle]=\"getTooltipTitle(arc)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"arc.data\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { colors: [{\n                type: Input\n            }], series: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], showLabels: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], dblclick: [{\n                type: Output\n            }] } });\n\nclass AdvancedPieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: (this.width * 4) / 12.0,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        const xOffset = this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.legendWidth = this.width - this.dims.width - this.margin[1];\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2.5;\n        this.innerRadius = this.outerRadius * 0.75;\n        this.transform = `translate(${xOffset} , ${yOffset})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nAdvancedPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nAdvancedPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: AdvancedPieChartComponent, selector: \"ngx-charts-advanced-pie-chart\", inputs: { gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", valueFormatting: \"valueFormatting\", nameFormatting: \"nameFormatting\", percentageFormatting: \"percentageFormatting\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }, { type: AdvancedLegendComponent, selector: \"ngx-charts-advanced-legend\", inputs: [\"width\", \"data\", \"colors\", \"label\", \"animations\", \"valueFormatting\", \"labelFormatting\", \"percentageFormatting\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: AdvancedPieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-advanced-pie-chart', template: `\n    <div [style.width.px]=\"width\" [style.height.px]=\"height\">\n      <div class=\"advanced-pie chart\" [style.width.px]=\"dims.width\" [style.height.px]=\"dims.height\">\n        <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n          <svg:g [attr.transform]=\"transform\" class=\"pie chart\">\n            <svg:g\n              ngx-charts-pie-series\n              [colors]=\"colors\"\n              [series]=\"results\"\n              [innerRadius]=\"innerRadius\"\n              [activeEntries]=\"activeEntries\"\n              [outerRadius]=\"outerRadius\"\n              [gradient]=\"gradient\"\n              [tooltipDisabled]=\"tooltipDisabled\"\n              [tooltipTemplate]=\"tooltipTemplate\"\n              [tooltipText]=\"tooltipText\"\n              (select)=\"onClick($event)\"\n              (activate)=\"onActivate($event)\"\n              (deactivate)=\"onDeactivate($event)\"\n              [animations]=\"animations\"\n            ></svg:g>\n          </svg:g>\n        </ngx-charts-chart>\n      </div>\n      <div class=\"advanced-pie-legend-wrapper\" [style.width.px]=\"width - dims.width\" [style.height.px]=\"height\">\n        <ngx-charts-advanced-legend\n          [data]=\"results\"\n          [colors]=\"colors\"\n          [width]=\"width - dims.width - margin[1]\"\n          [label]=\"label\"\n          [animations]=\"animations\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"nameFormatting\"\n          [percentageFormatting]=\"percentageFormatting\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event, true)\"\n          (deactivate)=\"onDeactivate($event, true)\"\n        >\n        </ngx-charts-advanced-legend>\n      </div>\n    </div>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".advanced-pie{display:inline-block;float:left}.advanced-pie-legend-wrapper{display:inline-block}\\n\"] }]\n        }], propDecorators: { gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], valueFormatting: [{\n                type: Input\n            }], nameFormatting: [{\n                type: Input\n            }], percentageFormatting: [{\n                type: Input\n            }] } });\n\nclass PieChartComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.labels = false;\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.explodeSlices = false;\n        this.doughnut = false;\n        this.arcWidth = 0.25;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.trimLabels = true;\n        this.maxLabelLength = 10;\n        this.dblclick = new EventEmitter();\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n    }\n    update() {\n        super.update();\n        if (this.labels && this.hasNoOptionalMarginsSet()) {\n            this.margins = [30, 80, 30, 80];\n        }\n        else if (!this.labels && this.hasNoOptionalMarginsSet()) {\n            // default value for margins\n            this.margins = [20, 20, 20, 20];\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margins,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.formatDates();\n        const xOffset = this.margins[3] + this.dims.width / 2;\n        const yOffset = this.margins[0] + this.dims.height / 2;\n        this.translation = `translate(${xOffset}, ${yOffset})`;\n        this.outerRadius = Math.min(this.dims.width, this.dims.height);\n        if (this.labels) {\n            // make room for labels\n            this.outerRadius /= 3;\n        }\n        else {\n            this.outerRadius /= 2;\n        }\n        this.innerRadius = 0;\n        if (this.doughnut) {\n            this.innerRadius = this.outerRadius * (1 - this.arcWidth);\n        }\n        this.domain = this.getDomain();\n        // sort data according to domain\n        this.data = this.results.sort((a, b) => {\n            return this.domain.indexOf(a.name) - this.domain.indexOf(b.name);\n        });\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            domain: this.domain,\n            colors: this.colors,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    hasNoOptionalMarginsSet() {\n        return !this.margins || this.margins.length <= 0;\n    }\n}\nPieChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieChartComponent, selector: \"ngx-charts-pie-chart\", inputs: { labels: \"labels\", legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", explodeSlices: \"explodeSlices\", doughnut: \"doughnut\", arcWidth: \"arcWidth\", gradient: \"gradient\", activeEntries: \"activeEntries\", tooltipDisabled: \"tooltipDisabled\", labelFormatting: \"labelFormatting\", trimLabels: \"trimLabels\", maxLabelLength: \"maxLabelLength\", tooltipText: \"tooltipText\", margins: \"margins\" }, outputs: { dblclick: \"dblclick\", select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieSeriesComponent, selector: \"g[ngx-charts-pie-series]\", inputs: [\"colors\", \"series\", \"dims\", \"innerRadius\", \"outerRadius\", \"explodeSlices\", \"showLabels\", \"gradient\", \"activeEntries\", \"labelFormatting\", \"trimLabels\", \"maxLabelLength\", \"tooltipText\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-chart', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelActivate)=\"onActivate($event, true)\"\n      (legendLabelDeactivate)=\"onDeactivate($event, true)\"\n      (legendLabelClick)=\"onClick($event)\"\n    >\n      <svg:g [attr.transform]=\"translation\" class=\"pie-chart chart\">\n        <svg:g\n          ngx-charts-pie-series\n          [colors]=\"colors\"\n          [series]=\"data\"\n          [showLabels]=\"labels\"\n          [labelFormatting]=\"labelFormatting\"\n          [trimLabels]=\"trimLabels\"\n          [maxLabelLength]=\"maxLabelLength\"\n          [activeEntries]=\"activeEntries\"\n          [innerRadius]=\"innerRadius\"\n          [outerRadius]=\"outerRadius\"\n          [explodeSlices]=\"explodeSlices\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipText]=\"tooltipText\"\n          (dblclick)=\"dblclick.emit($event)\"\n          (select)=\"onClick($event)\"\n          (activate)=\"onActivate($event)\"\n          (deactivate)=\"onDeactivate($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-label{font-size:11px}.pie-label.animation{animation:.75s ease-in fadeIn}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}.pie-label-line{stroke-dasharray:100%}.pie-label-line.animation{animation:3s linear drawOut;transition:d .75s}@keyframes drawOut{0%{stroke-dashoffset:100%}to{stroke-dashoffset:0}}\\n\"] }]\n        }], propDecorators: { labels: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], explodeSlices: [{\n                type: Input\n            }], doughnut: [{\n                type: Input\n            }], arcWidth: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], trimLabels: [{\n                type: Input\n            }], maxLabelLength: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], dblclick: [{\n                type: Output\n            }], margins: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nfunction gridSize(dims, len, minWidth) {\n    let rows = 1;\n    let cols = len;\n    const width = dims.width;\n    if (width > minWidth) {\n        while (width / cols < minWidth) {\n            rows += 1;\n            cols = Math.ceil(len / rows);\n        }\n    }\n    return [cols, rows];\n}\nfunction gridLayout(dims, data, minWidth, designatedTotal) {\n    const xScale = scaleBand();\n    const yScale = scaleBand();\n    const width = dims.width;\n    const height = dims.height;\n    const [columns, rows] = gridSize(dims, data.length, minWidth);\n    const xDomain = [];\n    const yDomain = [];\n    for (let i = 0; i < rows; i++) {\n        yDomain.push(i);\n    }\n    for (let i = 0; i < columns; i++) {\n        xDomain.push(i);\n    }\n    xScale.domain(xDomain);\n    yScale.domain(yDomain);\n    xScale.rangeRound([0, width], 0.1);\n    yScale.rangeRound([0, height], 0.1);\n    const res = [];\n    const total = designatedTotal ? designatedTotal : getTotal(data);\n    const cardWidth = xScale.bandwidth();\n    const cardHeight = yScale.bandwidth();\n    for (let i = 0; i < data.length; i++) {\n        res[i] = {};\n        res[i].data = {\n            name: data[i] ? data[i].name : '',\n            value: data[i] ? data[i].value : undefined,\n            extra: data[i] ? data[i].extra : undefined,\n            label: data[i] ? data[i].label : ''\n        };\n        res[i].x = xScale(i % columns);\n        res[i].y = yScale(Math.floor(i / columns));\n        res[i].width = cardWidth;\n        res[i].height = cardHeight;\n        res[i].data.percent = total > 0 ? res[i].data.value / total : 0;\n        res[i].data.total = total;\n    }\n    return res;\n}\nfunction getTotal(results) {\n    return results.map(d => (d ? d.value : 0)).reduce((sum, val) => sum + val, 0);\n}\n\nclass PieGridSeriesComponent {\n    constructor(element) {\n        this.innerRadius = 70;\n        this.outerRadius = 80;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.layout = pie()\n            .value(d => d.data.value)\n            .sort(null);\n        this.arcs = this.getArcs();\n    }\n    getArcs() {\n        return this.layout(this.data).map((arc, index) => {\n            const label = arc.data.data.name;\n            const other = arc.data.data.other;\n            if (index === 0) {\n                arc.startAngle = 0;\n            }\n            const color = this.colors(label);\n            return {\n                data: arc.data.data,\n                class: 'arc ' + 'arc' + index,\n                fill: color,\n                startAngle: other ? 0 : arc.startAngle,\n                endAngle: arc.endAngle,\n                animate: this.animations && !other,\n                pointerEvents: !other\n            };\n        });\n    }\n    onClick(data) {\n        this.select.emit(this.data[0].data);\n    }\n    trackBy(index, item) {\n        return item.data.name;\n    }\n    label(arc) {\n        return arc.data.name;\n    }\n    color(arc) {\n        return this.colors(this.label(arc));\n    }\n}\nPieGridSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nPieGridSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: { colors: \"colors\", data: \"data\", innerRadius: \"innerRadius\", outerRadius: \"outerRadius\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-pie-grid-series]',\n                    template: `\n    <svg:g class=\"pie-grid-arcs\">\n      <svg:g\n        ngx-charts-pie-arc\n        *ngFor=\"let arc of arcs; trackBy: trackBy\"\n        [attr.class]=\"arc.class\"\n        [startAngle]=\"arc.startAngle\"\n        [endAngle]=\"arc.endAngle\"\n        [innerRadius]=\"innerRadius\"\n        [outerRadius]=\"outerRadius\"\n        [fill]=\"color(arc)\"\n        [value]=\"arc.data.value\"\n        [data]=\"arc.data\"\n        [gradient]=\"false\"\n        [pointerEvents]=\"arc.pointerEvents\"\n        [animate]=\"arc.animate\"\n        (select)=\"onClick($event)\"\n        (activate)=\"activate.emit($event)\"\n        (deactivate)=\"deactivate.emit($event)\"\n      ></svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { colors: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], innerRadius: [{\n                type: Input\n            }], outerRadius: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass PieGridComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.label = 'Total';\n        this.minWidth = 150;\n        this.activeEntries = [];\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [20, 20, 20, 20];\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.data = gridLayout(this.dims, this.results, this.minWidth, this.designatedTotal);\n        this.transform = `translate(${this.margin[3]} , ${this.margin[0]})`;\n        this.series = this.getSeries();\n        this.setColors();\n        this.tooltipText = this.tooltipText || this.defaultTooltipText;\n    }\n    defaultTooltipText({ data }) {\n        const label = trimLabel(formatLabel(data.name));\n        const val = data.value.toLocaleString();\n        return `\n      <span class=\"tooltip-label\">${label}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    getSeries() {\n        const total = this.designatedTotal ? this.designatedTotal : this.getTotal();\n        return this.data.map(d => {\n            const baselineLabelHeight = 20;\n            const padding = 10;\n            const name = d.data.name;\n            const label = formatLabel(name);\n            const value = d.data.value;\n            const radius = min([d.width - padding, d.height - baselineLabelHeight]) / 2 - 5;\n            const innerRadius = radius * 0.9;\n            let count = 0;\n            const colors = () => {\n                count += 1;\n                if (count === 1) {\n                    return 'rgba(100,100,100,0.3)';\n                }\n                else {\n                    return this.colorScale.getColor(label);\n                }\n            };\n            const xPos = d.x + (d.width - padding) / 2;\n            const yPos = d.y + (d.height - baselineLabelHeight) / 2;\n            return {\n                transform: `translate(${xPos}, ${yPos})`,\n                colors,\n                innerRadius,\n                outerRadius: radius,\n                name,\n                label: trimLabel(label),\n                total: value,\n                value,\n                percent: format('.1%')(d.data.percent),\n                data: [\n                    d,\n                    {\n                        data: {\n                            other: true,\n                            value: total - value,\n                            name: d.data.name\n                        }\n                    }\n                ]\n            };\n        });\n    }\n    getTotal() {\n        return this.results.map(d => d.value).reduce((sum, d) => sum + d, 0);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colorScale = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item, fromLegend = false) {\n        item = this.results.find(d => {\n            if (fromLegend) {\n                return d.label === item.name;\n            }\n            else {\n                return d.name === item.name;\n            }\n        });\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value && d.series === item.series;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n}\nPieGridComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nPieGridComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: PieGridComponent, selector: \"ngx-charts-pie-grid\", inputs: { designatedTotal: \"designatedTotal\", tooltipDisabled: \"tooltipDisabled\", tooltipText: \"tooltipText\", label: \"label\", minWidth: \"minWidth\", activeEntries: \"activeEntries\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: PieGridSeriesComponent, selector: \"g[ngx-charts-pie-grid-series]\", inputs: [\"colors\", \"data\", \"innerRadius\", \"outerRadius\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieGridComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-pie-grid', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"pie-grid chart\">\n        <svg:g *ngFor=\"let series of series\" class=\"pie-grid-item\" [attr.transform]=\"series.transform\">\n          <svg:g\n            ngx-charts-pie-grid-series\n            [colors]=\"series.colors\"\n            [data]=\"series.data\"\n            [innerRadius]=\"series.innerRadius\"\n            [outerRadius]=\"series.outerRadius\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipPlacement]=\"placementTypes.Top\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText({ data: series })\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"series.data[0].data\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          />\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label percent-label\"\n            dy=\"-0.5em\"\n            x=\"0\"\n            y=\"5\"\n            ngx-charts-count-up\n            [countTo]=\"series.percent\"\n            [countSuffix]=\"'%'\"\n            text-anchor=\"middle\"\n          ></svg:text>\n          <svg:text *ngIf=\"!animations\" class=\"label percent-label\" dy=\"-0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.percent.toLocaleString() }}\n          </svg:text>\n          <svg:text class=\"label\" dy=\"0.5em\" x=\"0\" y=\"5\" text-anchor=\"middle\">\n            {{ series.label }}\n          </svg:text>\n          <svg:text\n            *ngIf=\"animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n            ngx-charts-count-up\n            [countTo]=\"series.total\"\n            [countPrefix]=\"label + ': '\"\n          ></svg:text>\n          <svg:text\n            *ngIf=\"!animations\"\n            class=\"label\"\n            dy=\"1.23em\"\n            x=\"0\"\n            [attr.y]=\"series.outerRadius\"\n            text-anchor=\"middle\"\n          >\n            {{ label }}: {{ series.total.toLocaleString() }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".pie-grid .arc1{opacity:.4}.pie-grid .percent-label{font-size:16px;font-weight:400}\\n\"] }]\n        }], propDecorators: { designatedTotal: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipText: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], minWidth: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass PieChartModule {\n}\nPieChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPieChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, declarations: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent], imports: [ChartCommonModule], exports: [AdvancedPieChartComponent,\n        PieLabelComponent,\n        PieArcComponent,\n        PieChartComponent,\n        PieGridComponent,\n        PieGridSeriesComponent,\n        PieSeriesComponent] });\nPieChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PieChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ],\n                    exports: [\n                        AdvancedPieChartComponent,\n                        PieLabelComponent,\n                        PieArcComponent,\n                        PieChartComponent,\n                        PieGridComponent,\n                        PieGridSeriesComponent,\n                        PieSeriesComponent\n                    ]\n                }]\n        }] });\n\nclass PolarChartModule {\n}\nPolarChartModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nPolarChartModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, declarations: [PolarChartComponent, PolarSeriesComponent], imports: [ChartCommonModule, PieChartModule, LineChartModule], exports: [PolarChartComponent, PolarSeriesComponent] });\nPolarChartModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, imports: [[ChartCommonModule, PieChartModule, LineChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: PolarChartModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, LineChartModule],\n                    declarations: [PolarChartComponent, PolarSeriesComponent],\n                    exports: [PolarChartComponent, PolarSeriesComponent]\n                }]\n        }] });\n\nfunction calculateTextWidth(fontFamilyKey, text, defaultWidth = 8) {\n    return text.split('').reduce((acc, curr) => {\n        const width = fontFamilyKey[curr] || defaultWidth;\n        return acc + width;\n    }, 0);\n}\n\nconst VERDANA_FONT_WIDTHS_16_PX = {\n    '0': 10,\n    '1': 10,\n    '2': 10,\n    '3': 10,\n    '4': 10,\n    '5': 10,\n    '6': 10,\n    '7': 10,\n    '8': 10,\n    '9': 10,\n    A: 11,\n    B: 11,\n    C: 11,\n    D: 12,\n    E: 10,\n    F: 9,\n    G: 12,\n    H: 12,\n    I: 7,\n    J: 7,\n    K: 11,\n    L: 9,\n    M: 13,\n    N: 12,\n    O: 13,\n    P: 10,\n    Q: 13,\n    R: 11,\n    S: 11,\n    T: 10,\n    U: 12,\n    V: 11,\n    W: 16,\n    X: 11,\n    Y: 10,\n    Z: 11,\n    a: 10,\n    b: 10,\n    c: 8,\n    d: 10,\n    e: 10,\n    f: 6,\n    g: 10,\n    h: 10,\n    i: 4,\n    j: 6,\n    k: 9,\n    l: 4,\n    m: 16,\n    n: 10,\n    o: 10,\n    p: 10,\n    q: 10,\n    r: 7,\n    s: 8,\n    t: 6,\n    u: 10,\n    v: 9,\n    w: 13,\n    x: 9,\n    y: 9,\n    z: 8,\n    '!': 6,\n    '@': 16,\n    '#': 13,\n    $: 10,\n    '%': 17,\n    '^': 13,\n    '&': 12,\n    '*': 10,\n    '(': 7,\n    ')': 7,\n    _: 10,\n    '-': 7,\n    '+': 13,\n    '=': 13,\n    ',': 6,\n    '.': 6,\n    '/': 7,\n    \"'\": 4,\n    ':': 7,\n    '|': 7,\n    '?': 9,\n    ';': 7,\n    '<': 13,\n    '>': 13\n};\n\nclass CardComponent {\n    constructor(element, cd, zone, platformId) {\n        this.cd = cd;\n        this.zone = zone;\n        this.platformId = platformId;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.value = '';\n        this.textFontSize = 12;\n        this.textTransform = '';\n        this.initialized = false;\n        this.bandHeight = 10;\n        this.textPadding = [10, 20, 5, 20];\n        this.labelFontSize = 15;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    ngOnInit() {\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR();\n        }\n    }\n    ngOnDestroy() {\n        if (isPlatformBrowser(this.platformId)) {\n            cancelAnimationFrame(this.animationReq);\n        }\n    }\n    update() {\n        this.zone.run(() => {\n            const hasValue = this.data && typeof this.data.value !== 'undefined';\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const labelFormatting = this.labelFormatting || (card => escapeLabel(trimLabel(card.label, 55)));\n            this.transform = `translate(${this.x} , ${this.y})`;\n            this.textWidth = Math.max(0, this.width) - this.textPadding[1] - this.textPadding[3];\n            this.cardWidth = Math.max(0, this.width);\n            this.cardHeight = Math.max(0, this.height);\n            this.label = this.label ? this.label : this.data.name;\n            const cardData = {\n                label: this.label,\n                data: this.data,\n                value: this.data.value\n            };\n            this.formattedLabel = labelFormatting(cardData);\n            this.transformBand = `translate(0 , ${this.cardHeight - this.bandHeight})`;\n            const value = hasValue ? valueFormatting(cardData) : '';\n            this.value = this.paddedValue(value);\n            this.setPadding();\n            this.bandPath = roundedRect(0, 0, this.cardWidth, this.bandHeight, 3, [false, false, true, true]);\n            setTimeout(() => {\n                if (isPlatformBrowser(this.platformId)) {\n                    this.scaleText();\n                }\n                this.value = value;\n                if (hasValue && !this.initialized) {\n                    setTimeout(() => this.startCount(), 20);\n                }\n            }, 8);\n        });\n    }\n    paddedValue(value) {\n        if (this.medianSize && this.medianSize > value.length) {\n            value += '\\u2007'.repeat(this.medianSize - value.length);\n        }\n        return value;\n    }\n    startCount() {\n        if (!this.initialized && this.animations) {\n            cancelAnimationFrame(this.animationReq);\n            const val = this.data.value;\n            const decs = decimalChecker(val);\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const callback = ({ value, finished }) => {\n                this.zone.run(() => {\n                    value = finished ? val : value;\n                    this.value = valueFormatting({ label: this.label, data: this.data, value });\n                    if (!finished) {\n                        this.value = this.paddedValue(this.value);\n                    }\n                    this.cd.markForCheck();\n                });\n            };\n            this.animationReq = count(0, val, decs, 1, callback);\n            this.initialized = true;\n        }\n    }\n    scaleText() {\n        this.zone.run(() => {\n            const { width, height } = this.textEl.nativeElement.getBoundingClientRect();\n            if (width === 0 || height === 0) {\n                return;\n            }\n            const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n            const availableWidth = this.cardWidth - 2 * textPadding;\n            const availableHeight = this.cardHeight / 3;\n            const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n            this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n            this.labelFontSize = Math.min(this.textFontSize, 15);\n            this.setPadding();\n            this.cd.markForCheck();\n        });\n    }\n    scaleTextSSR() {\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, this.value, 10);\n        const height = 18;\n        const textPadding = (this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8);\n        const availableWidth = this.cardWidth - 2 * textPadding;\n        const availableHeight = this.cardHeight / 3;\n        const resizeScale = Math.min(availableWidth / width, availableHeight / height);\n        this.textFontSize = Math.floor(this.textFontSize * resizeScale);\n        this.labelFontSize = Math.min(this.textFontSize, 15);\n        this.setPadding();\n    }\n    setPadding() {\n        this.textPadding[1] = this.textPadding[3] = this.cardWidth / 8;\n        const padding = this.cardHeight / 2;\n        this.textPadding[0] = padding - this.textFontSize - this.labelFontSize / 2;\n        this.textPadding[2] = padding - this.labelFontSize;\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n}\nCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });\nCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: { color: \"color\", bandColor: \"bandColor\", textColor: \"textColor\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", data: \"data\", medianSize: \"medianSize\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card]',\n                    template: `\n    <svg:g [attr.transform]=\"transform\" class=\"cell\" (click)=\"onClick()\">\n      <svg:rect class=\"card\" [style.fill]=\"color\" [attr.width]=\"cardWidth\" [attr.height]=\"cardHeight\" rx=\"3\" ry=\"3\" />\n      <svg:path\n        *ngIf=\"bandColor && bandColor !== color\"\n        class=\"card-band\"\n        [attr.fill]=\"bandColor\"\n        [attr.transform]=\"transformBand\"\n        stroke=\"none\"\n        [attr.d]=\"bandPath\"\n      />\n      <title>{{ label }}</title>\n      <svg:foreignObject\n        class=\"trimmed-label\"\n        x=\"5\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"cardHeight - textPadding[2]\"\n        [attr.width]=\"textWidth\"\n        [attr.height]=\"labelFontSize + textPadding[2]\"\n        alignment-baseline=\"hanging\"\n      >\n        <xhtml:p\n          [style.color]=\"textColor\"\n          [style.fontSize.px]=\"labelFontSize\"\n          [style.lineHeight.px]=\"labelFontSize\"\n          [innerHTML]=\"formattedLabel\"\n        >\n        </xhtml:p>\n      </svg:foreignObject>\n      <svg:text\n        #textEl\n        class=\"value-text\"\n        [attr.x]=\"textPadding[3]\"\n        [attr.y]=\"textPadding[0]\"\n        [style.fill]=\"textColor\"\n        text-anchor=\"start\"\n        alignment-baseline=\"hanging\"\n        [style.font-size.pt]=\"textFontSize\"\n      >\n        {{ value }}\n      </svg:text>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }]; }, propDecorators: { color: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], medianSize: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl', { static: false }]\n            }] } });\n\n/**\n * Converts a hex to RGB\n *\n * @export\n */\nfunction hexToRgb(value) {\n    // deprecated, use d3.color()\n    return d3_color.rgb(value);\n}\n/**\n * Accepts a color (string) and returns a inverted hex color (string)\n * http://stackoverflow.com/questions/9600295/automatically-change-text-color-to-assure-readability\n *\n * @export\n */\nfunction invertColor(value) {\n    const color = d3_color.rgb(value);\n    const { r, g, b, opacity } = color;\n    if (opacity === 0) {\n        return color.toString();\n    }\n    const yiq = (r * 299 + g * 587 + b * 114) / 1000;\n    const depth = yiq >= 128 ? -0.8 : 0.8;\n    return shadeRGBColor(color, depth);\n}\n/**\n * Given a rgb, it will darken/lighten\n * http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\n *\n * @export\n * @param \\{ r, g, b }\n */\nfunction shadeRGBColor({ r, g, b }, percent) {\n    const t = percent < 0 ? 0 : 255;\n    const p = percent < 0 ? percent * -1 : percent;\n    r = Math.round((t - r) * p) + r;\n    g = Math.round((t - g) * p) + g;\n    b = Math.round((t - b) * p) + b;\n    return `rgb(${r}, ${g}, ${b})`;\n}\n\nclass CardSeriesComponent {\n    constructor() {\n        this.innerPadding = 15;\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.animations = true;\n        this.select = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        if (this.data.length > 2) {\n            const valueFormatting = this.valueFormatting || (card => card.value.toLocaleString());\n            const sortedLengths = this.data\n                .map(d => {\n                const hasValue = d && d.data && typeof d.data.value !== 'undefined' && d.data.value !== null;\n                return hasValue\n                    ? valueFormatting({\n                        data: d.data,\n                        label: d ? d.data.name : '',\n                        value: d && d.data ? d.data.value : ''\n                    }).length\n                    : 0;\n            })\n                .sort((a, b) => b - a);\n            const idx = Math.ceil(this.data.length / 2);\n            this.medianSize = sortedLengths[idx];\n        }\n        const cards = this.getCards();\n        this.cards = cards.filter(d => d.data.value !== null);\n        this.emptySlots = cards.filter(d => d.data.value === null);\n    }\n    getCards() {\n        const yPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[0] + this.innerPadding[2];\n        const xPadding = typeof this.innerPadding === 'number' ? this.innerPadding : this.innerPadding[1] + this.innerPadding[3];\n        return this.data.map((d, index) => {\n            let label = d.data.name;\n            if (label && label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label ? label.toLocaleString() : label;\n            }\n            const value = d.data.value;\n            const valueColor = label ? this.colors.getColor(label) : this.emptyColor;\n            const color = this.cardColor || valueColor || '#000';\n            return {\n                x: d.x,\n                y: d.y,\n                width: d.width - xPadding,\n                height: d.height - yPadding,\n                color,\n                bandColor: this.bandColor || valueColor,\n                textColor: this.textColor || invertColor(color),\n                label,\n                data: d.data,\n                tooltipText: `${label}: ${value}`\n            };\n        });\n    }\n    trackBy(index, card) {\n        return card.label;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n}\nCardSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nCardSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", innerPadding: \"innerPadding\", cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `, isInline: true, components: [{ type: CardComponent, selector: \"g[ngx-charts-card]\", inputs: [\"color\", \"bandColor\", \"textColor\", \"x\", \"y\", \"width\", \"height\", \"label\", \"data\", \"medianSize\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: CardSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-card-series]',\n                    template: `\n    <svg:rect\n      *ngFor=\"let c of emptySlots; trackBy: trackBy\"\n      class=\"card-empty\"\n      [attr.x]=\"c.x\"\n      [attr.y]=\"c.y\"\n      [style.fill]=\"emptyColor\"\n      [attr.width]=\"c.width\"\n      [attr.height]=\"c.height\"\n      rx=\"3\"\n      ry=\"3\"\n    />\n    <svg:g\n      ngx-charts-card\n      *ngFor=\"let c of cards; trackBy: trackBy\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [color]=\"c.color\"\n      [bandColor]=\"c.bandColor\"\n      [textColor]=\"c.textColor\"\n      [data]=\"c.data\"\n      [label]=\"c.label\"\n      [medianSize]=\"medianSize\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n    />\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass NumberCardComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.emptyColor = 'rgba(0, 0, 0, 0)';\n        this.innerPadding = 15;\n        this.margin = [10, 10, 10, 10];\n    }\n    get clickable() {\n        return !!this.select.observers.length;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.formatDates();\n        this.domain = this.getDomain();\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n        const size = gridSize(this.dims, this.results.length, 150);\n        const N = size[0] * size[1];\n        const data = this.results.slice();\n        while (data.length < N) {\n            data.push({ value: null });\n        }\n        this.data = gridLayout(this.dims, data, 150, this.designatedTotal);\n    }\n    getDomain() {\n        return this.results.map(d => d.label);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nNumberCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nNumberCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: NumberCardComponent, selector: \"ngx-charts-number-card\", inputs: { cardColor: \"cardColor\", bandColor: \"bandColor\", emptyColor: \"emptyColor\", innerPadding: \"innerPadding\", textColor: \"textColor\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", designatedTotal: \"designatedTotal\" }, usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: CardSeriesComponent, selector: \"g[ngx-charts-card-series]\", inputs: [\"data\", \"dims\", \"colors\", \"innerPadding\", \"cardColor\", \"bandColor\", \"emptyColor\", \"textColor\", \"valueFormatting\", \"labelFormatting\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-number-card', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"number-card chart\" [class.clickable]=\"clickable\">\n        <svg:g\n          ngx-charts-card-series\n          [colors]=\"colors\"\n          [cardColor]=\"cardColor\"\n          [bandColor]=\"bandColor\"\n          [textColor]=\"textColor\"\n          [emptyColor]=\"emptyColor\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [innerPadding]=\"innerPadding\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \"ngx-charts-number-card .cell .trimmed-label{font-size:12px;pointer-events:none;overflow:hidden;text-align:left;line-height:1em}ngx-charts-number-card .cell .trimmed-label p{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;width:100%;padding:0;margin:0}ngx-charts-number-card .cell .value-text{pointer-events:none}ngx-charts-number-card .number-card.clickable .cell .card,ngx-charts-number-card .number-card.clickable .cell .card-band{cursor:pointer}\\n\"] }]\n        }], propDecorators: { cardColor: [{\n                type: Input\n            }], bandColor: [{\n                type: Input\n            }], emptyColor: [{\n                type: Input\n            }], innerPadding: [{\n                type: Input\n            }], textColor: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], designatedTotal: [{\n                type: Input\n            }] } });\n\nclass NumberCardModule {\n}\nNumberCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNumberCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, declarations: [CardComponent, CardSeriesComponent, NumberCardComponent], imports: [ChartCommonModule], exports: [CardComponent, CardSeriesComponent, NumberCardComponent] });\nNumberCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NumberCardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [CardComponent, CardSeriesComponent, NumberCardComponent],\n                    exports: [CardComponent, CardSeriesComponent, NumberCardComponent]\n                }]\n        }] });\n\nclass TreeMapCellComponent {\n    constructor(element) {\n        this.gradient = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.initialized = false;\n        this.orientation = BarOrientation;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges() {\n        this.update();\n        this.valueFormatting = this.valueFormatting || (value => value.toLocaleString());\n        const labelFormatting = this.labelFormatting || (cell => escapeLabel(trimLabel(cell.label, 55)));\n        const cellData = {\n            data: this.data,\n            label: this.label,\n            value: this.value\n        };\n        this.formattedValue = this.valueFormatting(cellData.value);\n        this.formattedLabel = labelFormatting(cellData);\n        this.gradientId = 'grad' + id().toString();\n        this.gradientUrl = `url(#${this.gradientId})`;\n        this.gradientStops = this.getGradientStops();\n    }\n    update() {\n        if (this.initialized) {\n            this.animateToCurrentForm();\n        }\n        else {\n            if (this.animations) {\n                this.loadAnimation();\n            }\n            this.initialized = true;\n        }\n    }\n    loadAnimation() {\n        const node = select(this.element).select('.cell');\n        node.attr('opacity', 0).attr('x', this.x).attr('y', this.y);\n        this.animateToCurrentForm();\n    }\n    getTextColor() {\n        return invertColor(this.fill);\n    }\n    animateToCurrentForm() {\n        const node = select(this.element).select('.cell');\n        if (this.animations) {\n            node\n                .transition()\n                .duration(750)\n                .attr('opacity', 1)\n                .attr('x', this.x)\n                .attr('y', this.y)\n                .attr('width', this.width)\n                .attr('height', this.height);\n        }\n        else {\n            node.attr('opacity', 1).attr('x', this.x).attr('y', this.y).attr('width', this.width).attr('height', this.height);\n        }\n    }\n    onClick() {\n        this.select.emit(this.data);\n    }\n    getGradientStops() {\n        return [\n            {\n                offset: 0,\n                color: this.fill,\n                opacity: 0.3\n            },\n            {\n                offset: 100,\n                color: this.fill,\n                opacity: 1\n            }\n        ];\n    }\n}\nTreeMapCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: { data: \"data\", fill: \"fill\", x: \"x\", y: \"y\", width: \"width\", height: \"height\", label: \"label\", value: \"value\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `, isInline: true, components: [{ type: SvgLinearGradientComponent, selector: \"g[ngx-charts-svg-linear-gradient]\", inputs: [\"orientation\", \"name\", \"stops\"] }, { type: CountUpDirective, selector: \"[ngx-charts-count-up]\", inputs: [\"countDuration\", \"countPrefix\", \"countSuffix\", \"valueFormatting\", \"countDecimals\", \"countTo\", \"countFrom\"], outputs: [\"countChange\", \"countFinish\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell]',\n                    template: `\n    <svg:g>\n      <defs *ngIf=\"gradient\">\n        <svg:g\n          ngx-charts-svg-linear-gradient\n          [orientation]=\"orientation.Vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        [attr.fill]=\"gradient ? gradientUrl : fill\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        class=\"cell\"\n        (click)=\"onClick()\"\n      />\n      <svg:foreignObject\n        *ngIf=\"width >= 70 && height >= 35\"\n        [attr.x]=\"x\"\n        [attr.y]=\"y\"\n        [attr.width]=\"width\"\n        [attr.height]=\"height\"\n        class=\"treemap-label\"\n        [style.pointer-events]=\"'none'\"\n      >\n        <xhtml:p [style.color]=\"getTextColor()\" [style.height]=\"height + 'px'\" [style.width]=\"width + 'px'\">\n          <xhtml:span class=\"treemap-label\" [innerHTML]=\"formattedLabel\"> </xhtml:span>\n          <xhtml:br />\n          <xhtml:span\n            *ngIf=\"animations\"\n            class=\"treemap-val\"\n            ngx-charts-count-up\n            [countTo]=\"value\"\n            [valueFormatting]=\"valueFormatting\"\n          >\n          </xhtml:span>\n          <xhtml:span *ngIf=\"!animations\" class=\"treemap-val\">\n            {{ formattedValue }}\n          </xhtml:span>\n        </xhtml:p>\n      </svg:foreignObject>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], fill: [{\n                type: Input\n            }], x: [{\n                type: Input\n            }], y: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], height: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapCellSeriesComponent {\n    constructor() {\n        this.gradient = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.styleTypes = StyleTypes;\n        this.placementTypes = PlacementTypes;\n    }\n    ngOnChanges(changes) {\n        this.cells = this.getCells();\n    }\n    getCells() {\n        return this.data.children\n            .filter(d => {\n            return d.depth === 1;\n        })\n            .map((d, index) => {\n            const label = d.id;\n            return {\n                data: d.data,\n                x: d.x0,\n                y: d.y0,\n                width: d.x1 - d.x0,\n                height: d.y1 - d.y0,\n                fill: this.colors.getColor(label),\n                label,\n                value: d.value\n            };\n        });\n    }\n    getTooltipText({ label, value }) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()}</span>\n    `;\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    trackBy(index, item) {\n        return item.label;\n    }\n}\nTreeMapCellSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nTreeMapCellSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: { data: \"data\", dims: \"dims\", colors: \"colors\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: TreeMapCellComponent, selector: \"g[ngx-charts-tree-map-cell]\", inputs: [\"data\", \"fill\", \"x\", \"y\", \"width\", \"height\", \"label\", \"value\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"animations\"], outputs: [\"select\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapCellSeriesComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-tree-map-cell-series]',\n                    template: `\n    <svg:g\n      ngx-charts-tree-map-cell\n      *ngFor=\"let c of cells; trackBy: trackBy\"\n      [data]=\"c.data\"\n      [x]=\"c.x\"\n      [y]=\"c.y\"\n      [width]=\"c.width\"\n      [height]=\"c.height\"\n      [fill]=\"c.fill\"\n      [label]=\"c.label\"\n      [value]=\"c.value\"\n      [valueFormatting]=\"valueFormatting\"\n      [labelFormatting]=\"labelFormatting\"\n      [gradient]=\"gradient\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(c)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"c.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { data: [{\n                type: Input\n            }], dims: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }] } });\n\nclass TreeMapComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.tooltipDisabled = false;\n        this.gradient = false;\n        this.select = new EventEmitter();\n        this.margin = [10, 10, 10, 10];\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.domain = this.getDomain();\n        this.treemap = treemap().size([this.dims.width, this.dims.height]);\n        const rootNode = {\n            name: 'root',\n            value: 0,\n            isRoot: true\n        };\n        const root = stratify()\n            .id(d => {\n            let label = d.name;\n            if (label.constructor.name === 'Date') {\n                label = label.toLocaleDateString();\n            }\n            else {\n                label = label.toLocaleString();\n            }\n            return label;\n        })\n            .parentId(d => (d.isRoot ? null : 'root'))([rootNode, ...this.results])\n            .sum(d => d.value);\n        this.data = this.treemap(root);\n        this.setColors();\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n}\nTreeMapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nTreeMapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: TreeMapComponent, selector: \"ngx-charts-tree-map\", inputs: { results: \"results\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", labelFormatting: \"labelFormatting\", gradient: \"gradient\" }, outputs: { select: \"select\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: TreeMapCellSeriesComponent, selector: \"g[ngx-charts-tree-map-cell-series]\", inputs: [\"data\", \"dims\", \"colors\", \"valueFormatting\", \"labelFormatting\", \"gradient\", \"tooltipDisabled\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-tree-map', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"tree-map chart\">\n        <svg:g\n          ngx-charts-tree-map-cell-series\n          [colors]=\"colors\"\n          [data]=\"data\"\n          [dims]=\"dims\"\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [valueFormatting]=\"valueFormatting\"\n          [labelFormatting]=\"labelFormatting\"\n          [gradient]=\"gradient\"\n          [animations]=\"animations\"\n          (select)=\"onClick($event)\"\n        />\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".tree-map .treemap-val{font-size:1.3em;padding-top:5px;display:inline-block}.tree-map .treemap-label p{display:table-cell;text-align:center;line-height:1.2em;vertical-align:middle}\\n\"] }]\n        }], propDecorators: { results: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass TreeMapModule {\n}\nTreeMapModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTreeMapModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent], imports: [ChartCommonModule], exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent] });\nTreeMapModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: TreeMapModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent],\n                    exports: [TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent]\n                }]\n        }] });\n\nvar ElementType;\n(function (ElementType) {\n    ElementType[\"Value\"] = \"value\";\n    ElementType[\"Units\"] = \"units\";\n})(ElementType || (ElementType = {}));\nclass LinearGaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.min = 0;\n        this.max = 100;\n        this.value = 0;\n        this.margin = [10, 20, 10, 20];\n        this.valueResizeScale = 1;\n        this.unitsResizeScale = 1;\n        this.valueTextTransform = '';\n        this.valueTranslate = '';\n        this.unitsTextTransform = '';\n        this.unitsTranslate = '';\n        this.barOrientation = BarOrientation;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => {\n            this.scaleText(ElementType.Value);\n            this.scaleText(ElementType.Units);\n        });\n    }\n    update() {\n        super.update();\n        this.hasPreviousValue = this.previousValue !== undefined;\n        this.max = Math.max(this.max, this.value);\n        this.min = Math.min(this.min, this.value);\n        if (this.hasPreviousValue) {\n            this.max = Math.max(this.max, this.previousValue);\n            this.min = Math.min(this.min, this.previousValue);\n        }\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin\n        });\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.setColors();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.transformLine = `translate(${this.margin[3] + this.valueScale(this.previousValue)}, ${yOffset})`;\n        this.valueTranslate = `translate(0, -15)`;\n        this.unitsTranslate = `translate(0, 15)`;\n        if (isPlatformServer(this.platformId)) {\n            this.scaleTextSSR('value');\n            this.scaleTextSSR('units');\n        }\n        else {\n            setTimeout(() => this.scaleText(ElementType.Value), 50);\n            setTimeout(() => this.scaleText(ElementType.Units), 50);\n        }\n    }\n    getValueDomain() {\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.dims.width]).domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        if (this.valueFormatting) {\n            return this.valueFormatting(this.value);\n        }\n        return this.value.toLocaleString();\n    }\n    scaleText(element, repeat = true) {\n        let el;\n        let resizeScale;\n        if (element === ElementType.Value) {\n            el = this.valueTextEl;\n            resizeScale = this.valueResizeScale;\n        }\n        else {\n            el = this.unitsTextEl;\n            resizeScale = this.unitsResizeScale;\n        }\n        const { width, height } = el.nativeElement.getBoundingClientRect();\n        if (width === 0 || height === 0)\n            return;\n        const oldScale = resizeScale;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (resizeScale !== oldScale) {\n            if (element === ElementType.Value) {\n                this.valueResizeScale = resizeScale;\n                this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            else {\n                this.unitsResizeScale = resizeScale;\n                this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n            }\n            this.cd.markForCheck();\n            if (repeat && isPlatformBrowser(this.platformId)) {\n                setTimeout(() => {\n                    this.scaleText(element, false);\n                }, 50);\n            }\n        }\n    }\n    scaleTextSSR(element) {\n        let resizeScale = 1;\n        const value = element === 'value' ? this.displayValue : this.units;\n        const width = calculateTextWidth(VERDANA_FONT_WIDTHS_16_PX, value, 10);\n        const height = 25;\n        const availableWidth = this.dims.width;\n        const availableHeight = Math.max(this.dims.height / 2 - 15, 0);\n        const resizeScaleWidth = Math.floor((availableWidth / (width / resizeScale)) * 100) / 100;\n        const resizeScaleHeight = Math.floor((availableHeight / (height / resizeScale)) * 100) / 100;\n        resizeScale = Math.min(resizeScaleHeight, resizeScaleWidth);\n        if (element === 'value') {\n            this.valueResizeScale = resizeScale;\n            this.valueTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        else {\n            this.unitsResizeScale = resizeScale;\n            this.unitsTextTransform = `scale(${resizeScale}, ${resizeScale})`;\n        }\n        this.cd.markForCheck();\n    }\n    onClick() {\n        this.select.emit({\n            name: 'Value',\n            value: this.value\n        });\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, [this.value], this.customColors);\n    }\n}\nLinearGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nLinearGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: LinearGaugeComponent, selector: \"ngx-charts-linear-gauge\", inputs: { min: \"min\", max: \"max\", value: \"value\", units: \"units\", previousValue: \"previousValue\", valueFormatting: \"valueFormatting\" }, viewQueries: [{ propertyName: \"valueTextEl\", first: true, predicate: [\"valueTextEl\"], descendants: true }, { propertyName: \"unitsTextEl\", first: true, predicate: [\"unitsTextEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: BarComponent, selector: \"g[ngx-charts-bar]\", inputs: [\"fill\", \"data\", \"width\", \"height\", \"x\", \"y\", \"orientation\", \"roundEdges\", \"gradient\", \"offset\", \"isActive\", \"stops\", \"animations\", \"ariaLabel\", \"noBarWhenZero\"], outputs: [\"select\", \"activate\", \"deactivate\"] }], directives: [{ type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: LinearGaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-linear-gauge', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [showLegend]=\"false\" [animations]=\"animations\" (click)=\"onClick()\">\n      <svg:g class=\"linear-gauge chart\">\n        <svg:g\n          ngx-charts-bar\n          class=\"background-bar\"\n          [width]=\"dims.width\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n        <svg:g\n          ngx-charts-bar\n          [width]=\"valueScale(value)\"\n          [height]=\"3\"\n          [x]=\"margin[3]\"\n          [y]=\"dims.height / 2 + margin[0] - 2\"\n          [fill]=\"colors.getColor(units)\"\n          [data]=\"{}\"\n          [orientation]=\"barOrientation.Horizontal\"\n          [roundEdges]=\"true\"\n          [animations]=\"animations\"\n        ></svg:g>\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"5\"\n          x2=\"0\"\n          y2=\"15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:line\n          *ngIf=\"hasPreviousValue\"\n          [attr.transform]=\"transformLine\"\n          x1=\"0\"\n          y1=\"-5\"\n          x2=\"0\"\n          y2=\"-15\"\n          [attr.stroke]=\"colors.getColor(units)\"\n        />\n\n        <svg:g [attr.transform]=\"transform\">\n          <svg:g [attr.transform]=\"valueTranslate\">\n            <svg:text\n              #valueTextEl\n              class=\"value\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"valueTextTransform\"\n              alignment-baseline=\"after-edge\"\n            >\n              {{ displayValue }}\n            </svg:text>\n          </svg:g>\n\n          <svg:g [attr.transform]=\"unitsTranslate\">\n            <svg:text\n              #unitsTextEl\n              class=\"units\"\n              [style.textAnchor]=\"'middle'\"\n              [attr.transform]=\"unitsTextTransform\"\n              alignment-baseline=\"before-edge\"\n            >\n              {{ units }}\n            </svg:text>\n          </svg:g>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".linear-gauge{cursor:pointer}.linear-gauge .background-bar path{fill:#0000000d}.linear-gauge .units{fill:#666}\\n\"] }]\n        }], propDecorators: { min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], previousValue: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], valueTextEl: [{\n                type: ViewChild,\n                args: ['valueTextEl']\n            }], unitsTextEl: [{\n                type: ViewChild,\n                args: ['unitsTextEl']\n            }] } });\n\nclass GaugeArcComponent {\n    constructor() {\n        this.isActive = false;\n        this.tooltipDisabled = false;\n        this.animations = true;\n        this.select = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.placementTypes = PlacementTypes;\n        this.styleTypes = StyleTypes;\n    }\n    tooltipText(arc) {\n        const label = formatLabel(arc.data.name);\n        let val;\n        if (this.valueFormatting) {\n            val = this.valueFormatting(arc.data.value);\n        }\n        else {\n            val = formatLabel(arc.data.value);\n        }\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(label)}</span>\n      <span class=\"tooltip-val\">${val}</span>\n    `;\n    }\n}\nGaugeArcComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeArcComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: { backgroundArc: \"backgroundArc\", valueArc: \"valueArc\", cornerRadius: \"cornerRadius\", colors: \"colors\", isActive: \"isActive\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", tooltipTemplate: \"tooltipTemplate\", animations: \"animations\" }, outputs: { select: \"select\", activate: \"activate\", deactivate: \"deactivate\" }, ngImport: i0, template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `, isInline: true, components: [{ type: PieArcComponent, selector: \"g[ngx-charts-pie-arc]\", inputs: [\"fill\", \"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\", \"cornerRadius\", \"value\", \"max\", \"data\", \"explodeSlices\", \"gradient\", \"animate\", \"pointerEvents\", \"isActive\"], outputs: [\"select\", \"activate\", \"deactivate\", \"dblclick\"] }], directives: [{ type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeArcComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-arc]',\n                    template: `\n    <svg:g\n      ngx-charts-pie-arc\n      class=\"background-arc\"\n      [startAngle]=\"0\"\n      [endAngle]=\"backgroundArc.endAngle\"\n      [innerRadius]=\"backgroundArc.innerRadius\"\n      [outerRadius]=\"backgroundArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [data]=\"backgroundArc.data\"\n      [animate]=\"false\"\n      [pointerEvents]=\"false\"\n    ></svg:g>\n    <svg:g\n      ngx-charts-pie-arc\n      [startAngle]=\"0\"\n      [endAngle]=\"valueArc.endAngle\"\n      [innerRadius]=\"valueArc.innerRadius\"\n      [outerRadius]=\"valueArc.outerRadius\"\n      [cornerRadius]=\"cornerRadius\"\n      [fill]=\"colors.getColor(valueArc.data.name)\"\n      [data]=\"valueArc.data\"\n      [animate]=\"animations\"\n      [isActive]=\"isActive\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n      (deactivate)=\"deactivate.emit($event)\"\n      ngx-tooltip\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipPlacement]=\"placementTypes.Top\"\n      [tooltipType]=\"styleTypes.tooltip\"\n      [tooltipTitle]=\"tooltipTemplate ? undefined : tooltipText(valueArc)\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [tooltipContext]=\"valueArc.data\"\n    ></svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { backgroundArc: [{\n                type: Input\n            }], valueArc: [{\n                type: Input\n            }], cornerRadius: [{\n                type: Input\n            }], colors: [{\n                type: Input\n            }], isActive: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], tooltipTemplate: [{\n                type: Input\n            }], animations: [{\n                type: Input\n            }], select: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }] } });\n\nclass GaugeAxisComponent {\n    constructor() {\n        this.rotate = '';\n    }\n    ngOnChanges(changes) {\n        this.update();\n    }\n    update() {\n        this.rotationAngle = -90 + this.startAngle;\n        this.rotate = `rotate(${this.rotationAngle})`;\n        this.ticks = this.getTicks();\n    }\n    getTicks() {\n        const bigTickSegment = this.angleSpan / this.bigSegments;\n        const smallTickSegment = bigTickSegment / this.smallSegments;\n        const tickLength = 20;\n        const ticks = {\n            big: [],\n            small: []\n        };\n        const startDistance = this.radius + 10;\n        const textDist = startDistance + tickLength + 10;\n        for (let i = 0; i <= this.bigSegments; i++) {\n            const angleDeg = i * bigTickSegment;\n            const angle = (angleDeg * Math.PI) / 180;\n            const textAnchor = this.getTextAnchor(angleDeg);\n            let skip = false;\n            if (i === 0 && this.angleSpan === 360) {\n                skip = true;\n            }\n            if (!skip) {\n                let text = Number.parseFloat(this.valueScale.invert(angleDeg).toString()).toLocaleString();\n                if (this.tickFormatting) {\n                    text = this.tickFormatting(text);\n                }\n                ticks.big.push({\n                    line: this.getTickPath(startDistance, tickLength, angle),\n                    textAnchor,\n                    text,\n                    textTransform: `\n            translate(${textDist * Math.cos(angle)}, ${textDist * Math.sin(angle)}) rotate(${-this.rotationAngle})\n          `\n                });\n            }\n            if (i === this.bigSegments) {\n                continue;\n            }\n            for (let j = 1; j <= this.smallSegments; j++) {\n                const smallAngleDeg = angleDeg + j * smallTickSegment;\n                const smallAngle = (smallAngleDeg * Math.PI) / 180;\n                ticks.small.push({\n                    line: this.getTickPath(startDistance, tickLength / 2, smallAngle)\n                });\n            }\n        }\n        return ticks;\n    }\n    getTextAnchor(angle) {\n        // [0, 45] = 'middle';\n        // [46, 135] = 'start';\n        // [136, 225] = 'middle';\n        // [226, 315] = 'end';\n        angle = (this.startAngle + angle) % 360;\n        let textAnchor = TextAnchor.Middle;\n        if (angle > 45 && angle <= 135) {\n            textAnchor = TextAnchor.Start;\n        }\n        else if (angle > 225 && angle <= 315) {\n            textAnchor = TextAnchor.End;\n        }\n        return textAnchor;\n    }\n    getTickPath(startDistance, tickLength, angle) {\n        const y1 = startDistance * Math.sin(angle);\n        const y2 = (startDistance + tickLength) * Math.sin(angle);\n        const x1 = startDistance * Math.cos(angle);\n        const x2 = (startDistance + tickLength) * Math.cos(angle);\n        const points = [\n            { x: x1, y: y1 },\n            { x: x2, y: y2 }\n        ];\n        const lineGenerator = line()\n            .x(d => d.x)\n            .y(d => d.y);\n        return lineGenerator(points);\n    }\n}\nGaugeAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nGaugeAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: { bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", min: \"min\", max: \"max\", angleSpan: \"angleSpan\", startAngle: \"startAngle\", radius: \"radius\", valueScale: \"valueScale\", tickFormatting: \"tickFormatting\" }, usesOnChanges: true, ngImport: i0, template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `, isInline: true, directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeAxisComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'g[ngx-charts-gauge-axis]',\n                    template: `\n    <svg:g [attr.transform]=\"rotate\">\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.big\" class=\"gauge-tick gauge-tick-large\">\n        <svg:text\n          [style.textAnchor]=\"tick.textAnchor\"\n          [attr.transform]=\"tick.textTransform\"\n          alignment-baseline=\"central\"\n        >\n          {{ tick.text }}\n        </svg:text>\n      </svg:g>\n      <svg:g *ngFor=\"let tick of ticks.small\" class=\"gauge-tick gauge-tick-small\">\n        <svg:path [attr.d]=\"tick.line\" />\n      </svg:g>\n    </svg:g>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], radius: [{\n                type: Input\n            }], valueScale: [{\n                type: Input\n            }], tickFormatting: [{\n                type: Input\n            }] } });\n\nclass GaugeComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.legend = false;\n        this.legendTitle = 'Legend';\n        this.legendPosition = LegendPosition.Right;\n        this.min = 0;\n        this.max = 100;\n        this.bigSegments = 10;\n        this.smallSegments = 5;\n        this.showAxis = true;\n        this.startAngle = -120;\n        this.angleSpan = 240;\n        this.activeEntries = [];\n        this.tooltipDisabled = false;\n        this.showText = true;\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.resizeScale = 1;\n        this.rotation = '';\n        this.textTransform = 'scale(1, 1)';\n        this.cornerRadius = 10;\n    }\n    ngAfterViewInit() {\n        super.ngAfterViewInit();\n        setTimeout(() => this.scaleText());\n    }\n    update() {\n        super.update();\n        if (!this.showAxis) {\n            if (!this.margin) {\n                this.margin = [10, 20, 10, 20];\n            }\n        }\n        else {\n            if (!this.margin) {\n                this.margin = [60, 100, 60, 100];\n            }\n        }\n        // make the starting angle positive\n        if (this.startAngle < 0) {\n            this.startAngle = (this.startAngle % 360) + 360;\n        }\n        this.angleSpan = Math.min(this.angleSpan, 360);\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            showLegend: this.legend,\n            legendPosition: this.legendPosition\n        });\n        this.domain = this.getDomain();\n        this.valueDomain = this.getValueDomain();\n        this.valueScale = this.getValueScale();\n        this.displayValue = this.getDisplayValue();\n        this.outerRadius = Math.min(this.dims.width, this.dims.height) / 2;\n        this.arcs = this.getArcs();\n        this.setColors();\n        this.legendOptions = this.getLegendOptions();\n        const xOffset = this.margin[3] + this.dims.width / 2;\n        const yOffset = this.margin[0] + this.dims.height / 2;\n        this.transform = `translate(${xOffset}, ${yOffset})`;\n        this.rotation = `rotate(${this.startAngle})`;\n        setTimeout(() => this.scaleText(), 50);\n    }\n    getArcs() {\n        const arcs = [];\n        const availableRadius = this.outerRadius * 0.7;\n        const radiusPerArc = Math.min(availableRadius / this.results.length, 10);\n        const arcWidth = radiusPerArc * 0.7;\n        this.textRadius = this.outerRadius - this.results.length * radiusPerArc;\n        this.cornerRadius = Math.floor(arcWidth / 2);\n        let i = 0;\n        for (const d of this.results) {\n            const outerRadius = this.outerRadius - i * radiusPerArc;\n            const innerRadius = outerRadius - arcWidth;\n            const backgroundArc = {\n                endAngle: (this.angleSpan * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: this.max,\n                    name: d.name\n                }\n            };\n            const valueArc = {\n                endAngle: (Math.min(this.valueScale(d.value), this.angleSpan) * Math.PI) / 180,\n                innerRadius,\n                outerRadius,\n                data: {\n                    value: d.value,\n                    name: d.name\n                }\n            };\n            const arc = {\n                backgroundArc,\n                valueArc\n            };\n            arcs.push(arc);\n            i++;\n        }\n        return arcs;\n    }\n    getDomain() {\n        return this.results.map(d => d.name);\n    }\n    getValueDomain() {\n        const values = this.results.map(d => d.value);\n        const dataMin = Math.min(...values);\n        const dataMax = Math.max(...values);\n        if (this.min !== undefined) {\n            this.min = Math.min(this.min, dataMin);\n        }\n        else {\n            this.min = dataMin;\n        }\n        if (this.max !== undefined) {\n            this.max = Math.max(this.max, dataMax);\n        }\n        else {\n            this.max = dataMax;\n        }\n        return [this.min, this.max];\n    }\n    getValueScale() {\n        return scaleLinear().range([0, this.angleSpan]).nice().domain(this.valueDomain);\n    }\n    getDisplayValue() {\n        const value = this.results.map(d => d.value).reduce((a, b) => a + b, 0);\n        if (this.textValue && 0 !== this.textValue.length) {\n            return this.textValue.toLocaleString();\n        }\n        if (this.valueFormatting) {\n            return this.valueFormatting(value);\n        }\n        return value.toLocaleString();\n    }\n    scaleText(repeat = true) {\n        if (!this.showText) {\n            return;\n        }\n        const { width } = this.textEl.nativeElement.getBoundingClientRect();\n        const oldScale = this.resizeScale;\n        if (width === 0) {\n            this.resizeScale = 1;\n        }\n        else {\n            const availableSpace = this.textRadius;\n            this.resizeScale = Math.floor((availableSpace / (width / this.resizeScale)) * 100) / 100;\n        }\n        if (this.resizeScale !== oldScale) {\n            this.textTransform = `scale(${this.resizeScale}, ${this.resizeScale})`;\n            this.cd.markForCheck();\n            if (repeat) {\n                setTimeout(() => this.scaleText(false), 50);\n            }\n        }\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    getLegendOptions() {\n        return {\n            scaleType: ScaleType.Ordinal,\n            colors: this.colors,\n            domain: this.domain,\n            title: this.legendTitle,\n            position: this.legendPosition\n        };\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, ScaleType.Ordinal, this.domain, this.customColors);\n    }\n    onActivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        if (idx > -1) {\n            return;\n        }\n        this.activeEntries = [item, ...this.activeEntries];\n        this.activate.emit({ value: item, entries: this.activeEntries });\n    }\n    onDeactivate(item) {\n        const idx = this.activeEntries.findIndex(d => {\n            return d.name === item.name && d.value === item.value;\n        });\n        this.activeEntries.splice(idx, 1);\n        this.activeEntries = [...this.activeEntries];\n        this.deactivate.emit({ value: item, entries: this.activeEntries });\n    }\n    isActive(entry) {\n        if (!this.activeEntries)\n            return false;\n        const item = this.activeEntries.find(d => {\n            return entry.name === d.name && entry.series === d.series;\n        });\n        return item !== undefined;\n    }\n    trackBy(index, item) {\n        return item.valueArc.data.name;\n    }\n}\nGaugeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nGaugeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: GaugeComponent, selector: \"ngx-charts-gauge\", inputs: { legend: \"legend\", legendTitle: \"legendTitle\", legendPosition: \"legendPosition\", min: \"min\", max: \"max\", textValue: \"textValue\", units: \"units\", bigSegments: \"bigSegments\", smallSegments: \"smallSegments\", results: \"results\", showAxis: \"showAxis\", startAngle: \"startAngle\", angleSpan: \"angleSpan\", activeEntries: \"activeEntries\", axisTickFormatting: \"axisTickFormatting\", tooltipDisabled: \"tooltipDisabled\", valueFormatting: \"valueFormatting\", showText: \"showText\", margin: \"margin\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], viewQueries: [{ propertyName: \"textEl\", first: true, predicate: [\"textEl\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }, { type: GaugeArcComponent, selector: \"g[ngx-charts-gauge-arc]\", inputs: [\"backgroundArc\", \"valueArc\", \"cornerRadius\", \"colors\", \"isActive\", \"tooltipDisabled\", \"valueFormatting\", \"tooltipTemplate\", \"animations\"], outputs: [\"select\", \"activate\", \"deactivate\"] }, { type: GaugeAxisComponent, selector: \"g[ngx-charts-gauge-axis]\", inputs: [\"bigSegments\", \"smallSegments\", \"min\", \"max\", \"angleSpan\", \"startAngle\", \"radius\", \"valueScale\", \"tickFormatting\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-gauge', template: `\n    <ngx-charts-chart\n      [view]=\"[width, height]\"\n      [showLegend]=\"legend\"\n      [legendOptions]=\"legendOptions\"\n      [activeEntries]=\"activeEntries\"\n      [animations]=\"animations\"\n      (legendLabelClick)=\"onClick($event)\"\n      (legendLabelActivate)=\"onActivate($event)\"\n      (legendLabelDeactivate)=\"onDeactivate($event)\"\n    >\n      <svg:g [attr.transform]=\"transform\" class=\"gauge chart\">\n        <svg:g *ngFor=\"let arc of arcs; trackBy: trackBy\" [attr.transform]=\"rotation\">\n          <svg:g\n            ngx-charts-gauge-arc\n            [backgroundArc]=\"arc.backgroundArc\"\n            [valueArc]=\"arc.valueArc\"\n            [cornerRadius]=\"cornerRadius\"\n            [colors]=\"colors\"\n            [isActive]=\"isActive(arc.valueArc.data)\"\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [valueFormatting]=\"valueFormatting\"\n            [animations]=\"animations\"\n            (select)=\"onClick($event)\"\n            (activate)=\"onActivate($event)\"\n            (deactivate)=\"onDeactivate($event)\"\n          ></svg:g>\n        </svg:g>\n\n        <svg:g\n          ngx-charts-gauge-axis\n          *ngIf=\"showAxis\"\n          [bigSegments]=\"bigSegments\"\n          [smallSegments]=\"smallSegments\"\n          [min]=\"min\"\n          [max]=\"max\"\n          [radius]=\"outerRadius\"\n          [angleSpan]=\"angleSpan\"\n          [valueScale]=\"valueScale\"\n          [startAngle]=\"startAngle\"\n          [tickFormatting]=\"axisTickFormatting\"\n        ></svg:g>\n\n        <svg:text\n          #textEl\n          *ngIf=\"showText\"\n          [style.textAnchor]=\"'middle'\"\n          [attr.transform]=\"textTransform\"\n          alignment-baseline=\"central\"\n        >\n          <tspan x=\"0\" dy=\"0\">{{ displayValue }}</tspan>\n          <tspan x=\"0\" dy=\"1.2em\">{{ units }}</tspan>\n        </svg:text>\n      </svg:g>\n    </ngx-charts-chart>\n  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\", \".gauge .background-arc path{fill:#0000000d}.gauge .gauge-tick path{stroke:#666}.gauge .gauge-tick text{font-size:12px;fill:#666;font-weight:700}.gauge .gauge-tick-large path{stroke-width:2px}.gauge .gauge-tick-small path{stroke-width:1px}\\n\"] }]\n        }], propDecorators: { legend: [{\n                type: Input\n            }], legendTitle: [{\n                type: Input\n            }], legendPosition: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], textValue: [{\n                type: Input\n            }], units: [{\n                type: Input\n            }], bigSegments: [{\n                type: Input\n            }], smallSegments: [{\n                type: Input\n            }], results: [{\n                type: Input\n            }], showAxis: [{\n                type: Input\n            }], startAngle: [{\n                type: Input\n            }], angleSpan: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], axisTickFormatting: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], valueFormatting: [{\n                type: Input\n            }], showText: [{\n                type: Input\n            }], margin: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }], textEl: [{\n                type: ViewChild,\n                args: ['textEl']\n            }] } });\n\nclass GaugeModule {\n}\nGaugeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nGaugeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent], imports: [ChartCommonModule, PieChartModule, BarChartModule], exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent] });\nGaugeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, imports: [[ChartCommonModule, PieChartModule, BarChartModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: GaugeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule, PieChartModule, BarChartModule],\n                    declarations: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent],\n                    exports: [LinearGaugeComponent, GaugeComponent, GaugeArcComponent, GaugeAxisComponent]\n                }]\n        }] });\n\n// The export is needed here to generate a valid polyfills.metadata.json file\nfunction ngxChartsPolyfills() {\n    // IE11 fix\n    // Ref: https://github.com/swimlane/ngx-charts/issues/386\n    if (typeof SVGElement !== 'undefined' && typeof SVGElement.prototype.contains === 'undefined') {\n        SVGElement.prototype.contains = HTMLDivElement.prototype.contains;\n    }\n}\n\nclass SankeyComponent extends BaseChartComponent {\n    constructor() {\n        super(...arguments);\n        this.showLabels = true;\n        this.tooltipDisabled = false;\n        this.activeEntries = [];\n        this.activate = new EventEmitter();\n        this.deactivate = new EventEmitter();\n        this.margin = [10, 10, 10, 10];\n        this.scaleType = ScaleType.Ordinal;\n        this.styleTypes = StyleTypes;\n    }\n    update() {\n        super.update();\n        this.dims = calculateViewDimensions({\n            width: this.width,\n            height: this.height,\n            margins: this.margin,\n            legendType: this.scaleType\n        });\n        const linkDefs = this.results;\n        const nodeDefs = Array.from(new Set(linkDefs.flatMap(l => [l.source, l.target])), (name) => ({\n            name,\n            value: linkDefs.filter(l => l.source === name).reduce((acc, l) => acc + l.value, 0)\n        }));\n        // Configure generator\n        const sankeyGenerator = sankey()\n            .nodeId(d => d.name)\n            .nodeAlign(sankeyLeft)\n            .nodeWidth(15)\n            .nodePadding(10)\n            .extent([\n            [1, 5],\n            [this.dims.width - 1, this.dims.height - 5]\n        ]);\n        // Generate links and nodes\n        const data = sankeyGenerator({\n            nodes: nodeDefs.map(d => Object.assign({}, d)),\n            links: linkDefs.map(d => Object.assign({}, d))\n        });\n        this.valueDomain = this.getValueDomain(data.nodes);\n        this.setColors();\n        this.nodeRects = data.nodes.map(node => {\n            const rect = {\n                x: node.x0,\n                y: node.y0,\n                height: node.y1 - node.y0,\n                width: node.x1 - node.x0,\n                fill: this.colors.getColor(node.name),\n                tooltip: this.getNodeTooltipText(node),\n                rx: 5,\n                data: {\n                    name: node.name,\n                    value: node.value\n                },\n                transform: '',\n                label: this.labelFormatting ? this.labelFormatting(node.name) : node.name,\n                labelAnchor: TextAnchor.Start\n            };\n            rect.labelAnchor = this.getTextAnchor(node);\n            rect.transform = `translate(${rect.x},${rect.y})`;\n            return rect;\n        });\n        this.linkPaths = data.links.map(link => {\n            const gradientId = 'mask' + id().toString();\n            const linkPath = {\n                path: sankeyLinkHorizontal()(link),\n                strokeWidth: Math.max(1, link.width),\n                tooltip: this.getLinkTooltipText(link.source, link.target, link.value),\n                id: gradientId,\n                gradientFill: `url(#${gradientId})`,\n                source: link.source,\n                target: link.target,\n                startColor: this.colors.getColor(link.source.name),\n                endColor: this.colors.getColor(link.target.name),\n                data: {\n                    source: link.source.name,\n                    target: link.target.name,\n                    value: link.value\n                }\n            };\n            return linkPath;\n        });\n        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0]})`;\n    }\n    getNodeTooltipText(node) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(node.name)}</span>\n      <span class=\"tooltip-val\">${node.value.toLocaleString()}</span>\n    `;\n    }\n    getLinkTooltipText(sourceNode, targetNode, value) {\n        return `\n      <span class=\"tooltip-label\">${escapeLabel(sourceNode.name)} • ${escapeLabel(targetNode.name)}</span>\n      <span class=\"tooltip-val\">${value.toLocaleString()} (${(value / sourceNode.value).toLocaleString(undefined, {\n            style: 'percent',\n            maximumFractionDigits: 2\n        })})</span>\n    `;\n    }\n    getTextAnchor(node) {\n        if (node.layer === 0) {\n            return TextAnchor.Start;\n        }\n        else {\n            return TextAnchor.End;\n        }\n    }\n    onClick(data) {\n        this.select.emit(data);\n    }\n    setColors() {\n        this.colors = new ColorHelper(this.scheme, this.scaleType, this.valueDomain);\n    }\n    getValueDomain(nodes) {\n        return nodes.map(n => n.name);\n    }\n}\nSankeyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });\nSankeyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.0\", type: SankeyComponent, selector: \"ngx-charts-sankey\", inputs: { showLabels: \"showLabels\", gradient: \"gradient\", tooltipDisabled: \"tooltipDisabled\", activeEntries: \"activeEntries\", labelFormatting: \"labelFormatting\" }, outputs: { activate: \"activate\", deactivate: \"deactivate\" }, queries: [{ propertyName: \"tooltipTemplate\", first: true, predicate: [\"tooltipTemplate\"], descendants: true }], usesInheritance: true, ngImport: i0, template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"sankey chart\">\n        <svg:g\n          *ngFor=\"let link of linkPaths\"\n          class=\"link\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : link.tooltip\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"link.data\"\n        >\n          <svg:defs>\n            <svg:linearGradient\n              [attr.id]=\"link.id\"\n              gradientUnits=\"userSpaceOnUse\"\n              [attr.x1]=\"link.source.x1\"\n              [attr.x2]=\"link.target.x0\"\n            >\n              <svg:stop offset=\"0%\" [attr.stop-color]=\"link.startColor\"></svg:stop>\n              <svg:stop offset=\"100%\" [attr.stop-color]=\"link.endColor\"></svg:stop>\n            </svg:linearGradient>\n          </svg:defs>\n          <svg:path\n            [attr.d]=\"link.path\"\n            [attr.stroke]=\"link.gradientFill\"\n            [attr.stroke-width]=\"link.strokeWidth\"\n            stroke-opacity=\"0.5\"\n            fill=\"none\"\n            (click)=\"select.emit(link.data)\"\n            (mouseenter)=\"activate.emit(link.data)\"\n          ></svg:path>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\" class=\"node\">\n          <svg:rect\n            [attr.x]=\"0\"\n            [attr.y]=\"0\"\n            [attr.width]=\"rect.width\"\n            [attr.height]=\"rect.height\"\n            [attr.fill]=\"rect.fill\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : rect.tooltip\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"rect.data\"\n            (click)=\"select.emit(rect.data)\"\n            (mouseenter)=\"activate.emit(rect.data)\"\n          ></svg:rect>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\">\n          <svg:text\n            *ngIf=\"showLabels && rect.height > 15\"\n            class=\"label\"\n            [attr.x]=\"rect.width + 5\"\n            [attr.y]=\"rect.height / 2\"\n            [attr.text-anchor]=\"rect.labelAnchor\"\n            dy=\"0.35em\"\n            [attr.dx]=\"rect.labelAnchor === 'end' ? -25 : 0\"\n          >\n            {{ rect.label }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, isInline: true, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"], components: [{ type: ChartComponent, selector: \"ngx-charts-chart\", inputs: [\"view\", \"showLegend\", \"legendOptions\", \"legendType\", \"activeEntries\", \"animations\"], outputs: [\"legendLabelClick\", \"legendLabelActivate\", \"legendLabelDeactivate\"] }], directives: [{ type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: TooltipDirective, selector: \"[ngx-tooltip]\", inputs: [\"tooltipCssClass\", \"tooltipTitle\", \"tooltipAppendToBody\", \"tooltipSpacing\", \"tooltipDisabled\", \"tooltipShowCaret\", \"tooltipPlacement\", \"tooltipAlignment\", \"tooltipType\", \"tooltipCloseOnClickOutside\", \"tooltipCloseOnMouseLeave\", \"tooltipHideTimeout\", \"tooltipShowTimeout\", \"tooltipTemplate\", \"tooltipShowEvent\", \"tooltipContext\", \"tooltipImmediateExit\"], outputs: [\"show\", \"hide\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-charts-sankey', template: `\n    <ngx-charts-chart [view]=\"[width, height]\" [animations]=\"animations\">\n      <svg:g [attr.transform]=\"transform\" class=\"sankey chart\">\n        <svg:g\n          *ngFor=\"let link of linkPaths\"\n          class=\"link\"\n          ngx-tooltip\n          [tooltipDisabled]=\"tooltipDisabled\"\n          [tooltipType]=\"styleTypes.tooltip\"\n          [tooltipPlacement]=\"'top'\"\n          [tooltipTitle]=\"tooltipTemplate ? undefined : link.tooltip\"\n          [tooltipTemplate]=\"tooltipTemplate\"\n          [tooltipContext]=\"link.data\"\n        >\n          <svg:defs>\n            <svg:linearGradient\n              [attr.id]=\"link.id\"\n              gradientUnits=\"userSpaceOnUse\"\n              [attr.x1]=\"link.source.x1\"\n              [attr.x2]=\"link.target.x0\"\n            >\n              <svg:stop offset=\"0%\" [attr.stop-color]=\"link.startColor\"></svg:stop>\n              <svg:stop offset=\"100%\" [attr.stop-color]=\"link.endColor\"></svg:stop>\n            </svg:linearGradient>\n          </svg:defs>\n          <svg:path\n            [attr.d]=\"link.path\"\n            [attr.stroke]=\"link.gradientFill\"\n            [attr.stroke-width]=\"link.strokeWidth\"\n            stroke-opacity=\"0.5\"\n            fill=\"none\"\n            (click)=\"select.emit(link.data)\"\n            (mouseenter)=\"activate.emit(link.data)\"\n          ></svg:path>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\" class=\"node\">\n          <svg:rect\n            [attr.x]=\"0\"\n            [attr.y]=\"0\"\n            [attr.width]=\"rect.width\"\n            [attr.height]=\"rect.height\"\n            [attr.fill]=\"rect.fill\"\n            ngx-tooltip\n            [tooltipDisabled]=\"tooltipDisabled\"\n            [tooltipType]=\"styleTypes.tooltip\"\n            [tooltipPlacement]=\"'top'\"\n            [tooltipTitle]=\"tooltipTemplate ? undefined : rect.tooltip\"\n            [tooltipTemplate]=\"tooltipTemplate\"\n            [tooltipContext]=\"rect.data\"\n            (click)=\"select.emit(rect.data)\"\n            (mouseenter)=\"activate.emit(rect.data)\"\n          ></svg:rect>\n        </svg:g>\n\n        <svg:g *ngFor=\"let rect of nodeRects\" [attr.transform]=\"rect.transform\">\n          <svg:text\n            *ngIf=\"showLabels && rect.height > 15\"\n            class=\"label\"\n            [attr.x]=\"rect.width + 5\"\n            [attr.y]=\"rect.height / 2\"\n            [attr.text-anchor]=\"rect.labelAnchor\"\n            dy=\"0.35em\"\n            [attr.dx]=\"rect.labelAnchor === 'end' ? -25 : 0\"\n          >\n            {{ rect.label }}\n          </svg:text>\n        </svg:g>\n      </svg:g>\n    </ngx-charts-chart>\n  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [\".ngx-charts-outer{animation:chartFadeIn linear .6s}@keyframes chartFadeIn{0%{opacity:0}20%{opacity:0}to{opacity:1}}.ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .cell,.ngx-charts .bar,.ngx-charts .node,.ngx-charts .link,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .node.active,.ngx-charts .node:hover,.ngx-charts .link.active,.ngx-charts .link:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .node:focus,.ngx-charts .link:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .node.hidden,.ngx-charts .link.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}\\n\"] }]\n        }], propDecorators: { showLabels: [{\n                type: Input\n            }], gradient: [{\n                type: Input\n            }], tooltipDisabled: [{\n                type: Input\n            }], activeEntries: [{\n                type: Input\n            }], labelFormatting: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], deactivate: [{\n                type: Output\n            }], tooltipTemplate: [{\n                type: ContentChild,\n                args: ['tooltipTemplate']\n            }] } });\n\nclass SankeyModule {\n}\nSankeyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nSankeyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyModule, declarations: [SankeyComponent], imports: [ChartCommonModule], exports: [SankeyComponent] });\nSankeyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyModule, imports: [[ChartCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: SankeyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [ChartCommonModule],\n                    declarations: [SankeyComponent],\n                    exports: [SankeyComponent]\n                }]\n        }] });\n\nclass NgxChartsModule {\n    constructor() {\n        ngxChartsPolyfills();\n    }\n}\nNgxChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, exports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        SankeyModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\nNgxChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, imports: [ChartCommonModule,\n        AreaChartModule,\n        BarChartModule,\n        BoxChartModule,\n        BubbleChartModule,\n        HeatMapModule,\n        SankeyModule,\n        LineChartModule,\n        PolarChartModule,\n        NumberCardModule,\n        PieChartModule,\n        TreeMapModule,\n        GaugeModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.0\", ngImport: i0, type: NgxChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [\n                        ChartCommonModule,\n                        AreaChartModule,\n                        BarChartModule,\n                        BoxChartModule,\n                        BubbleChartModule,\n                        HeatMapModule,\n                        SankeyModule,\n                        LineChartModule,\n                        PolarChartModule,\n                        NumberCardModule,\n                        PieChartModule,\n                        TreeMapModule,\n                        GaugeModule\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\n\nfunction tickFormat(fieldType, groupByType) {\n    return function (label) {\n        if (label === 'No Value' || label === 'Other') {\n            return label;\n        }\n        if (fieldType === 'date' && groupByType === 'groupBy') {\n            const formatter = timeFormat('MM/DD/YYYY');\n            return formatter(label);\n        }\n        return label.toString();\n    };\n}\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/*\n * Public API Surface of ngx-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AdvancedLegendComponent, AdvancedPieChartComponent, AreaChartComponent, AreaChartModule, AreaChartNormalizedComponent, AreaChartStackedComponent, AreaComponent, AreaSeriesComponent, AxesModule, AxisLabelComponent, BarChartModule, BarChartType, BarComponent, BarHorizontal2DComponent, BarHorizontalComponent, BarHorizontalNormalizedComponent, BarHorizontalStackedComponent, BarLabelComponent, BarOrientation, BarVertical2DComponent, BarVerticalComponent, BarVerticalNormalizedComponent, BarVerticalStackedComponent, BaseChartComponent, BoxChartComponent, BoxChartModule, BoxComponent, BoxSeriesComponent, BubbleChartComponent, BubbleChartModule, BubbleSeriesComponent, CardComponent, CardSeriesComponent, ChartCommonModule, ChartComponent, CircleComponent, CircleSeriesComponent, ColorHelper, CountUpDirective, D0Types, GaugeArcComponent, GaugeAxisComponent, GaugeComponent, GaugeModule, GridPanelComponent, GridPanelSeriesComponent, HeatCellSeriesComponent, HeatMapCellComponent, HeatMapComponent, HeatMapModule, LegendComponent, LegendEntryComponent, LegendPosition, LegendType, LineChartComponent, LineChartModule, LineComponent, LineSeriesComponent, LinearGaugeComponent, NgxChartsModule, NumberCardComponent, NumberCardModule, Orientation, PieArcComponent, PieChartComponent, PieChartModule, PieGridComponent, PieGridSeriesComponent, PieLabelComponent, PieSeriesComponent, PlacementTypes, PolarChartComponent, PolarChartModule, PolarSeriesComponent, SankeyComponent, SankeyModule, ScaleLegendComponent, ScaleType, SeriesHorizontal, SeriesType, SeriesVerticalComponent, ShowTypes, StyleTypes, SvgLinearGradientComponent, SvgRadialGradientComponent, TextAnchor, Timeline, TooltipArea, TooltipContentComponent, TooltipDirective, TooltipModule, TooltipService, TreeMapCellComponent, TreeMapCellSeriesComponent, TreeMapComponent, TreeMapModule, VisibilityObserver, XAxisComponent, XAxisTicksComponent, YAxisComponent, YAxisTicksComponent, calculateViewDimensions, colorSets, count, decimalChecker, escapeLabel, formatLabel, getDomain, getScale, getScaleType, getTickLines, getUniqueXDomainValues, getXDomainArray, gridLayout, gridSize, hexToRgb, id, invertColor, reduceTicks, shadeRGBColor, sortByDomain, sortByTime, sortLinear, throttle, throttleable, tickFormat, trimLabel };\n","import { asyncScheduler } from '../scheduler/async';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function debounceTime(dueTime, scheduler = asyncScheduler) {\n    return operate((source, subscriber) => {\n        let activeTask = null;\n        let lastValue = null;\n        let lastTime = null;\n        const emit = () => {\n            if (activeTask) {\n                activeTask.unsubscribe();\n                activeTask = null;\n                const value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        };\n        function emitWhenIdle() {\n            const targetTime = lastTime + dueTime;\n            const now = scheduler.now();\n            if (now < targetTime) {\n                activeTask = this.schedule(undefined, targetTime - now);\n                subscriber.add(activeTask);\n                return;\n            }\n            emit();\n        }\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            lastValue = value;\n            lastTime = scheduler.now();\n            if (!activeTask) {\n                activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n                subscriber.add(activeTask);\n            }\n        }, () => {\n            emit();\n            subscriber.complete();\n        }, undefined, () => {\n            lastValue = activeTask = null;\n        }));\n    });\n}\n","import {Selection, root} from \"./selection/index.js\";\n\nexport default function(selector) {\n  return typeof selector === \"string\"\n      ? new Selection([[document.querySelector(selector)]], [document.documentElement])\n      : new Selection([[selector]], root);\n}\n","import { Injectable } from '@angular/core';\r\nimport {AdminRoutingApi} from \"../admin-routing.api\";\r\nimport {HttpClient} from \"@angular/common/http\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ChatroomService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getAllChatAdmin() {\r\n    return this.http.get(AdminRoutingApi.GetAllChatAdmin);\r\n  }\r\n\r\n  getDetailChatAdmin(chatId: number) {\r\n    return this.http.get(AdminRoutingApi.GetDetailChatAdmin + '/' + chatId);\r\n  }\r\n\r\n  getAllMessagesAdmin() {\r\n    return this.http.get(AdminRoutingApi.GetAllMessagesAdmin);\r\n  }\r\n\r\n  removeMemberInGroup(userId: any){\r\n    return this.http.post(AdminRoutingApi.RemoveUserInGroup, userId)\r\n  }\r\n\r\n}\r\n","<div class=\"main-panel\">\r\n  <div class=\"content-wrapper\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-4 grid-margin stretch-card\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <h4 class=\"card-title\">Số lượng tin đã nhắn 7 ngày qua</h4>\r\n            <div class=\"aligner-wrapper\">\r\n              <div class=\"wrapper d-flex flex-column justify-content-center absolute absolute-center\">\r\n                {{numberOfMessages}}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-8 grid-margin stretch-card\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body performane-indicator-card\">\r\n            <div class=\"d-sm-flex\">\r\n              <h4 class=\"card-title flex-shrink-1\">Thống kê tin nhắn</h4>\r\n            </div>\r\n            <div id=\"performance-indicator-chart\" class=\"ct-chart mt-4\">\r\n              <ngx-charts-bar-vertical\r\n                [view]=\"view\"\r\n                [results]=\"messageCharts\"\r\n                [gradient]=\"gradient\"\r\n                [xAxis]=\"showXAxis\"\r\n                [yAxis]=\"showYAxis\"\r\n                [legend]=\"showLegend\"\r\n                [xAxisLabel]=\"xAxisLabel\"\r\n                [yAxisLabel]=\"yAxisLabel\"\r\n                (select)=\"onSelect($event)\">\r\n              </ngx-charts-bar-vertical>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"row\">\r\n      <div class=\"col-md-12 grid-margin stretch-card\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <div class=\"d-sm-flex align-items-center mb-4\">\r\n              <h4 class=\"card-title mb-sm-0\">Khách hàng thường xuyên sử dụng</h4>\r\n              <a routerLink=\"../khach-hang/quan-ly-khach-hang\" class=\"text-dark ml-auto mb-3 mb-sm-0\">Xem tất cả khách hàng</a>\r\n            </div>\r\n            <div class=\"table-responsive border rounded p-1\">\r\n              <table class=\"table table-bordered table-striped table-hover\">\r\n                <thead class=\"table-dark\">\r\n                <tr>\r\n                  <th></th>\r\n                  <th>Họ và tên</th>\r\n                  <th>Số điện thoại</th>\r\n                  <th>Email</th>\r\n                  <th>Lần đăng nhập cuối</th>\r\n                  <th>Số tin đã nhắn</th>\r\n                  <th>Trạng thái</th>\r\n                  <th>Ngày đăng kí</th>\r\n                  <th></th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                  <tr *ngFor=\"let client of clients\">\r\n                    <td><img src=\"{{ client.avatar | pipeHostFile }}\" alt=\"\" /></td>\r\n                    <td>{{client.name}}</td>\r\n                    <td>{{client.phone}}</td>\r\n                    <td>{{client.email}}</td>\r\n                    <td>{{client.lastLogin}}</td>\r\n                    <td>{{client.messageCount}}</td>\r\n                    <td>\r\n                      <ng-container *ngIf=\"client.status === 1\">\r\n                        <label class=\"badge badge-success\">Hoạt động</label>\r\n                      </ng-container>\r\n                      <ng-container *ngIf=\"client.status === 0\">\r\n                        <label class=\"badge badge-warning\">Đã khóa</label>\r\n                      </ng-container>\r\n                    </td>\r\n                    <td>{{client.createdAt | date:'short'}}</td>\r\n                    <td>\r\n                      <button title=\"Xem chi tiết\" class=\"btn-option link-info\"><i class=\"fa fa-solid fa-eye\"></i></button> |\r\n                      <button title=\"Chỉnh sửa\" class=\"btn-option link-primary\"><i class=\"fa fa-solid fa-pen\"></i></button> |\r\n                      <button title=\"Xóa\" class=\"btn-option link-danger\"><i class=\"fa fa-solid fa-trash\"></i></button>\r\n                    </td>\r\n                  </tr>\r\n                </tbody>\r\n              </table>\r\n\r\n            </div>\r\n<!--            <div class=\"d-flex mt-4 flex-wrap\">-->\r\n<!--              <p class=\"text-muted\">Showing {{1+pageSize*page}} to {{10+pageSize*page}} of {{clients.length}} entries</p>-->\r\n<!--              <nav class=\"ml-auto\">-->\r\n<!--                  <pagination-controls (pageChange)=\"page = $event\"></pagination-controls>-->\r\n<!--              </nav>-->\r\n<!--            </div>-->\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- content-wrapper ends -->\r\n  <!-- partial:partials/_footer.html -->\r\n<!--  <footer class=\"footer\">-->\r\n<!--    <div class=\"d-sm-flex justify-content-center justify-content-sm-between\">-->\r\n<!--      <span class=\"text-muted d-block text-center text-sm-left d-sm-inline-block\">Copyright © bootstrapdash.com 2020</span>-->\r\n<!--      <span class=\"float-none float-sm-right d-block mt-1 mt-sm-0 text-center\"> Free <a href=\"https://www.bootstrapdash.com/bootstrap-admin-template/\" target=\"_blank\">Bootstrap admin templates</a> from Bootstrapdash.com</span>-->\r\n<!--    </div>-->\r\n<!--  </footer>-->\r\n  <!-- partial -->\r\n</div>\r\n","import {AfterViewInit, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\r\n// import Chart from 'chart.js/auto';\r\nimport {ChatroomService} from \"../../../services/chatroom.service\";\r\nimport {UserService} from \"../../../services/user.service\";\r\nimport {ToastrService} from \"ngx-toastr\";\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n  chats: any[]=[];\r\n  clients: any[]=[];\r\n  messages: any[] = [];\r\n  messageCharts: any[] = [];\r\n  userUse: any[] = [];\r\n  numberOfMessages: number | undefined;\r\n\r\n  @ViewChild('myChart') myChart!: ElementRef;\r\n\r\n  //config chart;\r\n  view: [number, number] = [660, 300];\r\n\r\n  showXAxis = true;\r\n  showYAxis = true;\r\n  gradient = false;\r\n  xAxisLabel = 'Tháng';\r\n  yAxisLabel = 'Số lượng tin đã nhắn';\r\n  showLegend = true;\r\n\r\n  constructor(private chatRoomService: ChatroomService, private userService: UserService, private toastr: ToastrService) { }\r\n\r\n  ngOnInit() {\r\n    this.getAllChatRoomAdmin();\r\n    this.getAllMessagesAdmin();\r\n    this.getTopClientsChat();\r\n  }\r\n\r\n  onSelect(event: any) {\r\n    console.log(event);\r\n  }\r\n\r\n  getTopClientsChat() {\r\n    this.userService.getAllClients().subscribe({\r\n      next: (response: any) => {\r\n        this.clients = response;\r\n\r\n        let clientMap = new Map();\r\n        for (let client of response) {\r\n          clientMap.set(client.id, { ...client, messageCount: 0 });\r\n        }\r\n        // Lọc và thêm thuộc tính message vào user nếu có id phù hợp\r\n        for (let message of this.userUse) {\r\n          let userId = message.senderId;\r\n          if (clientMap.has(userId)) {\r\n            clientMap.get(userId).messageCount = message.messageCount;\r\n          }\r\n        }\r\n\r\n        this.clients = Array.from(clientMap.values());\r\n        this.clients.sort((a, b) => {\r\n          if(a.messageCount > b.messageCount) return -1;\r\n          if(a.messageCount < b.messageCount) return 1;\r\n          return 0;\r\n        })\r\n\r\n        this.clients = this.clients.slice(0, 10);\r\n      }\r\n    })\r\n  }\r\n\r\n  getAllChatRoomAdmin(){\r\n    this.chatRoomService.getAllChatAdmin().subscribe({\r\n      next: (response: any) => {\r\n        this.chats = response;\r\n      }\r\n    })\r\n  }\r\n  getAllMessagesAdmin() {\r\n    this.chatRoomService.getAllMessagesAdmin().subscribe({\r\n      next: (response: any) => {\r\n        this.messages = response;\r\n\r\n        // Đếm số lượng tin nhắn theo tháng\r\n        let data = this.messages.reduce((acc, item) => {\r\n          const date = new Date(item.createdAt);\r\n          const monthYear = `${date.getMonth() + 1}-${date.getFullYear()}`; // Tạo chuỗi tháng-năm\r\n\r\n          if (!acc[monthYear]) {\r\n            acc[monthYear] = { name: monthYear, value: 0,  realDate: item.createdAt}; // Khởi tạo đối tượng mới nếu chưa tồn tại\r\n          }\r\n\r\n          acc[monthYear].value++; // Tăng số lượng bản ghi\r\n\r\n          return acc;\r\n        }, {});\r\n\r\n        this.messageCharts = Object.values(data);\r\n        this.messageCharts.sort((a, b) => {\r\n          if (a.realDate < b.realDate) return -1;\r\n          if (a.realDate > b.realDate) return 1;\r\n          return 0;\r\n        });\r\n\r\n        // Đếm số lượng tin nhắn theo senderId\r\n        let dataBySender = this.messages.reduce((acc, item) => {\r\n          const senderId = item.senderId;\r\n\r\n          if (!acc[senderId]) {\r\n            acc[senderId] = { senderId: senderId, messageCount: 0 };\r\n          }\r\n\r\n          acc[senderId].messageCount++;\r\n\r\n          return acc;\r\n        }, {});\r\n\r\n        this.userUse = Object.values(dataBySender);\r\n\r\n        // Đếm số lượng tin đã nhắn trong 7 ngày qua\r\n        // Lấy thời điểm hiện tại\r\n        const currentDate = new Date();\r\n        // Số lượng tin nhắn trong 7 ngày qua\r\n        const messagesWithinLast7Days = this.messages.filter(item => {\r\n          // Chuyển thời điểm tạo tin nhắn thành đối tượng Date\r\n          const messageDate = new Date(item.createdAt);\r\n\r\n          // Tính khoảng thời gian giữa thời điểm hiện tại và thời điểm tạo tin nhắn\r\n          const timeDifference = currentDate.getTime() - messageDate.getTime();\r\n\r\n          // Chuyển thời gian từ milliseconds sang ngày\r\n          const daysDifference = timeDifference / (1000 * 3600 * 24);\r\n\r\n          // Kiểm tra xem tin nhắn có được tạo trong vòng 7 ngày qua không\r\n          return daysDifference <= 7 && daysDifference > 0;\r\n        });\r\n\r\n        // Số lượng tin nhắn trong 7 ngày qua\r\n        this.numberOfMessages = messagesWithinLast7Days.length;\r\n      },\r\n      error: err =>{\r\n        this.toastr.error('', err, {\r\n          timeOut: 2000,\r\n        });\r\n      },\r\n    })\r\n  }\r\n}\r\n","<div class=\"main-panel\">\r\n  <div class=\"content-wrapper\">\r\n    <div class=\"page-header\">\r\n      <h3 class=\"page-title\"> Danh sách phòng chat </h3>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <button class=\"btn btn-info btn-rounded\">Tạo phòng chát</button>\r\n      </nav>\r\n    </div>\r\n    <table class=\"table table-bordered table-striped table-hover\">\r\n        <thead class=\"table-dark\">\r\n            <tr>\r\n                <th></th>\r\n                <th>Tên phòng chat</th>\r\n                <th>Loại phòng chat</th>\r\n                <th>Số lượng tin đã nhắn</th>\r\n                <th>Số lượng thành viên</th>\r\n                <th>Thời gian tạo</th>\r\n                <th>Thời gian hoạt động cuối</th>\r\n                <th></th>\r\n            </tr>\r\n        </thead>\r\n        <tbody *ngIf=\"chats.length > 0\">\r\n        <tr *ngFor=\"let chat of chats | paginate: { itemsPerPage: pageSize, currentPage: pageNumber }\">\r\n            <td [routerLink]=\"['/admin/phong-chat/chi-tiet-phong-chat', chat.id]\"><img src=\"{{ chat.photo | pipeHostFile }}\" alt=\"\" /></td>\r\n          <td><a [routerLink]=\"['/admin/phong-chat/chi-tiet-phong-chat', chat.id]\" class=\"link-primary\">{{chat.chatName}}</a></td>\r\n            <td>\r\n                <ng-container *ngIf=\"chat.typeChatId == 1\">\r\n                    Riêng tư\r\n                </ng-container>\r\n                <ng-container *ngIf=\"chat.typeChatId == 2\">\r\n                    Nhóm chat\r\n                </ng-container>\r\n            </td>\r\n            <td>{{chat.numberOfMessage}}</td>\r\n            <td>{{chat.numberOfMember}}</td>\r\n            <td>{{chat.createdAt | date:'short'}}</td>\r\n            <td>{{chat.updatedAt | date:'short'}}</td>\r\n            <td>\r\n              <button title=\"Xem chi tiết\" class=\"link-info btn-option\"><i class=\"fa fa-solid fa-eye\"></i></button> |\r\n              <button title=\"Xóa\" class=\"link-danger btn-option\"><i class=\"fa fa-solid fa-trash\"></i></button>\r\n            </td>\r\n        </tr>\r\n        </tbody>\r\n    </table>\r\n    <div class=\"d-flex mt-4 flex-wrap\">\r\n      <p class=\"text-muted\">Showing {{1+pageSize*(pageNumber-1)}} to\r\n        <ng-container *ngIf=\"(10+pageSize*(pageNumber-1)) >= chats.length\">\r\n          {{chats.length}}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"(10+pageSize*(pageNumber-1)) < chats.length\">\r\n          {{10+pageSize*(pageNumber-1)}}\r\n        </ng-container>\r\n        of {{chats.length}} entries</p>\r\n      <nav class=\"ml-auto\">\r\n        <pagination-controls (pageChange)=\"pageNumber = $event\"></pagination-controls>\r\n      </nav>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {ChatroomService} from \"../../../../services/chatroom.service\";\r\n\r\n@Component({\r\n  selector: 'app-chat-room-management',\r\n  templateUrl: './chat-room-management.component.html',\r\n  styleUrls: ['./chat-room-management.component.css']\r\n})\r\nexport class ChatRoomManagementComponent implements OnInit{\r\n  chats: any[]=[];\r\n\r\n  pageSize = 10; // Số lượng mục trên mỗi trang\r\n  pageNumber = 1;\r\n\r\n  constructor(private chatService: ChatroomService) {}\r\n\r\n    ngOnInit() {\r\n    this.getAllChatRoom();\r\n    }\r\n\r\n    getAllChatRoom(){\r\n    this.chatService.getAllChatAdmin().subscribe({\r\n        next: (response: any) => {\r\n          this.chats = response;\r\n        }\r\n    })\r\n  }\r\n\r\n  // onPageChange(event: any) {\r\n  //   this.currentPage = event.offset;\r\n  //   this.getAllChatRoom(); // Hàm để tải dữ liệu mới\r\n  // }\r\n\r\n}\r\n","<div class=\"main-panel\">\r\n  <div class=\"content-wrapper\">\r\n    <div class=\"page-header\">\r\n      <h3 class=\"page-title\"><h4>Thông tin chi tiết phòng chat: {{infoChat.chat.chatName}}</h4>  </h3>\r\n    </div>\r\n    <div class=\"danh-sach-thanh-vien\">\r\n      <div class=\"page-header\">\r\n        <div class=\"page-title\"> # Danh sách thành viên </div>\r\n      </div>\r\n      <table class=\"table table-bordered table-striped table-hover\">\r\n        <thead class=\"table-dark\">\r\n        <tr>\r\n          <th></th>\r\n          <th>Họ và tên</th>\r\n          <th>Số điện thoại</th>\r\n          <th>Email</th>\r\n          <th>Giới tính</th>\r\n          <th>Lần đăng nhập cuối</th>\r\n          <th>Trạng thái</th>\r\n          <th>Ngày đăng kí</th>\r\n          <th></th>\r\n        </tr>\r\n        </thead>\r\n        <tbody *ngIf=\"infoChat.users.length > 0\">\r\n        <tr *ngFor=\"let user of infoChat.users | paginate: { itemsPerPage: pageSizeMembers, currentPage: pageNumberMembers }\">\r\n          <td><img src=\"{{ user.avatar | pipeHostFile }}\" alt=\"\" /></td>\r\n          <td>{{user.name}}</td>\r\n          <td>{{user.phone}}</td>\r\n          <td>{{user.email}}</td>\r\n          <td>{{user.gender}}</td>\r\n          <td>{{user.lastLogin}}</td>\r\n          <td>\r\n            <ng-container *ngIf=\"user.status === 1\">\r\n              <label class=\"badge badge-success\">Hoạt động</label>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"user.status === 0\">\r\n              <label class=\"badge badge-warning\">Đã khóa</label>\r\n            </ng-container>\r\n          </td>\r\n          <td>{{user.createdAt | date:'short'}}</td>\r\n          <td>\r\n            <button title=\"Xóa khỏi phòng chat\" (click)=\"onDeleteMember(user)\" class=\"link-danger btn-option\"><i class=\"fa fa-solid fa-trash\"></i></button>\r\n          </td>\r\n        </tr>\r\n        </tbody>\r\n      </table>\r\n      <div class=\"d-flex mt-4 flex-wrap\">\r\n        <p class=\"text-muted\">Showing {{1+pageSizeMembers*(pageNumberMembers-1)}} to\r\n          <ng-container *ngIf=\"(10+pageSizeMembers*(pageNumberMembers-1)) >= infoChat.users.length\">\r\n            {{infoChat.users.length}}\r\n          </ng-container>\r\n          <ng-container *ngIf=\"(10+pageSizeMembers*(pageNumberMembers-1)) < infoChat.users.length\">\r\n            {{10+pageSizeMembers*(pageNumberMembers-1)}}\r\n          </ng-container>\r\n          of {{infoChat.users.length}} entries</p>\r\n        <nav class=\"ml-auto\">\r\n          <pagination-controls (pageChange)=\"pageNumberMembers = $event\"></pagination-controls>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"danh-sach-tin-nhan\">\r\n      <div class=\"page-header\">\r\n        <div class=\"page-title\"> # Danh sách tin nhắn </div>\r\n      </div>\r\n      <table class=\"table table-bordered table-striped w-100\">\r\n        <tr>\r\n          <th>Nội dung</th>\r\n          <th>Kiểu tin nhắn</th>\r\n          <th>File đính kèm</th>\r\n          <th>Người gửi</th>\r\n          <th>Thời gian nhắn</th>\r\n          <th></th>\r\n        </tr>\r\n        <thead>\r\n        </thead>\r\n        <tbody *ngIf=\"infoChat.messages.length > 0\">\r\n        <tr *ngFor=\"let message of infoChat.messages | paginate: { itemsPerPage: pageSizeMessages, currentPage: pageNumberMessages }\">\r\n          <td>{{message.content}}</td>\r\n          <td>{{message.type}}</td>\r\n          <td>{{message.path}}</td>\r\n          <td>{{message.senderName}}</td>\r\n          <td>{{message.createdAt | date:'short'}}</td>\r\n          <td>\r\n            <button title=\"Xóa tin nhắn\" class=\"link-danger btn-option\"><i class=\"fa fa-solid fa-trash\"></i></button>\r\n          </td>\r\n        </tr>\r\n        </tbody>\r\n      </table>\r\n      <div class=\"d-flex mt-4 flex-wrap\">\r\n        <p class=\"text-muted\">Showing {{1+pageSizeMessages*(pageNumberMessages-1)}} to\r\n          <ng-container *ngIf=\"(10+pageSizeMessages*(pageNumberMessages-1)) >= infoChat.messages.length\">\r\n            {{infoChat.messages.length}}\r\n          </ng-container>\r\n          <ng-container *ngIf=\"(10+pageSizeMessages*(pageNumberMessages-1)) < infoChat.messages.length\">\r\n            {{10+pageSizeMessages*(pageNumberMessages-1)}}\r\n          </ng-container>\r\n          of {{infoChat.messages.length}} entries</p>\r\n        <nav class=\"ml-auto\">\r\n          <pagination-controls (pageChange)=\"pageNumberMessages = $event\"></pagination-controls>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"modal fade\" id=\"modalDeleteMember\">\r\n  <div class=\"modal-dialog\">\r\n    <div *ngIf=\"memberDelete != null || memberDelete != undefined\" class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <div class=\"d-flex\">\r\n          Bạn có muốn xóa người dùng: <div style=\"font-weight: 600;\"> {{memberDelete.name}}</div>\r\n          khỏi phòng chat\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex p-3 justify-content-around\">\r\n        <button class=\"btn btn-primary\" (click)=\"deleteMember(memberDelete.id)\">Xác nhận</button>\r\n        <button class=\"btn btn-dark\" data-dismiss=\"modal\">Hủy</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {Router} from \"@angular/router\";\r\nimport {ChatroomService} from \"../../../../services/chatroom.service\";\r\nimport {ToastrService} from \"ngx-toastr\";\r\nimport {error} from \"@angular/compiler-cli/src/transformers/util\";\r\n\r\ndeclare const $: any;\r\n\r\n@Component({\r\n  selector: 'app-info-detail-chat-room',\r\n  templateUrl: './info-detail-chat-room.component.html',\r\n  styleUrls: ['./info-detail-chat-room.component.css']\r\n})\r\nexport class InfoDetailChatRoomComponent implements OnInit{\r\n  idChatRoom!: string;\r\n  infoChat!: any;\r\n  memberDelete: any | undefined;\r\n\r\n  pageSizeMessages = 10; // Số lượng mục trên mỗi trang\r\n  pageNumberMessages = 1;\r\n  pageSizeMembers = 10; // Số lượng mục trên mỗi trang\r\n  pageNumberMembers = 1;\r\n\r\n  constructor(private router: Router, private chatRoomService: ChatroomService, private toastr: ToastrService) {}\r\n\r\n  ngOnInit() {\r\n    const arrayUrl = this.router.url.split('/');\r\n    this.idChatRoom = arrayUrl[arrayUrl.length - 1];\r\n    this.getInfoChatRoom();\r\n  }\r\n\r\n  getInfoChatRoom(){\r\n    this.chatRoomService.getDetailChatAdmin(parseInt(this.idChatRoom)).subscribe({\r\n      next: (response: any) => {\r\n        this.infoChat = response;\r\n        console.log(this.infoChat);\r\n      },\r\n      error: err => this.toastr.error('', err, {\r\n        timeOut: 2000\r\n      })\r\n    })\r\n  }\r\n\r\n  onDeleteMember(memberDelete: any){\r\n    this.memberDelete = memberDelete\r\n    $('#modalDeleteMember').modal();\r\n  }\r\n\r\n  deleteMember(userId: any){\r\n    this.chatRoomService.removeMemberInGroup(userId).subscribe({\r\n      next: _ => {\r\n        this.getInfoChatRoom();\r\n        this.toastr.success('', 'Xóa người dùng khỏi phòng chat thành công!', {\r\n          timeOut: 2000\r\n        })\r\n        $('modalDeleteMember').modal('hide');\r\n      },\r\n      error: err => {\r\n        this.toastr.error('', 'Xóa người dùng khỏi phòng chat không thành công!', {\r\n          timeOut: 2000\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n}\r\n","<div class=\"main-panel\">\r\n  <div class=\"content-wrapper\">\r\n    <div class=\"page-header\">\r\n      <h3 class=\"page-title\"> Danh sách khách hàng </h3>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <button class=\"btn btn-info btn-rounded\">Tạo tài khoản khách hàng</button>\r\n      </nav>\r\n    </div>\r\n    <table class=\"table table-bordered table-striped table-hover\">\r\n      <thead class=\"table-dark\">\r\n      <tr>\r\n        <th></th>\r\n        <th>Họ và tên</th>\r\n        <th>Số điện thoại</th>\r\n        <th>Email</th>\r\n        <th>Giới tính</th>\r\n        <th>Lần đăng nhập cuối</th>\r\n        <th>Trạng thái</th>\r\n        <th>Ngày đăng kí</th>\r\n        <th></th>\r\n      </tr>\r\n      </thead>\r\n      <tbody *ngIf=\"clients.length > 0\">\r\n      <tr *ngFor=\"let user of clients | paginate: { itemsPerPage: pageSize, currentPage: pageNumber }\">\r\n        <td><img src=\"{{ user.avatar | pipeHostFile }}\" alt=\"\" /></td>\r\n        <td>{{user.name}}</td>\r\n        <td>{{user.phone}}</td>\r\n        <td>{{user.email}}</td>\r\n        <td>{{user.gender}}</td>\r\n        <td>{{user.lastLogin}}</td>\r\n        <td>\r\n          <ng-container *ngIf=\"user.status === true\">\r\n            <label class=\"badge badge-success\">Hoạt động</label>\r\n          </ng-container>\r\n          <ng-container *ngIf=\"user.status === false\">\r\n            <label class=\"badge badge-warning\">Đã khóa</label>\r\n          </ng-container>\r\n        </td>\r\n        <td>{{user.createdAt | date:'short'}}</td>\r\n        <td>\r\n          <a href=\"#\" title=\"Xem chi tiết\" class=\"link-info\"><i class=\"fa fa-solid fa-eye\"></i></a> |\r\n          <a href=\"#\" title=\"Chỉnh sửa\" class=\"link-primary\"><i class=\"fa fa-solid fa-pen\"></i></a> |\r\n          <a href=\"#\" title=\"Xóa\" class=\"link-danger\"><i class=\"fa fa-solid fa-trash\"></i></a>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n    <div class=\"d-flex mt-4 flex-wrap\">\r\n      <p class=\"text-muted\">Showing {{1+pageSize*(pageNumber-1)}} to\r\n        <ng-container *ngIf=\"(10+pageSize*(pageNumber-1)) >= clients.length\">\r\n          {{clients.length}}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"(10+pageSize*(pageNumber-1)) < clients.length\">\r\n          {{10+pageSize*(pageNumber-1)}}\r\n        </ng-container>\r\n        of {{clients.length}} entries</p>\r\n      <nav class=\"ml-auto\">\r\n        <pagination-controls (pageChange)=\"pageNumber = $event\"></pagination-controls>\r\n      </nav>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {UserService} from \"../../../../services/user.service\";\r\nimport {ToastrService} from \"ngx-toastr\";\r\n\r\n@Component({\r\n  selector: 'app-client-management',\r\n  templateUrl: './client-management.component.html',\r\n  styleUrls: ['./client-management.component.css']\r\n})\r\nexport class ClientManagementComponent implements OnInit{\r\n  clients: any[] = [];\r\n\r\n  pageSize = 10; // Số lượng mục trên mỗi trang\r\n  pageNumber = 1;\r\n\r\n  constructor(private userService: UserService, private toastr: ToastrService) {  }\r\n\r\n  ngOnInit() {\r\n    this.getAllClients();\r\n  }\r\n\r\n  getAllClients() {\r\n    this.userService.getAllClients().subscribe({\r\n      next: (response: any) => {\r\n        this.clients = response;\r\n        console.log(this.clients);\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-detail-infor-client',\r\n  templateUrl: './detail-infor-client.component.html',\r\n  styleUrls: ['./detail-infor-client.component.css']\r\n})\r\nexport class DetailInforClientComponent {\r\n\r\n}\r\n","<p>detail-infor-client works!</p>\r\n","<div class=\"main-panel\">\r\n  <div class=\"content-wrapper\">\r\n    <div class=\"page-header\">\r\n      <h3 class=\"page-title\"> Danh sách nhân viên </h3>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <button class=\"btn btn-info btn-rounded\" (click)=\"onCreateStaff()\">Thêm nhân viên</button>\r\n      </nav>\r\n    </div>\r\n    <table class=\"table table-bordered table-striped table-hover\">\r\n      <thead class=\"table-dark\">\r\n      <tr>\r\n        <th></th>\r\n        <th style=\"width: 20%\">Họ và tên</th>\r\n        <th style=\"width: 10%\">Số điện thoại</th>\r\n        <th style=\"width: 10%\">Email</th>\r\n        <th style=\"width: 10%\">Giới tính</th>\r\n        <th style=\"width: 15%\">Lần đăng nhập cuối</th>\r\n        <th style=\"width: 10%\">Trạng thái</th>\r\n        <th style=\"width: 15%\">Ngày đăng kí</th>\r\n        <th></th>\r\n      </tr>\r\n      </thead>\r\n      <tbody *ngIf=\"users.length > 0\">\r\n      <tr *ngFor=\"let user of users | paginate: { itemsPerPage: pageSize, currentPage: pageNumber }\">\r\n        <td><img src=\"{{ user.avatar | pipeHostFile }}\" alt=\"\" /></td>\r\n        <td style=\"width: 20%\">{{user.name}}</td>\r\n        <td style=\"width: 10%\">{{user.phone}}</td>\r\n        <td style=\"width: 10%\">{{user.email}}</td>\r\n        <td style=\"width: 10%\">{{user.gender}}</td>\r\n        <td style=\"width: 15%\">{{user.lastLogin}}</td>\r\n        <td style=\"width: 10%\">\r\n          <ng-container *ngIf=\"user.status === true\">\r\n            <label class=\"badge badge-success\">Hoạt động</label>\r\n          </ng-container>\r\n          <ng-container *ngIf=\"user.status === false\">\r\n            <label class=\"badge badge-warning\">Đã khóa</label>\r\n          </ng-container>\r\n        </td>\r\n        <td style=\"width: 15%\">{{user.createdAt | date:'short'}}</td>\r\n        <td>\r\n          <button href=\"#\" title=\"Xem chi tiết\" class=\"link-info btn-option\"><i class=\"fa fa-solid fa-eye\"></i></button> |\r\n          <button href=\"#\" title=\"Chỉnh sửa\" class=\"link-primary btn-option\"><i class=\"fa fa-solid fa-pen\"></i></button> |\r\n          <button title=\"Xóa\" (click)=\"onDeleteStaff(user)\" class=\"link-danger btn-option\"><i class=\"fa fa-solid fa-trash\"></i></button>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n    <div class=\"d-flex mt-4 flex-wrap\">\r\n      <p class=\"text-muted\">Showing {{1+pageSize*(pageNumber-1)}} to\r\n        <ng-container *ngIf=\"(10+pageSize*(pageNumber-1)) >= users.length\">\r\n          {{users.length}}\r\n        </ng-container>\r\n        <ng-container *ngIf=\"(10+pageSize*(pageNumber-1)) < users.length\">\r\n          {{10+pageSize*(pageNumber-1)}}\r\n        </ng-container>\r\n        of {{users.length}} entries</p>\r\n      <nav class=\"ml-auto\">\r\n        <pagination-controls (pageChange)=\"pageNumber = $event\"></pagination-controls>\r\n      </nav>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"modal fade\" id=\"modalCreateStaff\">\r\n  <div class=\"modal-dialog\">\r\n    <div class=\"modal-content\">\r\n      <div class=\"row\">\r\n        <div class=\"col-12 grid-margin stretch-card\">\r\n            <div class=\"card\">\r\n              <div class=\"card-body\">\r\n                <form  [formGroup]=\"createStaffForm\" (ngSubmit)=\"createStaff()\">\r\n                <h4 class=\"card-title\">Thêm mới nhân viên</h4>\r\n                  <div class=\"form-group\">\r\n                    <label for=\"exampleInputName1\">Họ và tên</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      id=\"exampleInputName1\"\r\n                      formControlName=\"name\"\r\n                      [formControl]=\"$any(createStaffForm.controls['name'])\"\r\n                      placeholder=\"Nhập họ và tên\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"$any(createStaffForm.controls['name']).errors?.['required']\">\r\n                      Hãy nhập họ và tên nhân viên\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <label for=\"exampleInputEmail3\">Email</label>\r\n                    <input\r\n                      type=\"email\"\r\n                      class=\"form-control\"\r\n                      id=\"exampleInputEmail3\"\r\n                      formControlName=\"email\"\r\n                      [formControl]=\"$any(createStaffForm.controls['email'])\"\r\n                      placeholder=\"Nhập địa chỉ email\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"$any(createStaffForm.controls['email']).errors?.['required']\">\r\n                      Hãy nhập email nhân viên\r\n                    </div>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"$any(createStaffForm.controls['email']).errors?.['checkEmail']\">\r\n                      Hãy nhập đúng định dạng email\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <label for=\"exampleInputPhone\">Phone</label>\r\n                    <input\r\n                            type=\"email\"\r\n                            class=\"form-control\"\r\n                            id=\"exampleInputPhone\"\r\n                            formControlName=\"email\"\r\n                            [formControl]=\"$any(createStaffForm.controls['phone'])\"\r\n                            placeholder=\"Nhập địa chỉ email\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"$any(createStaffForm.controls['phone']).errors?.['required']\">\r\n                      Hãy nhập số điện thoại nhân viên\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <label for=\"exampleInputPassword4\">Mật khẩu</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      id=\"exampleInputPassword4\"\r\n                      formControlName=\"password\"\r\n                      [formControl]=\"$any(createStaffForm.controls['password'])\"\r\n                      placeholder=\"Nhập mật khẩu\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"$any(createStaffForm.controls['password']).errors?.['required']\">\r\n                      Hãy nhập mật khẩu\r\n                    </div>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"$any(createStaffForm.controls['password']).errors?.['minLength']\">\r\n                      Nhập tối thiểu 4 ký tự\r\n                    </div>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"$any(createStaffForm.controls['password']).errors?.['maxLength']\">\r\n                      Nhập tối đa 16 ký tự\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <label for=\"exampleSelectGender\">Giới tính</label>\r\n                    <select class=\"form-control\" formControlName=\"gender\" [formControl]=\"$any(createStaffForm.controls['gender'])\" id=\"exampleSelectGender\">\r\n                      <option selected>Nam</option>\r\n                      <option>Nữ</option>\r\n                    </select>\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <label for=\"exampleSelectGender\">Ngày sinh</label>\r\n                    <input\r\n                      type=\"date\"\r\n                      formControlName=\"dob\"\r\n                      [formControl]=\"$any(createStaffForm.controls['dob'])\"\r\n                      class=\"form-control\" >\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <label>Ảnh đại diện</label>\r\n                    <input type=\"file\" name=\"img[]\" (change)=\"uploadFile($event)\" class=\"form-control\" placeholder=\"Chọn ảnh\">\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <label for=\"exampleInputCity1\">Địa chỉ</label>\r\n                    <input\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      id=\"exampleInputCity1\"\r\n                      formControlName=\"address\"\r\n                      [formControl]=\"$any(createStaffForm.controls['address'])\"\r\n                      placeholder=\"Nhập địa chỉ\">\r\n                  </div>\r\n                  <div class=\"form-group\">\r\n                    <label for=\"exampleSelectRole\">Quyền</label>\r\n                    <select class=\"form-control\" formControlName=\"role\" [formControl]=\"$any(createStaffForm.controls['role'])\" id=\"exampleSelectRole\">\r\n                      <option value=\"2\" selected>Nhân viên</option>\r\n                      <option value=\"3\">Người quản trị</option>\r\n                    </select>\r\n                  </div>\r\n                  <button type=\"submit\" class=\"btn btn-primary mr-2\" [disabled]=\"!createStaffForm.valid\">Thêm mới</button>\r\n                  <button class=\"btn btn-light\">Hủy</button>\r\n                </form>\r\n\r\n              </div>\r\n            </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"modal fade\" id=\"modalDeleteStaff\">\r\n  <div class=\"modal-dialog\">\r\n    <div *ngIf=\"staffDelete != null || staffDelete != undefined\" class=\"modal-content\">\r\n      <div class=\"modal-header\">\r\n        <div class=\"d-flex\">\r\n          Bạn có muốn xóa nhân viên: <div style=\"font-weight: 600;\"> {{staffDelete.name}}</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex p-3 justify-content-around\">\r\n        <button class=\"btn btn-primary\" (click)=\"deleteStaff(staffDelete.id)\">Xác nhận</button>\r\n        <button class=\"btn btn-dark\" data-dismiss=\"modal\">Hủy</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<ngx-spinner bdOpacity=\"0.9\" bdColor=\"rgba(51,51,51,0.8)\" size=\"medium\" type=\"ball-spin-clockwise\">\r\n  <p style=\"color: white\" > Loading... </p>\r\n</ngx-spinner>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport {DashboardComponent} from \"./dashboard/dashboard.component\";\r\nimport {ChatRoomManagementComponent} from \"./chat-room/chat-room-management/chat-room-management.component\";\r\nimport {InfoDetailChatRoomComponent} from \"./chat-room/info-detail-chat-room/info-detail-chat-room.component\";\r\nimport {ClientManagementComponent} from \"./client/client-management/client-management.component\";\r\nimport {DetailInforClientComponent} from \"./client/detail-infor-client/detail-infor-client.component\";\r\nimport {StaffManagementComponent} from \"./staff/staff-management/staff-management.component\";\r\nimport {DetailInfoStaffComponent} from \"./staff/detail-info-staff/detail-info-staff.component\";\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'dashboard',\r\n    component: DashboardComponent\r\n  },\r\n  {\r\n    path: 'phong-chat',\r\n    children: [\r\n      {\r\n        path: 'quan-ly-phong-chat',\r\n        component: ChatRoomManagementComponent\r\n      },\r\n      {\r\n        path: 'chi-tiet-phong-chat/:id',\r\n        component: InfoDetailChatRoomComponent\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    path: 'khach-hang',\r\n    children: [\r\n      {\r\n        path: 'quan-ly-khach-hang',\r\n        component: ClientManagementComponent\r\n      },\r\n      {\r\n        path: 'thong-tin-khach-hang/:id',\r\n        component: DetailInforClientComponent\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    path: 'nhan-vien',\r\n    children: [\r\n      {\r\n        path: 'quan-ly-nhan-vien',\r\n        component: StaffManagementComponent\r\n      },\r\n      {\r\n        path: 'thong-tin-nhan-vien/:id',\r\n        component: DetailInfoStaffComponent\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class HomeRoutingModule { }\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {UserService} from \"../../../../services/user.service\";\r\nimport {ToastrService} from \"ngx-toastr\";\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport {NgxSpinnerService} from \"ngx-spinner\";\r\nimport {finalize} from \"rxjs/operators\";\r\n\r\ndeclare const $: any;\r\n\r\n@Component({\r\n  selector: 'app-staff-management',\r\n  templateUrl: './staff-management.component.html',\r\n  styleUrls: ['./staff-management.component.css']\r\n})\r\nexport class StaffManagementComponent implements OnInit{\r\n  users: any[] = [];\r\n  pageSize = 10; // Số lượng mục trên mỗi trang\r\n  pageNumber = 1;\r\n\r\n  createStaffForm: FormGroup = new FormGroup({});\r\n  maxDate: Date = new Date();\r\n  user = new FormData();\r\n  staffDelete: any | undefined;\r\n\r\n  constructor(private userService: UserService,\r\n              private toastr: ToastrService,\r\n              private fb: FormBuilder,\r\n              private spinner: NgxSpinnerService) {  }\r\n\r\n  ngOnInit() {\r\n    this.initializeForm();\r\n    this.maxDate.setFullYear(this.maxDate.getFullYear() - 10);\r\n    this.getAllAdmin();\r\n  }\r\n\r\n  initializeForm(): void {\r\n    this.createStaffForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      email: ['', Validators.required],\r\n      gender: [''],\r\n      phone: [''],\r\n      dob: [''],\r\n      avatar: {},\r\n      role: [''],\r\n      address: [''],\r\n      password: [\r\n        '',\r\n        [\r\n          Validators.required,\r\n          Validators.maxLength(16),\r\n          Validators.minLength(4),\r\n        ],\r\n      ],\r\n    });\r\n  }\r\n\r\n  getAllAdmin() {\r\n    this.userService.getAllAdmin().subscribe({\r\n      next: (response: any) => {\r\n        this.users = response;\r\n      }\r\n    })\r\n  }\r\n\r\n  createStaff(){\r\n    this.spinner.show();\r\n    this.user.append('name', this.createStaffForm.value.name)\r\n    this.user.append('gender', this.createStaffForm.value.gender)\r\n    this.user.append('role', this.createStaffForm.value.role)\r\n    this.user.append('email', this.createStaffForm.value.email)\r\n    this.user.append('phone', this.createStaffForm.value.phone)\r\n    this.user.append('address', this.createStaffForm.value.address)\r\n    this.user.append('password', this.createStaffForm.value.password)\r\n    this.user.append('dob', this.createStaffForm.value.dob)\r\n\r\n    this.userService.createAccountAdmin(this.user).pipe(\r\n        finalize(() => {\r\n          this.spinner.hide();\r\n        })\r\n    ).subscribe({\r\n      next: _ => {\r\n        this.getAllAdmin();\r\n        $('#modalCreateStaff').modal('hide');\r\n        this.toastr.success('', 'Tạo tài khoản nhân viên thành công!', {\r\n          timeOut: 2000,\r\n        });\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error('', err, {\r\n          timeOut: 2000,\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  deleteStaff(id: any){\r\n    this.userService.deleteAdmin(id).subscribe({\r\n      next: _ => {\r\n        this.getAllAdmin();\r\n        this.toastr.success('', 'Xóa nhân viên thành công', {\r\n          timeOut: 2000\r\n        })\r\n        $('#modalDeleteStaff').modal('hide');\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error('', err, {\r\n          timeOut: 2000\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  onCreateStaff(){\r\n    $('#modalCreateStaff').modal();\r\n  }\r\n\r\n  onDeleteStaff(user: any){\r\n    this.staffDelete = user;\r\n    $('#modalDeleteStaff').modal();\r\n  }\r\n\r\n  uploadFile(event: any) {\r\n    if (event.target.files && event.target.files[0]) {\r\n      let filesToUpload: any[] = [];\r\n      for (let i = 0; i < event.target.files.length; i++) {\r\n        filesToUpload.push(event.target.files[i]);\r\n      }\r\n      this.user.append('file', filesToUpload[0]);\r\n    }\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-detail-info-staff',\r\n  templateUrl: './detail-info-staff.component.html',\r\n  styleUrls: ['./detail-info-staff.component.css']\r\n})\r\nexport class DetailInfoStaffComponent {\r\n\r\n}\r\n","<p>detail-info-staff works!</p>\r\n","// module\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PipeModule } from '../../../core/pipe/pipe.module';\r\nimport { InfoDetailChatRoomComponent } from './chat-room/info-detail-chat-room/info-detail-chat-room.component';\r\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\r\nimport { ToastrModule } from \"ngx-toastr\";\r\nimport {HomeRoutingModule} from \"./home-routing.module\";\r\nimport { NgxPaginationModule } from 'ngx-pagination';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\n\r\n\r\n// pipe\r\nimport { PipeHostFilePipe } from '../../../core/pipe/pipe-host-file.pipe';\r\nimport { ChatDatePipe } from '../../../core/pipe/chat-date.pipe';\r\n\r\n// component\r\nimport {DashboardComponent} from \"./dashboard/dashboard.component\";\r\nimport { ChatRoomManagementComponent } from './chat-room/chat-room-management/chat-room-management.component';\r\nimport { ClientManagementComponent } from './client/client-management/client-management.component';\r\nimport { DetailInforClientComponent } from './client/detail-infor-client/detail-infor-client.component';\r\nimport { StaffManagementComponent } from './staff/staff-management/staff-management.component';\r\nimport { DetailInfoStaffComponent } from './staff/detail-info-staff/detail-info-staff.component';\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DashboardComponent,\r\n    ChatRoomManagementComponent,\r\n    InfoDetailChatRoomComponent,\r\n    ClientManagementComponent,\r\n    DetailInforClientComponent,\r\n    StaffManagementComponent,\r\n    DetailInfoStaffComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    HomeRoutingModule,\r\n    NgxChartsModule,\r\n    PipeModule,\r\n    ToastrModule,\r\n    FormsModule,\r\n    NgxPaginationModule,\r\n    NgxSpinnerModule,\r\n    ReactiveFormsModule\r\n  ],\r\n})\r\nexport class HomeModule { }\r\n","'use strict'\nmodule.exports = rfdc\n\nfunction copyBuffer (cur) {\n  if (cur instanceof Buffer) {\n    return Buffer.from(cur)\n  }\n\n  return new cur.constructor(cur.buffer.slice(), cur.byteOffset, cur.length)\n}\n\nfunction rfdc (opts) {\n  opts = opts || {}\n\n  if (opts.circles) return rfdcCircles(opts)\n  return opts.proto ? cloneProto : clone\n\n  function cloneArray (a, fn) {\n    var keys = Object.keys(a)\n    var a2 = new Array(keys.length)\n    for (var i = 0; i < keys.length; i++) {\n      var k = keys[i]\n      var cur = a[k]\n      if (typeof cur !== 'object' || cur === null) {\n        a2[k] = cur\n      } else if (cur instanceof Date) {\n        a2[k] = new Date(cur)\n      } else if (ArrayBuffer.isView(cur)) {\n        a2[k] = copyBuffer(cur)\n      } else {\n        a2[k] = fn(cur)\n      }\n    }\n    return a2\n  }\n\n  function clone (o) {\n    if (typeof o !== 'object' || o === null) return o\n    if (o instanceof Date) return new Date(o)\n    if (Array.isArray(o)) return cloneArray(o, clone)\n    if (o instanceof Map) return new Map(cloneArray(Array.from(o), clone))\n    if (o instanceof Set) return new Set(cloneArray(Array.from(o), clone))\n    var o2 = {}\n    for (var k in o) {\n      if (Object.hasOwnProperty.call(o, k) === false) continue\n      var cur = o[k]\n      if (typeof cur !== 'object' || cur === null) {\n        o2[k] = cur\n      } else if (cur instanceof Date) {\n        o2[k] = new Date(cur)\n      } else if (cur instanceof Map) {\n        o2[k] = new Map(cloneArray(Array.from(cur), clone))\n      } else if (cur instanceof Set) {\n        o2[k] = new Set(cloneArray(Array.from(cur), clone))\n      } else if (ArrayBuffer.isView(cur)) {\n        o2[k] = copyBuffer(cur)\n      } else {\n        o2[k] = clone(cur)\n      }\n    }\n    return o2\n  }\n\n  function cloneProto (o) {\n    if (typeof o !== 'object' || o === null) return o\n    if (o instanceof Date) return new Date(o)\n    if (Array.isArray(o)) return cloneArray(o, cloneProto)\n    if (o instanceof Map) return new Map(cloneArray(Array.from(o), cloneProto))\n    if (o instanceof Set) return new Set(cloneArray(Array.from(o), cloneProto))\n    var o2 = {}\n    for (var k in o) {\n      var cur = o[k]\n      if (typeof cur !== 'object' || cur === null) {\n        o2[k] = cur\n      } else if (cur instanceof Date) {\n        o2[k] = new Date(cur)\n      } else if (cur instanceof Map) {\n        o2[k] = new Map(cloneArray(Array.from(cur), cloneProto))\n      } else if (cur instanceof Set) {\n        o2[k] = new Set(cloneArray(Array.from(cur), cloneProto))\n      } else if (ArrayBuffer.isView(cur)) {\n        o2[k] = copyBuffer(cur)\n      } else {\n        o2[k] = cloneProto(cur)\n      }\n    }\n    return o2\n  }\n}\n\nfunction rfdcCircles (opts) {\n  var refs = []\n  var refsNew = []\n\n  return opts.proto ? cloneProto : clone\n\n  function cloneArray (a, fn) {\n    var keys = Object.keys(a)\n    var a2 = new Array(keys.length)\n    for (var i = 0; i < keys.length; i++) {\n      var k = keys[i]\n      var cur = a[k]\n      if (typeof cur !== 'object' || cur === null) {\n        a2[k] = cur\n      } else if (cur instanceof Date) {\n        a2[k] = new Date(cur)\n      } else if (ArrayBuffer.isView(cur)) {\n        a2[k] = copyBuffer(cur)\n      } else {\n        var index = refs.indexOf(cur)\n        if (index !== -1) {\n          a2[k] = refsNew[index]\n        } else {\n          a2[k] = fn(cur)\n        }\n      }\n    }\n    return a2\n  }\n\n  function clone (o) {\n    if (typeof o !== 'object' || o === null) return o\n    if (o instanceof Date) return new Date(o)\n    if (Array.isArray(o)) return cloneArray(o, clone)\n    if (o instanceof Map) return new Map(cloneArray(Array.from(o), clone))\n    if (o instanceof Set) return new Set(cloneArray(Array.from(o), clone))\n    var o2 = {}\n    refs.push(o)\n    refsNew.push(o2)\n    for (var k in o) {\n      if (Object.hasOwnProperty.call(o, k) === false) continue\n      var cur = o[k]\n      if (typeof cur !== 'object' || cur === null) {\n        o2[k] = cur\n      } else if (cur instanceof Date) {\n        o2[k] = new Date(cur)\n      } else if (cur instanceof Map) {\n        o2[k] = new Map(cloneArray(Array.from(cur), clone))\n      } else if (cur instanceof Set) {\n        o2[k] = new Set(cloneArray(Array.from(cur), clone))\n      } else if (ArrayBuffer.isView(cur)) {\n        o2[k] = copyBuffer(cur)\n      } else {\n        var i = refs.indexOf(cur)\n        if (i !== -1) {\n          o2[k] = refsNew[i]\n        } else {\n          o2[k] = clone(cur)\n        }\n      }\n    }\n    refs.pop()\n    refsNew.pop()\n    return o2\n  }\n\n  function cloneProto (o) {\n    if (typeof o !== 'object' || o === null) return o\n    if (o instanceof Date) return new Date(o)\n    if (Array.isArray(o)) return cloneArray(o, cloneProto)\n    if (o instanceof Map) return new Map(cloneArray(Array.from(o), cloneProto))\n    if (o instanceof Set) return new Set(cloneArray(Array.from(o), cloneProto))\n    var o2 = {}\n    refs.push(o)\n    refsNew.push(o2)\n    for (var k in o) {\n      var cur = o[k]\n      if (typeof cur !== 'object' || cur === null) {\n        o2[k] = cur\n      } else if (cur instanceof Date) {\n        o2[k] = new Date(cur)\n      } else if (cur instanceof Map) {\n        o2[k] = new Map(cloneArray(Array.from(cur), cloneProto))\n      } else if (cur instanceof Set) {\n        o2[k] = new Set(cloneArray(Array.from(cur), cloneProto))\n      } else if (ArrayBuffer.isView(cur)) {\n        o2[k] = copyBuffer(cur)\n      } else {\n        var i = refs.indexOf(cur)\n        if (i !== -1) {\n          o2[k] = refsNew[i]\n        } else {\n          o2[k] = cloneProto(cur)\n        }\n      }\n    }\n    refs.pop()\n    refsNew.pop()\n    return o2\n  }\n}\n"],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,178]}